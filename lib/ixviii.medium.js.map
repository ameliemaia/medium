{"version":3,"sources":["webpack:///webpack/universalModuleDefinition","webpack:///webpack/bootstrap 6d47b00935acd78b8a21","webpack:///./src/core/GL.ts","webpack:///./node_modules/gl-matrix/src/gl-matrix.js","webpack:///./src/math/Vector3.ts","webpack:///./src/core/Constants.ts","webpack:///./src/shaders/chunks/EsVersion.glsl.ts","webpack:///./src/core/Capabilities.ts","webpack:///./node_modules/gl-matrix/src/gl-matrix/common.js","webpack:///./src/geometry/Geometry.ts","webpack:///./src/math/Utils.ts","webpack:///./src/core/Mesh.ts","webpack:///./src/core/Material.ts","webpack:///./src/shaders/chunks/ProjectionView.glsl.ts","webpack:///./src/math/Vector2.ts","webpack:///./src/math/Color.ts","webpack:///./src/utils/Console.ts","webpack:///./src/core/EventDispatcher.ts","webpack:///./src/core/UniformBuffers.ts","webpack:///./src/math/Sphere.ts","webpack:///./src/cameras/Camera.ts","webpack:///./src/core/UniformBuffer.ts","webpack:///./src/shaders/chunks/AmbientLight.glsl.ts","webpack:///./src/shaders/chunks/DirectionalLights.glsl.ts","webpack:///./src/shaders/chunks/Lambert.glsl.ts","webpack:///./src/loaders/HdrLoader.ts","webpack:///./src/core/ImageData.ts","webpack:///./src/loaders/ImageLoader.ts","webpack:///./src/utils/Canvas.ts","webpack:///./src/lights/Light.ts","webpack:///./src/loaders/FileLoader.ts","webpack:///./node_modules/gl-matrix/src/gl-matrix/mat3.js","webpack:///./node_modules/gl-matrix/src/gl-matrix/mat4.js","webpack:///./node_modules/gl-matrix/src/gl-matrix/quat.js","webpack:///./node_modules/gl-matrix/src/gl-matrix/vec3.js","webpack:///./node_modules/gl-matrix/src/gl-matrix/vec4.js","webpack:///./src/core/Object3D.ts","webpack:///./src/core/Vao.ts","webpack:///./src/math/Ray.ts","webpack:///./src/utils/Detect.ts","webpack:///./src/shaders/chunks/PointLights.glsl.ts","webpack:///./src/shaders/chunks/Math.glsl.ts","webpack:///./src/utils/Array.ts","webpack:///./src/geometry/BufferAttribute.ts","webpack:///./src/geometry/LineGeometry.ts","webpack:///./src/geometry/SphereGeometry.ts","webpack:///./node_modules/bezier-js/lib/bezier.js","webpack:///./node_modules/bezier-js/lib/utils.js","webpack:///./src/utils/ObjParser.ts","webpack:///./src/index.ts","webpack:///./node_modules/gl-matrix/src/gl-matrix/mat2.js","webpack:///./node_modules/gl-matrix/src/gl-matrix/mat2d.js","webpack:///./node_modules/gl-matrix/src/gl-matrix/quat2.js","webpack:///./node_modules/gl-matrix/src/gl-matrix/vec2.js","webpack:///./src/cameras/OrthographicCamera.ts","webpack:///./src/cameras/PerspectiveCamera.ts","webpack:///./src/core/Raycaster.ts","webpack:///./src/core/Renderer.ts","webpack:///./package.json","webpack:///./src/core/RenderTarget.ts","webpack:///./src/core/Scene.ts","webpack:///./src/shaders/Basic.glsl.ts","webpack:///./src/shaders/Lambert.glsl.ts","webpack:///./src/shaders/Phong.glsl.ts","webpack:///./src/shaders/chunks/Phong.glsl.ts","webpack:///./src/shaders/Vertex.glsl.ts","webpack:///./src/utils/ShaderParser.ts","webpack:///./src/core/Program.ts","webpack:///./src/core/Texture.ts","webpack:///./node_modules/parse-hdr/index.js","webpack:///./src/core/Texture3d.ts","webpack:///./src/core/TextureCube.ts","webpack:///./src/core/TextureVideo.ts","webpack:///./src/geometry/BoxGeometry.ts","webpack:///./src/geometry/Face.ts","webpack:///./src/geometry/PlaneGeometry.ts","webpack:///./src/helpers/AxisHelper.ts","webpack:///./src/helpers/CameraHelper.ts","webpack:///./src/helpers/GridHelper.ts","webpack:///./src/helpers/NormalsHelper.ts","webpack:///./src/helpers/VerticesHelper.ts","webpack:///./src/lights/Lights.ts","webpack:///./src/lights/AmbientLight.ts","webpack:///./src/lights/DirectionalLight.ts","webpack:///./src/lights/PointLight.ts","webpack:///./src/shaders/chunks/index.ts","webpack:///./src/shaders/chunks/Conditionals.glsl.ts","webpack:///./src/shaders/chunks/EnvMapCube.glsl.ts","webpack:///./src/shaders/chunks/Fog.glsl.ts","webpack:///./src/shaders/chunks/Gamma.glsl.ts","webpack:///./src/shaders/chunks/Matcap.glsl.ts","webpack:///./src/shaders/chunks/Noise.glsl.ts","webpack:///./src/shaders/chunks/Packing.glsl.ts","webpack:///./src/shaders/chunks/Tonemap.glsl.ts","webpack:///./src/shaders/chunks/Transpose.glsl.ts","webpack:///./src/utils/CameraDolly.ts","webpack:///./node_modules/bezier-js/index.js","webpack:///./node_modules/bezier-js/lib/poly-bezier.js","webpack:///./node_modules/uuid/v1.js","webpack:///./node_modules/uuid/lib/rng-browser.js","webpack:///(webpack)/buildin/global.js","webpack:///./node_modules/uuid/lib/bytesToUuid.js","webpack:///./src/utils/Clock.ts","webpack:///./node_modules/webgl-obj-loader/webgl-obj-loader.js","webpack:///./src/controls/OrbitControls.ts","webpack:///./src/loaders/JsonLoader.ts","webpack:///./src/loaders/ObjLoader.ts"],"names":[],"mappings":"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CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,aAAa,OAAO;AACpB;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,OAAO;AAClB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,OAAO;AAClB,aAAa,KAAK;AAClB;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,MAAM;AACjB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,UAAU,KAAK;AACf,UAAU,KAAK;AACf;AACA,YAAY,KAAK;AACjB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,UAAU,KAAK;AACf,UAAU,KAAK;AACf;AACA,YAAY,KAAK;AACjB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,aAAa,OAAO;AACpB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,aAAa,OAAO;AACpB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;AAIA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,OAAO;AAClB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,OAAO;AAClB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,QAAQ;AACrB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,QAAQ;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,cAAc;AACd;AACA;AACA;AAAA;AAAA;;AAEA;AACA,cAAc;AACd;AACA;AACA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACxuBA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,aAAa,OAAO;AACpB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA,YAAY,WAAW,WAAW;AAClC;AACA;AACA;AACA;;AAEA,YAAY,WAAW,YAAY;AACnC;AACA;AACA;AACA;;AAEA,aAAa,YAAY,YAAY;AACrC;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH,eAAe,YAAY,YAAY;AACvC,eAAe,YAAY,YAAY;AACvC,eAAe,YAAY,aAAa;;AAExC,iBAAiB,cAAc,cAAc;AAC7C,iBAAiB,cAAc,cAAc;AAC7C,iBAAiB,cAAc,eAAe;;AAE9C;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,OAAO;AAClB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,0EAA+B,aAAa;;AAE5C;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,aAAa,YAAY,YAAY;AACrC,aAAa,YAAY,YAAY;AACrC,aAAa,YAAY,aAAa;;AAEtC;AACA,sBAAsB,yBAAyB;AAC/C,0BAA0B,qBAAqB;AAC/C,0BAA0B,yBAAyB;;AAEnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,kBAAkB;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,OAAO;AAClB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,kBAAkB;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,OAAO;AAClB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,kBAAkB;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,OAAO;AAClB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,kBAAkB;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,OAAO;AAClB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;;AAEA,0EAA+B,aAAa;;AAE5C;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,OAAO;AAClB,aAAa,KAAK;AAClB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,OAAO;AAClB,aAAa,KAAK;AAClB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,OAAO;AAClB,aAAa,KAAK;AAClB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,MAAM;AACjB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,MAAM;AACjB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,YAAY,KAAK;AACjB,YAAY,KAAK;AACjB,YAAY,KAAK;AACjB;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,KAAK;AACjB,YAAY,KAAK;AACjB,YAAY,KAAK;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,YAAY,KAAK;AACjB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,MAAM;AACjB,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,MAAM;AACjB,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB;AACA,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,aAAa,OAAO;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,aAAa,OAAO;AACpB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,OAAO;AAClB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,OAAO;AAClB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,QAAQ;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,QAAQ;AACrB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,cAAc;AACd;AACA;AACA;AAAA;AAAA;;AAEA;AACA,cAAc;AACd;AACA;AACA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC1qDA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,OAAO;AAClB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,KAAK;AACjB,YAAY,KAAK;AACjB,YAAY,OAAO;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,OAAO;AAClB,aAAa,KAAK;AAClB;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,OAAO;AAClB,aAAa,KAAK;AAClB;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,OAAO;AAClB,aAAa,KAAK;AAClB;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,OAAO;AAClB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,oCAAoC;AACpC;AACA,sBAAsB;AACtB;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,EAAE;AACb,WAAW,EAAE;AACb,WAAW,EAAE;AACb,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,aAAa,OAAO;AACpB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACA;AACA;AAAA;AAAA;;AAEA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,aAAa,KAAK;AAClB;AACA;AACA;AAAA;AAAA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACA;AACA;AAAA;AAAA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,aAAa,KAAK;AAClB;AACA;AACA;AAAA;AAAA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACA;AACA;AAAA;AAAA;;AAEA;AACA,cAAc;AACd;AACA;AACA;AAAA;AAAA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,OAAO;AAClB,aAAa,KAAK;AAClB;AACA;AACA;AAAA;AAAA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,OAAO;AACpB;AACA;AACA;AAAA;AAAA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,OAAO;AAClB,aAAa,KAAK;AAClB;AACA;AACA;AAAA;AAAA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,aAAa,OAAO;AACpB;AACA;AAAA;AAAA;;AAEA;AACA,cAAc;AACd;AACA;AACA;AAAA;AAAA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,aAAa,OAAO;AACpB;AACA;AACA;AAAA;AAAA;;AAEA;AACA,cAAc;AACd;AACA;AACA;AAAA;AAAA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACA;AACA;AAAA;AAAA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,QAAQ;AACrB;AACA;AAAA;AAAA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,QAAQ;AACrB;AACA;AAAA;AAAA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AAAA;AAAA;;AAED;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,OAAO;AAClB,aAAa,KAAK;AAClB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA,CAAC;AAAA;AAAA;;AAED;AACA;AACA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,CAAC;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC7lBD;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,aAAa,OAAO;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,OAAO;AAClB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,OAAO;AAClB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,OAAO;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,OAAO;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,aAAa,OAAO;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,OAAO;AACpB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,OAAO;AAClB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,OAAO;AAClB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,OAAO;AAClB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,OAAO;AAClB,aAAa,KAAK;AAClB;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,OAAO;AAClB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,OAAO;AAClB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,OAAO;AAClB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,OAAO;AACpB;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,aAAa,OAAO;AACpB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,QAAQ;AACrB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,QAAQ;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,cAAc;AACd;AACA;AACA;AAAA;AAAA;;AAEA;AACA,cAAc;AACd;AACA;AACA;AAAA;AAAA;;AAEA;AACA,cAAc;AACd;AACA;AACA;AAAA;AAAA;;AAEA;AACA,cAAc;AACd;AACA;AACA;AAAA;AAAA;;AAEA;AACA,cAAc;AACd;AACA;AACA;AAAA;AAAA;;AAEA;AACA,cAAc;AACd;AACA;AACA;AAAA;AAAA;;AAEA;AACA,cAAc;AACd;AACA;AACA;AAAA;AAAA;;AAEA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,SAAS;AACpB,WAAW,OAAO;AAClB,aAAa,MAAM;AACnB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,KAAK;AACL;AACA;;AAEA,mBAAmB,OAAO;AAC1B,oBAAoB,iBAAiB;AACrC;AACA,oBAAoB,iBAAiB;AACrC;;AAEA;AACA;AACA,CAAC;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC9vBD;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,OAAO;AAClB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,OAAO;AAClB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,OAAO;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,OAAO;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,aAAa,OAAO;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,aAAa,OAAO;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,OAAO;AACpB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,OAAO;AAClB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,OAAO;AAClB,aAAa,KAAK;AAClB;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,aAAa,OAAO;AACpB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,QAAQ;AACrB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,QAAQ;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,cAAc;AACd;AACA;AACA;AAAA;AAAA;;AAEA;AACA,cAAc;AACd;AACA;AACA;AAAA;AAAA;;AAEA;AACA,cAAc;AACd;AACA;AACA;AAAA;AAAA;;AAEA;AACA,cAAc;AACd;AACA;AACA;AAAA;AAAA;;AAEA;AACA,cAAc;AACd;AACA;AACA;AAAA;AAAA;;AAEA;AACA,cAAc;AACd;AACA;AACA;AAAA;AAAA;;AAEA;AACA,cAAc;AACd;AACA;AACA;AAAA;AAAA;;AAEA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,SAAS;AACpB,WAAW,OAAO;A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AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;;AAEA;AACA,kCAAkC,SAAS;AAC3C;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,YAAY;AACZ;;AAEA;AACA,kCAAkC,SAAS;AAC3C;AACA,eAAe,6BAA6B;AAC5C,eAAe,6BAA6B;AAC5C;AACA;AACA;AACA;;AAEA;AACA,kCAAkC,SAAS;AAC3C;AACA,mCAAmC,0BAA0B;AAC7D;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,6BAA6B;AAC5C,eAAe,6BAA6B;AAC5C;AACA,eAAe,uDAAuD;AACtE,eAAe,mDAAmD;AAClE,eAAe,mDAAmD;AAClE,eAAe;AACf;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC,QAAQ;AACzC;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,+CAA+C,KAAK;AACpD;AACA,yBAAyB,KAAK;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,uCAAuC,kBAAkB;AACzD;AACA,kBAAkB,UAAU;AAC5B;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,kBAAkB,cAAc;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,WAAW;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL;AACA;AACA,iBAAiB,uBAAuB;AACxC,iBAAiB,gCAAgC;;AAEjD;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,8BAA8B;AACrD;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,qBAAqB,kBAAkB;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,mBAAmB,KAAK;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,0BAA0B,wBAAwB,QAAQ,OAAO;AACjE,0BAA0B,WAAW,YAAY,SAAS;AAC1D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,cAAc;AACd,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,YAAY;AAC7B,iBAAiB,YAAY;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,UAAU;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,iBAAiB;AAC7C;AACA;AACA;AACA,8BAA8B,KAAK;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,0BAA0B,4BAA4B;AACtD,kBAAkB,6BAA6B;;AAE/C;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA,eAAe,eAAe;;AAE9B;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,mBAAmB;AACnB;AACA;AACA;AACA,2BAA2B,eAAe;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA,sDAAsD,uBAAuB,EAAE;AAC/E;AACA,OAAO;AACP,mDAAmD,mCAAmC,EAAE;AACxF;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,OAAO;AACP;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B,wBAAwB;AAClD;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,OAAO;AACP,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,gBAAgB;AACpC;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,mCAAmC,+BAA+B;AAClE,mCAAmC,iBAAiB;;AAEpD,6BAA6B,kBAAkB;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,yBAAyB,YAAY;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA,KAAK;AACL;AACA;AACA;AACA,mCAAmC,gBAAgB;AACnD,qCAAqC,uCAAuC;;AAE5E;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,oEAAoE;AAClF;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,OAAO;;AAEP;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB;AACpB;AACA,SAAS;AACT;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,OAAO;;AAEP;AACA;AACA;AACA,kBAAkB,kCAAkC;AACpD,cAAc,6BAA6B;AAC3C;AACA,OAAO;;AAEP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,sCAAsC,WAAW;AACjD;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,mCAAmC,wBAAwB;AAC3D;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,OAAO;AACrB;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,oBAAoB;AAC5C;AACA,SAAS;AACT,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA,CAAC;;;;;;;AC/0BD;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,0CAA0C,EAAE;AACrE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA,KAAK;;AAEL;AACA;AACA,KAAK;;AAEL;AACA;AACA,cAAc,OAAO;AACrB;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA,KAAK;;AAEL;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP,cAAc;AACd,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA,gBAAgB,cAAc;AAC9B,cAAc;AACd,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA,YAAY,8CAA8C;AAC1D,YAAY;AACZ;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,OAAO;AACP;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA,wBAAwB;AACxB;AACA,gCAAgC,yBAAyB;AACzD,gCAAgC,cAAc;AAC9C,kCAAkC,OAAO;AACzC;AACA;AACA,wBAAwB,YAAY;AACpC,wBAAwB,YAAY;AACpC;AACA,cAAc;AACd,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA,sBAAsB,IAAI,QAAQ,KAAK;AACvC;AACA;AACA,gCAAgC,sBAAsB;;AAEtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;;AAEA;;AAEA,mCAAmC,yCAAyC;AAC5E;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA,OAAO;AACP,KAAK;;AAEL;AACA;AACA,cAAc,OAAO;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA,oCAAoC,0BAA0B;AAC9D,oCAAoC,0BAA0B;AAC9D,+CAA+C,0BAA0B;AACzE,oCAAoC,0BAA0B;AAC9D,oCAAoC,0BAA0B;AAC9D,+CAA+C,0BAA0B;AACzE;AACA;AACA,kBAAkB,0CAA0C;AAC5D;AACA;AACA,kBAAkB,uCAAuC;AACzD,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,iCAAiC;AAC9C,aAAa,kCAAkC;AAC/C,aAAa,mCAAmC;AAChD,aAAa,kCAAkC;AAC/C;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA,OAAO;AACP;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,UAAU;AACnC,kBAAkB,KAAK,KAAK,KAAK;AACjC,OAAO;AACP;AACA;AACA;AACA,yBAAyB,KAAK,KAAK,KAAK,EAAE,OAAO,UAAU;AAC3D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,CAAC;;;;;;;;;;ACniBkC;AAErB,mEAAc;AAC1B,UAAU,OAAG,IAAO,yDAAK,KAAO;AAC1B;AACI,kBAAE,IAAgB,aAAK,KAAU;AAClC,iBAAE,IAAgB,aAAK,KAAe;AACtC,iBAAE,IAAe,YAAK,KAAS;AACnC,aAAE,IAAgB,aAAK,KAE9B;AANS;AAMR,C;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACJU;AAAA;AACR,IAAO,OAAuB,2BAAe,WAAE;AAC1C,WAAuB,yBAAG;AACxB,eACR;AACF;AAAC;AAEM;AAC6C;AAC5B;AAEsB;AACzB;AAEW;AAClB;AAEiB;AACf;AAEuB;AACnB;AAEkB;AACpB;AAE4C;AAChC;AAE8B;AAC/B;AAEY;AACpB;AAEkB;AACnB;AAE2B;AACvB;AAES;AAChB;AAEsB;AACnB;AAEiB;AAClB;AAEsB;AACpB;AAEwB;AACtB;AAEwB;AACvB;AAEyB;AACxB;AAE+B;AAC9B;AAEG;AACd;AAEJ;AACsC;AAC1B;AAEkC;AAC9B;AAEgB;AACvB;AAE+B;AAC3B;AAE6B;AAC5B;AAE8B;AAC7B;AAEhB;AACoC;AACxB;AAE4B;AAC1B;AAEsB;AACxB;AAE8B;AAC3B;AAE6B;AAC5B;AAEjB;AAC4B;AACnB;AAE+B;AACzB;AAEiC;AAC7B;AAEiB;AACvB;AAEf;AAC0B;AAChB;AAEoB;AAClB;AAEkB;AAClB;AAEU;AACd;AAEoB;AACjB;AAEwB;AACrB;AAEX;AACwC;AAC1B;AAEhB;AACoC;AACtB;AAEwB;AACvB;AAEW;AACjB;AAEmB;AAClB;AAEwB;AACrB;AAEV;AAC0C;AAC5B;AAEf;AACoC;AACxB;AAEsB;AACvB;AAE2B;AACzB;AAEuB;AACxB;AAEsB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AClL5C;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,aAAa,OAAO;AACpB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,OAAO;AAClB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,OAAO;AAClB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,aAAa,OAAO;AACpB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,aAAa,OAAO;AACpB;AACA;AACA;AACA;;AAEA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,QAAQ;AACrB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,QAAQ;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,OAAO;AAClB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,OAAO;AAClB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,cAAc;AACd;AACA;AACA;AAAA;AAAA;;AAEA;AACA,cAAc;AACd;AACA;AACA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC5ZA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,aAAa,MAAM;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,MAAM;AACjB,aAAa,MAAM;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,MAAM;AACjB,aAAa,MAAM;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,MAAM;AACjB,aAAa,MAAM;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,aAAa,MAAM;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,aAAa,MAAM;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,MAAM;AACjB,aAAa,MAAM;AACnB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,MAAM;AACjB,aAAa,OAAO;AACpB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,MAAM;AACjB,WAAW,MAAM;AACjB,aAAa,MAAM;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,MAAM;AACjB,WAAW,OAAO;AAClB,aAAa,MAAM;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,MAAM;AACjB,WAAW,KAAK;AAChB,aAAa,MAAM;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,MAAM;AACjB,WAAW,KAAK;AAChB,aAAa,MAAM;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,OAAO;AAClB,aAAa,MAAM;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,KAAK;AAChB,aAAa,MAAM;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,KAAK;AAChB,aAAa,MAAM;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,MAAM;AACjB,aAAa,OAAO;AACpB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,MAAM;AACjB,aAAa,OAAO;AACpB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,MAAM;AACjB,WAAW,MAAM;AACjB,aAAa,MAAM;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,MAAM;AACjB,WAAW,MAAM;AACjB,aAAa,MAAM;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,MAAM;AACjB,WAAW,OAAO;AAClB,aAAa,MAAM;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,MAAM;AACjB,WAAW,MAAM;AACjB,WAAW,OAAO;AAClB,aAAa,MAAM;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,MAAM;AACjB,aAAa,QAAQ;AACrB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,MAAM;AACjB,aAAa,QAAQ;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,cAAc;AACd;AACA;AACA;AAAA;AAAA;;AAEA;AACA,cAAc;AACd;AACA;AACA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC7bA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA,aAAa,MAAM;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,MAAM;AACjB,aAAa,MAAM;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,aAAa,MAAM;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,aAAa,MAAM;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,MAAM;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,KAAK;AAChB,aAAa,MAAM;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,KAAK;AAChB,aAAa,MAAM;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,KAAK;AAChB,aAAa,MAAM;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,MAAM;AACjB,aAAa,MAAM;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,MAAM;AACjB,aAAa,MAAM;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,aAAa,MAAM;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,YAAY,KAAK;AACjB,YAAY,MAAM;AAClB,YAAY,KAAK;AACjB;AACA;AAAA;AAAA;;AAEA;AACA;AACA,YAAY,KAAK;AACjB,YAAY,MAAM;AAClB,YAAY,KAAK;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,KAAK;AAChB,aAAa,MAAM;AACnB;AACA;AACA;AAAA;AAAA;;AAEA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,KAAK;AAChB,aAAa,MAAM;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,YAAY,KAAK;AACjB,YAAY,MAAM;AAClB,YAAY,KAAK;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,MAAM;AACjB,WAAW,KAAK;AAChB,aAAa,MAAM;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,MAAM;AACjB,WAAW,OAAO;AAClB,aAAa,MAAM;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,MAAM;AACjB,WAAW,OAAO;AAClB,aAAa,MAAM;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,MAAM;AACjB,WAAW,OAAO;AAClB,aAAa,MAAM;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,MAAM;AACjB,WAAW,KAAK;AAChB,aAAa,MAAM;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,KAAK;AAChB,WAAW,MAAM;AACjB,aAAa,MAAM;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,MAAM;AACjB,WAAW,KAAK;AAChB,WAAW,OAAO;AAClB,aAAa,MAAM;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,MAAM;AACjB,WAAW,MAAM;AACjB,aAAa,MAAM;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,MAAM;AACjB,WAAW,MAAM;AACjB,aAAa,MAAM;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,cAAc;AACd;AACA;AACA;AAAA;AAAA;;AAEA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,MAAM;AACjB,WAAW,OAAO;AAClB,aAAa,MAAM;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,MAAM;AACjB,aAAa,OAAO;AACpB;AACA;AACA;AAAA;AAAA;;AAEA;AACA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,MAAM;AACjB,WAAW,MAAM;AACjB,WAAW,OAAO;AAClB,aAAa,MAAM;AACnB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,MAAM;AACjB,aAAa,MAAM;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,MAAM;AACjB,aAAa,MAAM;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,MAAM;AACjB,aAAa,OAAO;AACpB;AACA;AACA;AAAA;AAAA;;AAEA;AACA,cAAc;AACd;AACA;AACA;AAAA;AAAA;;AAEA;AACA;AACA;AACA,WAAW,MAAM;AACjB,aAAa,OAAO;AACpB;AACA;AACA;AAAA;AAAA;;AAEA;AACA,cAAc;AACd;AACA;AACA;AAAA;AAAA;;AAEA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,MAAM;AACjB,aAAa,MAAM;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,MAAM;AACjB,aAAa,OAAO;AACpB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,MAAM;AACjB,aAAa,QAAQ;AACrB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,MAAM;AACjB,aAAa,QAAQ;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACr0BA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,OAAO;AAClB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,OAAO;AAClB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,OAAO;AACpB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,OAAO;AACpB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,aAAa,OAAO;AACpB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,aAAa,OAAO;AACpB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,OAAO;AACpB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,OAAO;AAClB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,OAAO;AAClB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,MAAM;AACjB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,OAAO;AAClB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,OAAO;AACpB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;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,OAAkB,qEAAK,KAAI,IAAM,MAAM,OAAO,MAAU;AAElE,cAAM,EAAQ,QAAO,QAAe,4EAAK,MAAQ;AAC9C,YAAU,UAAM,OAAG,GAAG,GAAM,MAAQ;AAEjC,eACR;AAAC;AAEa;AACV,aAAK,wCAAO;AACZ,WAAc,cAAK,KAAU;AAC3B,aAAQ,UACd;AACD;;;;;;;;;ACjJD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;;AAEA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,mBAAmB,KAAK;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,oBAAoB,oBAAoB;AACxC;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA,gBAAgB,MAAM;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA,qBAAqB,oBAAoB;AACzC;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA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W,YAAM,KAAU;AAC1C,mBAAY,YAAG,GAAoB,qBAAQ;AAC3C,mBAAW,WACT,GAAW,YACZ,GACC,GAAK,MACL,GAAK,MACL,GAAc,eACZ,KACJ;AACA,mBAAY,YAAG,GAAW,YAC9B;AAAC;AACG,iBAAa,eAAO,KAAM,MAChC;AACF;AASD;;;;;;;;;;;AC3FiC;AAEpB,MAAW,YAAgB;AACvC,gBAAiB,QAAI,GAAQ,SAAI,GAAO,QAAI,GAAuB;AAC7C;AAEN;AAOb;;;;;AAED,cAAc;AACC;AACb,SAAI,KACJ,CAAI,KACD,KACA,KACH,CAAI,KACD,KACA,KACA,KACA,KACH,CAAI,KACD,KACA;AAES;AACZ,SAAI,KACJ,CAAI,KACJ,CAAI,KACJ,CAAI,KACD,KACH,CAAI,KACD,KACA,KACH,CAAI,KACD,KACH,CAAI,KACJ,CAAI;AAEO;AACX,SAAI,KACD,KACH,CAAI,KACJ,CAAI,KACD,KACA,KACA,KACA,KACA,KACA,KACA,KACH,CAAI;AAEU;AACd,SAAI,KACJ,CAAI,KACJ,CAAI,KACD,KACH,CAAI,KACJ,CAAI,KACD,KACH,CAAI,KACD,KACH,CAAI,KACJ,CAAI,KACD;AAEU;AACV,WA1DY,EA2Df,CAAI,KACJ,CAAI,KACD,KACA,KACH,CAAI,KACD,KACA,KACA,KACA,KACH,CAAI,KACD;AAES;AACZ,SAAI,KACJ,CAAI,KACJ,CAAI,KACJ,CAAI,KACJ,CAAI,KACD,KACH,CAAI,KACD,KACA,KACH,CAAI,KACD,KACH,CACA;AAEE,aAAC,IAAK,IAAI,GAAG,IAAW,SAAO,QAAG,KAAK,GAAG;AACpC,qBAAG,MAAU;AACb,qBAAE,IAAK,MAAW;AAClB,qBAAE,IAAK,MACjB;AAAC;AAED,cAAa,WACV,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACC,IACD,GACC,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,GACF;AArCc;AAuChB,cAAa;AACH;AACL,WAFW,EAGX,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA;AAEI;AACJ,aACA,KACH,CAAI,KACD,KACA,KACH,CAAI,KACD,KACA,KACH,CAAI,KACD,KACA,KACH,CAAI;AAEE;AACH,aACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA;AAEM;AACN,aACH,CAAI,KACD,KACA,KACH,CAAI,KACD,KACA,KACH,CAAI,KACD,KACA,KACH,CAAI,KACD;AAEK;AACL,aACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA;AAEI;AACP,SAAI,KACD,KACA,KACH,CAAI,KACD,KACA,KACH,CAAI,KACD,KACA,KACH,CAAI,KACD,KAEH;AAEF,cAAS;AACM;AACV,WAFO,EAGP,KACA,KACA,KACA,KACA,KACA,KACA;AACS;AACT,aACA,KACA,KACA,KACA,KACA,KACA,KACA;AACQ;AACR,aACA,KACA,KACA,KACA,KACA,KACA,KACA;AACW;AACX,aACA,KACA,KACA,KACA,KACA,KACA,KACA;AACU;AACV,aACA,KACA,KACA,KACA,KACA,KACA,KACA;AACS;AACT,aACA,KACA,KACA,KACA,KACA,KACA,KAEH;AAEG,cACH,IAAgB,aAAU,WAC1B,IAAe,YAAS,UACxB,IAAgB,aAAS,UACzB,IAAgB,aAAK,MAGzB;AACD;;;;;;;;;;;;ACzSgC;AACK;AACtC,MAAQ,KAAO,wDAAU;AACzB,MAAQ,KAAO,wDAAU;AAEX;AAMZ,gBACiB,SACA,SACA,SACC,SACA,SACA;AAEZ,aAAQ,UAAG,CAAQ,SAAS,SAAW;AACvC,aAAS,WAAG,CAAQ,SAAS,SAAW;AACxC,aAAI,MAAG,CAAQ,SAAS,SAAW;AACnC,aAAO,SAAG,IAAc;AACxB,aACN;AAAC;AAEsB;AACN;AACX,gEAAI,IAAG,IAAG,GAAG,GAAK;AAClB,gEAAI,IAAG,IAAG,GAAG,GAAK;AAClB,gEAAS,SAAG,IAAM,KAAS,SAAG,GAAE,GAAM,KAAS,SAAG,GAAI;AACtD,gEAAS,SAAG,I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OAAO;AACP,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA,0CAA0C,mBAAmB,EAAE,wBAAwB,YAAY,EAAE;AACrG,KAAK;AACL;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,kBAAkB,YAAY;AAC9B;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;;AAEA;AACA,CAAC;;;;;;;ACvDD;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,mCAAmC;AACnC;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,iBAAiB,OAAO;AACxB;AACA;;AAEA;AACA;;AAEA;;;;;;;ACnGA;AACA;AACA;AACA;AACA;;AAEA,8CAA8C;AAC9C;AACA;AACA,iCAAiC;AACjC;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,QAAQ;AAC9B;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;;;;;;;AChCA;;AAEA;AACA;AACA;AACA,CAAC;;AAED;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;;AAEA;AACA;AACA,4CAA4C;;AAE5C;;;;;;;ACpBA;AACA;AACA;AACA;AACA;AACA,eAAe,SAAS;AACxB;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;;;;;;ACnBG;;;;AAEH,IAAiB;AACjB,IAAoB;AACpB,MAAc,WAAS,OAAY,eAAS;AAE9B;AAOZ,gBAAqB,YAAQ;AACvB,aAAU,YAAK;AACf,aAAQ,UAAK;AACb,aAAY,cAAK;AACjB,aAAU,YAChB;AAAC;AAEW;AACN,aAAU,YAAW,SAAO;AAC5B,aAAQ,UAAO,KAAW;AAC1B,aAAY,cAAK;AACjB,aAAU,YAChB;AAAC;AAEU;AACL,aAAkB;AAClB,aAAU,YAChB;AAAC;AAEoB;AACf,aAAY;AACV,eAAK,KACb;AAAC;AAEc;AACT,eAAK;AACN,YAAK,KAAU,aAAI,CAAK,KAAW,WAAE;AAClC,iBACN;AAAC;AAEE,YAAK,KAAW,WAAE;AACZ,sBAAW,SAAO;AAErB,mBAAG,CAAQ,UAAO,KAAS,WAAQ;AACnC,iBAAQ,UAAW;AAEnB,iBAAY,eAClB;AAAC;AAEK,eACR;AACD;;;;;;;;;ACzDD;AACA;;AAEA;;AAEA;AACA;AACA,GAAG;AACH;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,OAAO;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA,mBAAmB,kBAAkB;AACrC;AACA;AACA;;AAEA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA,OAAO;AACP;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iDAAiD,YAAY;AAC7D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,OAAO;AACpB;AACA,aAAa,SAAS;AACtB;AACA,aAAa,OAAO,uKAAuK;AAC3L;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,aAAa,sBAAsB;AACnC,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA,oDAAoD;AACpD;AACA;AACA;AACA,oDAAoD;AACpD;AACA;AACA;AACA,oDAAoD;AACpD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;;;;;;;;;;;;ACrXqC;AACA;AACA;AAEtC,MAAe,YAAe;AAC9B,MAAc,WAAc;AA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","file":"ixviii.medium.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"ixviii.medium\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"ixviii.medium\"] = factory();\n\telse\n\t\troot[\"ixviii.medium\"] = factory();\n})(this, function() {\nreturn \n\n\n// WEBPACK FOOTER //\n// webpack/universalModuleDefinition"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 47);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap 6d47b00935acd78b8a21","import { WEBGL2_CONTEXT } from './Constants';\n\nlet gl: WebGL2RenderingContext | WebGLRenderingContext;\nlet contextType: string;\nlet webgl2: boolean;\n\n/*\n\tSet the gl instance\n\tThis is set from the renderer\n*/\nexport function set(\n  _gl: WebGL2RenderingContext | WebGLRenderingContext,\n  _contextType: string\n) {\n  gl = _gl;\n  contextType = _contextType;\n  webgl2 = contextType === WEBGL2_CONTEXT;\n}\n\n/*\n\tGet the gl instance\n*/\nexport function get(): WebGL2RenderingContext | WebGLRenderingContext {\n  return gl;\n}\n\n/**\n\t* createBuffer\n\t* @return {Buffer}\n\t*/\nfunction createBuffer(\n  type: GLenum,\n  data: Float32Array | Uint16Array,\n  isDynamic: boolean = false\n) {\n  const buffer = gl.createBuffer();\n  const usage = isDynamic ? gl.DYNAMIC_DRAW : gl.STATIC_DRAW;\n  const ArrayView = type === gl.ARRAY_BUFFER ? Float32Array : Uint16Array;\n  gl.bindBuffer(type, buffer);\n  // https://github.com/nkemnitz/webgl2-ts/blob/master/WebGL2/webgl2-context.d.ts#L276\n  if (gl instanceof WebGL2RenderingContext) {\n    gl.bufferData(type, new ArrayView(data), usage, 0);\n  } else {\n    gl.bufferData(type, new ArrayView(data), usage);\n  }\n  gl.bindBuffer(type, null);\n  return buffer;\n}\n\n/**\n\t* createUniformBuffer\n\t* @return {Buffer}\n\t*/\nfunction createUniformBuffer(data: Float32Array) {\n  const buffer = gl.createBuffer();\n  if (gl instanceof WebGL2RenderingContext) {\n    gl.bindBuffer(gl.UNIFORM_BUFFER, buffer);\n    gl.bufferData(gl.UNIFORM_BUFFER, new Float32Array(data), gl.DYNAMIC_DRAW);\n    gl.bindBuffer(gl.UNIFORM_BUFFER, null);\n    return buffer;\n  } else {\n    return false;\n  }\n}\n\nexport { webgl2, createBuffer, createUniformBuffer };\n\n\n\n// WEBPACK FOOTER //\n// ./src/core/GL.ts","import * as glMatrix from \"./gl-matrix/common.js\";\nimport * as mat2 from \"./gl-matrix/mat2.js\";\nimport * as mat2d from \"./gl-matrix/mat2d.js\";\nimport * as mat3 from \"./gl-matrix/mat3.js\";\nimport * as mat4 from \"./gl-matrix/mat4.js\";\nimport * as quat from \"./gl-matrix/quat.js\";\nimport * as quat2 from \"./gl-matrix/quat2.js\";\nimport * as vec2 from \"./gl-matrix/vec2.js\";\nimport * as vec3 from \"./gl-matrix/vec3.js\";\nimport * as vec4 from \"./gl-matrix/vec4.js\";\n\nexport {\n  glMatrix,\n  mat2, mat2d, mat3, mat4,\n  quat, quat2,\n  vec2, vec3, vec4,\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/gl-matrix/src/gl-matrix.js\n// module id = 1\n// module chunks = 0","import { vec3 } from 'gl-matrix';\n\nexport default class Vector3 {\n  public static up = new Vector3(0, 1, 0);\n  public v: vec3;\n  constructor(x = 0, y = 0, z = 0) {\n    this.v = vec3.create();\n    this.set(x, y, z);\n    return this;\n  }\n  set x(value: number) {\n    this.v[0] = value;\n  }\n  get x() {\n    return this.v[0];\n  }\n  set y(value: number) {\n    this.v[1] = value;\n  }\n  get y() {\n    return this.v[1];\n  }\n  set z(value: number) {\n    this.v[2] = value;\n  }\n  get z() {\n    return this.v[2];\n  }\n  public set(x: number, y: number, z: number) {\n    vec3.set(this.v, x, y, z);\n    return this;\n  }\n  public clone() {\n    return new Vector3(this.v[0], this.v[1], this.v[2]);\n  }\n  public copy(vector3: Vector3) {\n    vec3.copy(this.v, vector3.v);\n    return this;\n  }\n  public add(vector3: Vector3) {\n    vec3.add(this.v, this.v, vector3.v);\n    return this;\n  }\n  public subtract(vector3: Vector3) {\n    vec3.subtract(this.v, this.v, vector3.v);\n    return this;\n  }\n  public subtractVectors(vector0: Vector3, vector1: Vector3) {\n    const out = vec3.create();\n    vec3.subtract(out, vector0.v, vector1.v);\n    return out;\n  }\n  public scale(value: number) {\n    vec3.scale(this.v, this.v, value);\n    return this;\n  }\n  public distance(vector3: Vector3) {\n    return vec3.distance(this.v, vector3.v);\n  }\n  public length(): number {\n    return vec3.length(this.v);\n  }\n  public negate() {\n    vec3.negate(this.v, this.v);\n    return this;\n  }\n  public normalize() {\n    vec3.normalize(this.v, this.v);\n    return this;\n  }\n  public dot(vector3: Vector3): number {\n    return vec3.dot(this.v, vector3.v);\n  }\n  public cross(vector3: Vector3) {\n    vec3.cross(this.v, this.v, vector3.v);\n    return this;\n  }\n  public crossVectors(vector0: Vector3, vector1: Vector3) {\n    const out = vec3.create();\n    vec3.cross(out, vector0.v, vector1.v);\n    return out;\n  }\n  public lerp(vector3: Vector3, value: number) {\n    vec3.lerp(this.v, this.v, vector3.v, value);\n    return this;\n  }\n  public equals(vector3: Vector3): boolean {\n    return vec3.equals(this.v, vector3.v);\n  }\n  public multiply(vector3: Vector3) {\n    this.v[0] *= vector3.v[0];\n    this.v[1] *= vector3.v[1];\n    this.v[2] *= vector3.v[2];\n    return this;\n  }\n  public fromArray(values: number[]) {\n    return vec3.copy(this.v, values);\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/math/Vector3.ts","// Contexts\nexport const WEBGL_CONTEXT: string = 'webgl';\nexport const WEBGL2_CONTEXT: string = 'webgl2';\n\n// Default ratio\nexport const RENDERER_DEFAULT_CONTEXT: string = WEBGL2_CONTEXT;\nexport const RENDERER_DEFAULT_WIDTH: number = 1280;\nexport const RENDERER_DEFAULT_HEIGHT: number = 720;\nexport const RENDERER_DEFAULT_RATIO: number =\n  RENDERER_DEFAULT_WIDTH / RENDERER_DEFAULT_HEIGHT;\n\n// Precision\nexport const PRECISION: string = 'highp';\n\n// Culling\nexport const CULL_NONE: number = -1;\nexport const CULL_BACK: number = 0x0405;\nexport const CULL_FRONT: number = 0x0404;\nexport const CULL_FRONT_AND_BACK: number = 0x0408;\n\n// Draw style\nexport const DRAW_POINTS: number = 0;\nexport const DRAW_LINES: number = 1;\nexport const DRAW_LINE_LOOP: number = 2;\nexport const DRAW_LINE_STRIP: number = 3;\nexport const DRAW_TRIANGLES: number = 4;\n\n// Uniform buffer location indices\nexport const UNIFORM_PROJECTION_VIEW_LOCATION: number = 0;\nexport const UNIFORM_AMBIENT_LIGHT_LOCATION: number = 1;\nexport const UNIFORM_DIRECTIONAL_LIGHTS_LOCATION: number = 2;\nexport const UNIFORM_POINT_LIGHTS_LOCATION: number = 3;\n\n// Material types\nexport const MATERIAL_BASIC = 'basic';\nexport const MATERIAL_LAMBERT = 'lambert';\nexport const MATERIAL_PHONG = 'phong';\n\nexport const LIGHT_AMBIENT = 'ambient';\nexport const LIGHT_DIRECTIONAL = 'directional';\nexport const LIGHT_POINT = 'point';\n\n\n\n// WEBPACK FOOTER //\n// ./src/core/Constants.ts","// Es300\nexport default '#version 300 es';\n\n\n\n// WEBPACK FOOTER //\n// ./src/shaders/chunks/EsVersion.glsl.ts","import { warn } from '../utils/Console';\nimport { PRECISION } from './Constants';\nimport * as GL from './GL';\n\n/*\n\t* https://github.com/mrdoob/three.js/blob/dev/src/renderers/webgl/WebGLCapabilities.js\n\t*/\n\nfunction getMaxPrecision(\n  gl: WebGL2RenderingContext | WebGLRenderingContext,\n  precision: string\n) {\n  if (precision === 'highp') {\n    if (\n      gl.getShaderPrecisionFormat(gl.VERTEX_SHADER, gl.HIGH_FLOAT).precision >\n        0 &&\n      gl.getShaderPrecisionFormat(gl.FRAGMENT_SHADER, gl.HIGH_FLOAT).precision >\n        0\n    ) {\n      return 'highp';\n    }\n    precision = 'mediump';\n  }\n\n  if (precision === 'mediump') {\n    if (\n      gl.getShaderPrecisionFormat(gl.VERTEX_SHADER, gl.MEDIUM_FLOAT).precision >\n        0 &&\n      gl.getShaderPrecisionFormat(gl.FRAGMENT_SHADER, gl.MEDIUM_FLOAT)\n        .precision > 0\n    ) {\n      return 'mediump';\n    }\n  }\n  return 'lowp';\n}\n\nfunction Capabilities(gl: WebGL2RenderingContext | WebGLRenderingContext) {\n  let precision = PRECISION;\n  const maxPrecision = getMaxPrecision(gl, precision);\n\n  if (maxPrecision !== precision) {\n    warn(\n      'Capabilities:',\n      precision,\n      'not supported, using',\n      maxPrecision,\n      'instead.'\n    );\n    precision = maxPrecision;\n  }\n\n  const maxTextures: number = gl.getParameter(gl.MAX_TEXTURE_IMAGE_UNITS);\n  const maxVertexTextures: number = gl.getParameter(\n    gl.MAX_VERTEX_TEXTURE_IMAGE_UNITS\n  );\n  const maxTextureSize: number = gl.getParameter(gl.MAX_TEXTURE_SIZE);\n  const maxCubemapSize: number = gl.getParameter(gl.MAX_CUBE_MAP_TEXTURE_SIZE);\n\n  const maxAttributes: number = gl.getParameter(gl.MAX_VERTEX_ATTRIBS);\n  const maxVertexUniforms: number = gl.getParameter(\n    gl.MAX_VERTEX_UNIFORM_VECTORS\n  );\n  const maxVaryings: number = gl.getParameter(gl.MAX_VARYING_VECTORS);\n  const maxFragmentUniforms: number = gl.getParameter(\n    gl.MAX_FRAGMENT_UNIFORM_VECTORS\n  );\n\n  return {\n    maxAttributes,\n    maxCubemapSize,\n    maxFragmentUniforms,\n    maxPrecision,\n    maxTextures,\n    maxTextureSize,\n    maxVertexTextures,\n    maxVertexUniforms,\n    maxVaryings,\n    precision\n  };\n}\n\nfunction Extensions(gl: WebGL2RenderingContext | WebGLRenderingContext) {\n  const vertexArrayObject =\n    GL.webgl2 || gl.getExtension('OES_vertex_array_object') || false;\n  const angleInstancedArrays =\n    gl.getExtension('ANGLE_instanced_arrays') || false;\n  const textureFloat = gl.getExtension('OES_texture_float') || false;\n\n  return {\n    angleInstancedArrays,\n    textureFloat,\n    vertexArrayObject\n  };\n}\n\nlet capabilities: any = {};\nlet extensions: any = {};\n\n/*\n\tSet the capabilities once\n*/\nexport function set(gl: WebGL2RenderingContext | WebGLRenderingContext) {\n  capabilities = Capabilities(gl);\n  extensions = Extensions(gl);\n}\n\n/*\n\tGet capabilities\n*/\nexport { capabilities, extensions };\n\n\n\n// WEBPACK FOOTER //\n// ./src/core/Capabilities.ts","/**\n * Common utilities\n * @module glMatrix\n */\n\n// Configuration Constants\nexport const EPSILON = 0.000001;\nexport let ARRAY_TYPE = (typeof Float32Array !== 'undefined') ? Float32Array : Array;\nexport const RANDOM = Math.random;\n\n/**\n * Sets the type of array used when creating new vectors and matrices\n *\n * @param {Type} type Array type, such as Float32Array or Array\n */\nexport function setMatrixArrayType(type) {\n  ARRAY_TYPE = type;\n}\n\nconst degree = Math.PI / 180;\n\n/**\n * Convert Degree To Radian\n *\n * @param {Number} a Angle in Degrees\n */\nexport function toRadian(a) {\n  return a * degree;\n}\n\n/**\n * Tests whether or not the arguments have approximately the same value, within an absolute\n * or relative tolerance of glMatrix.EPSILON (an absolute tolerance is used for values less\n * than or equal to 1.0, and a relative tolerance is used for larger values)\n *\n * @param {Number} a The first number to test.\n * @param {Number} b The second number to test.\n * @returns {Boolean} True if the numbers are approximately equal, false otherwise.\n */\nexport function equals(a, b) {\n  return Math.abs(a - b) <= EPSILON*Math.max(1.0, Math.abs(a), Math.abs(b));\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/gl-matrix/src/gl-matrix/common.js\n// module id = 6\n// module chunks = 0","import * as GL from '../core/GL';\nimport Vector2 from '../math/Vector2';\nimport Vector3 from '../math/Vector3';\nimport { flatten } from '../utils/Array';\nimport BufferAttribute from './BufferAttribute';\nimport Face from './Face';\n\nlet gl: WebGL2RenderingContext | WebGLRenderingContext;\n\nexport default class Geometry {\n  public bufferVertices: Float32Array;\n  public bufferIndices: Uint16Array;\n  public bufferNormals: Float32Array;\n  public bufferUvs: Float32Array;\n  public bufferColors: Float32Array;\n  public attributes: any;\n  public attributesInstanced: any;\n  public vertices: Vector3[];\n  public faces: Face[];\n  public uvs: Vector2[];\n\n  constructor(\n    vertices: Float32Array,\n    indices?: any, // Uint16Array | Uint32Array, (typings are wrong for createBuffer)\n    normals?: Float32Array,\n    uvs?: Float32Array,\n    colors?: Float32Array\n  ) {\n    gl = GL.get();\n    this.bufferVertices = vertices;\n    this.bufferIndices = indices;\n    this.bufferNormals = normals;\n    this.bufferUvs = uvs;\n    this.bufferColors = colors;\n    this.attributes = {};\n    this.attributesInstanced = {};\n\n    // Vertex positions\n    if (this.bufferVertices) {\n      this.addAttribute(\n        'aVertexPosition',\n        gl.ARRAY_BUFFER,\n        this.bufferVertices,\n        3\n      );\n      this.generateVertices();\n    }\n\n    // Vertex indices\n    if (this.bufferIndices) {\n      this.addAttribute(\n        'aIndex',\n        gl.ELEMENT_ARRAY_BUFFER,\n        this.bufferIndices,\n        1,\n        false\n      );\n      this.generateFaces();\n    }\n\n    // Vertex normals\n    if (this.bufferNormals) {\n      this.addAttribute(\n        'aVertexNormal',\n        gl.ARRAY_BUFFER,\n        this.bufferNormals,\n        3\n      );\n    }\n\n    // uvs\n    if (this.bufferUvs) {\n      this.addAttribute('aUv', gl.ARRAY_BUFFER, this.bufferUvs, 2);\n      this.generateUvs();\n    }\n\n    // Vertex colors\n    if (this.bufferColors) {\n      this.addAttribute('aVertexColor', gl.ARRAY_BUFFER, this.bufferColors, 3);\n    }\n  }\n\n  public addAttribute(\n    name: string,\n    type: GLenum,\n    data: Float32Array | Uint16Array,\n    count: number,\n    shaderAttribute?: boolean\n  ) {\n    this.attributes[name] = new BufferAttribute(\n      type,\n      data,\n      count,\n      shaderAttribute\n    );\n  }\n\n  public addInstancedBufferAttribute(name, value, count) {\n    this.attributesInstanced[name] = new BufferAttribute(\n      gl.ARRAY_BUFFER,\n      value,\n      count\n    );\n  }\n\n  public generateVertices() {\n    this.vertices = [];\n    for (let i = 0; i < this.bufferVertices.length; i += 3) {\n      const a = this.bufferVertices[i];\n      const b = this.bufferVertices[i + 1];\n      const c = this.bufferVertices[i + 2];\n      const vertex = new Vector3(a, b, c);\n      this.vertices.push(vertex);\n    }\n  }\n\n  public generateFaces() {\n    this.faces = [];\n    for (let i = 0; i < this.bufferIndices.length; i += 3) {\n      const ia = this.bufferIndices[i];\n      const ib = this.bufferIndices[i + 1];\n      const ic = this.bufferIndices[i + 2];\n      const a = this.vertices[ia];\n      const b = this.vertices[ib];\n      const c = this.vertices[ic];\n      const face = new Face(ia, ib, ic, a, b, c);\n      this.faces.push(face);\n    }\n  }\n\n  public generateUvs() {\n    this.uvs = [];\n    for (let i = 0; i < this.bufferUvs.length; i += 2) {\n      const a = this.bufferUvs[i];\n      const b = this.bufferUvs[i + 1];\n\n      const uv = new Vector2(a, b);\n      this.uvs.push(uv);\n    }\n  }\n\n  public updateVertices() {\n    gl = GL.get();\n    this.vertices.forEach((vertex, i) => {\n      this.bufferVertices.set(vertex.v, i * vertex.v.length);\n    });\n    this.attributes.aVertexPosition.update(this.bufferVertices);\n  }\n\n  public updateNormals() {\n    const normals = [];\n    this.faces.forEach(face => {\n      face.updateFaceNormal();\n      normals[face.indices[0]] = face.normal.v;\n      normals[face.indices[1]] = face.normal.v;\n      normals[face.indices[2]] = face.normal.v;\n    });\n    this.bufferNormals.set(flatten(normals));\n    this.attributes.aVertexNormal.update(this.bufferNormals);\n  }\n\n  public dispose() {\n    gl = GL.get();\n    // Dispose attributes and buffers\n    Object.keys(this.attributes).forEach(attributeName => {\n      this.attributes[attributeName].dispose(gl);\n      delete this.attributes[attributeName];\n    });\n    Object.keys(this.attributesInstanced).forEach(attributeName => {\n      this.attributesInstanced[attributeName].dispose(gl);\n      delete this.attributesInstanced[attributeName];\n    });\n    delete this.attributes;\n    delete this.attributesInstanced;\n    this.bufferVertices = null;\n    this.bufferIndices = null;\n    this.bufferNormals = null;\n    this.bufferUvs = null;\n    this.bufferColors = null;\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/geometry/Geometry.ts","import { mat4, quat, vec3 } from 'gl-matrix';\nimport Vector2 from '../math/Vector2';\nimport Vector3 from '../math/Vector3';\n\nexport function degToRad(degrees: number) {\n  return degrees * (Math.PI / 180);\n}\n\nexport function radToDeg(radians: number) {\n  return radians * (180 / Math.PI);\n}\n\nexport function clamp(value: number, min: number, max: number) {\n  return Math.max(Math.min(value, max), min);\n}\n\nexport function lerp(min: number, max: number, alpha: number) {\n  return min + (max - min) * alpha;\n}\n\nexport function barycoordFromPoint(point: vec3, a: vec3, b: vec3, c: vec3) {\n  const v0 = vec3.create();\n  const v1 = vec3.create();\n  const v2 = vec3.create();\n\n  vec3.sub(v0, c, a);\n  vec3.sub(v1, b, a);\n  vec3.sub(v2, point, a);\n\n  const dot00 = vec3.dot(v0, v0);\n  const dot01 = vec3.dot(v0, v1);\n  const dot02 = vec3.dot(v0, v2);\n  const dot11 = vec3.dot(v1, v1);\n  const dot12 = vec3.dot(v1, v2);\n\n  const denom = dot00 * dot11 - dot01 * dot01;\n\n  const result = new Vector3();\n\n  // collinear or singular triangle\n  if (denom === 0) {\n    // arbitrary location outside of triangle?\n    // not sure if this is the best idea, maybe should be returning undefined\n    return result.set(-2, -1, -1);\n  }\n\n  const invDenom = 1 / denom;\n  const u = (dot11 * dot02 - dot01 * dot12) * invDenom;\n  const v = (dot00 * dot12 - dot01 * dot02) * invDenom;\n\n  // barycentric coordinates must always sum to 1\n  return result.set(1 - u - v, v, u);\n}\n\n/*\nhttp://stackoverflow.com/questions/5531827/random-point-on-a-given-sphere\n\t*/\nexport function randomSpherePoint(\n  x0: number,\n  y0: number,\n  z0: number,\n  radius: number\n) {\n  const u = Math.random();\n  const v = Math.random();\n  const theta = 2 * Math.PI * u;\n  const phi = Math.acos(2 * v - 1);\n  const x = x0 + radius * Math.sin(phi) * Math.cos(theta);\n  const y = y0 + radius * Math.sin(phi) * Math.sin(theta);\n  const z = z0 + radius * Math.cos(phi);\n  return [x, y, z];\n}\n\n// https://github.com/hughsk/from-3d-to-2d/blob/master/index.js\nexport function from3DTo2D(position: Vector3, pVMatrix: mat4) {\n  const ix = position.x;\n  const iy = position.y;\n  const iz = position.z;\n\n  const ox =\n    pVMatrix[0] * ix + pVMatrix[4] * iy + pVMatrix[8] * iz + pVMatrix[12];\n  const oy =\n    pVMatrix[1] * ix + pVMatrix[5] * iy + pVMatrix[9] * iz + pVMatrix[13];\n  const ow =\n    pVMatrix[3] * ix + pVMatrix[7] * iy + pVMatrix[11] * iz + pVMatrix[15];\n\n  const screenPosition = new Vector2();\n  screenPosition.x = (ox / ow + 1) / 2;\n  screenPosition.y = 1 - (oy / ow + 1) / 2;\n\n  return screenPosition;\n}\n\n// https://github.com/mrdoob/three.js/blob/master/src/math/Matrix4.js#L324\nexport function lookAt(eye: vec3, target: vec3, up: vec3) {\n  const quatOut = quat.create();\n  const x = vec3.create();\n  const y = vec3.create();\n  const z = vec3.create();\n\n  vec3.sub(z, eye, target);\n\n  if (vec3.squaredLength(z) === 0) {\n    // eye and target are in the same position\n    z[2] = 1;\n  }\n\n  vec3.normalize(z, z);\n  vec3.cross(x, up, z);\n\n  if (vec3.squaredLength(x) === 0) {\n    // eye and target are in the same vertical\n    z[2] += 0.0001;\n    vec3.cross(x, up, z);\n  }\n\n  vec3.normalize(x, x);\n  vec3.cross(y, z, x);\n\n  quat.setAxes(quatOut, z, x, y);\n  quat.invert(quatOut, quatOut);\n\n  return quatOut;\n}\n\n// https://developer.mozilla.org/en-US/docs/Web/API/WebGL_API/Tutorial/Using_textures_in_WebGL\nexport function isPowerOf2(value) {\n  return (value & (value - 1)) === 0;\n}\n\n// https://bocoup.com/blog/find-the-closest-power-of-2-with-javascript\nexport function nearestPowerOf2(size) {\n  return Math.pow(2, Math.round(Math.log(size) / Math.log(2)));\n}\n\nexport function addLineNumbers(text: string) {\n  let result = '';\n  text.split('\\n').forEach((line: string, index: number) => {\n    result += `${index < 10 ? `0${index}` : index}| ${line}\\n`;\n  });\n  return result;\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/math/Utils.ts","import { mat4 } from 'gl-matrix';\nimport Camera from '../cameras/Camera';\nimport OrthographicCamera from '../cameras/OrthographicCamera';\nimport PerspectiveCamera from '../cameras/PerspectiveCamera';\nimport Geometry from '../geometry/Geometry';\nimport Sphere from '../math/Sphere';\nimport { extensions } from './Capabilities';\nimport * as GL from './GL';\nimport Material from './Material';\nimport Object3D from './Object3D';\nimport Vao from './Vao';\n\nlet gl: WebGL2RenderingContext | WebGLRenderingContext;\n\nexport default class Mesh extends Object3D {\n  public geometry: Geometry;\n  public material: Material;\n  public vao: Vao;\n  public visible: boolean;\n  public instanceCount: number;\n  public isInstanced: boolean;\n  public boundingSphere: Sphere;\n\n  constructor(geometry: Geometry, material: Material) {\n    super();\n    this.geometry = geometry;\n    this.material = material;\n    this.vao = new Vao();\n    this.visible = true;\n    this.instanceCount = 0;\n    // Allow meshes to share shaders and programs\n    if (!this.material.program.created) {\n      this.material.create(this.geometry);\n    }\n    this.isInstanced = false;\n\n    gl = GL.get();\n\n    // Setup vao\n    this.vao.bind();\n    this.bindAttributes();\n    this.bindAttributesInstanced();\n    this.bindIndexBuffer();\n    this.vao.unbind();\n  }\n\n  public setInstanceCount(value: number) {\n    gl = GL.get();\n    this.instanceCount = value;\n    this.isInstanced = true;\n  }\n\n  public bindAttributes() {\n    // Attributes\n    Object.keys(this.geometry.attributes).forEach(attributeName => {\n      if (attributeName !== 'aIndex') {\n        // enableVertexAttribArray\n        this.material.program.setAttributeLocation(attributeName);\n        // Bind buffer\n        this.geometry.attributes[attributeName].bind();\n        // vertexAttribPointer\n        this.material.program.setAttributePointer(\n          attributeName,\n          this.geometry.attributes[attributeName].itemSize\n        );\n      }\n    });\n  }\n\n  public bindAttributesInstanced() {\n    // Instanced Attributes\n    Object.keys(this.geometry.attributesInstanced).forEach(attributeName => {\n      if (attributeName !== 'aIndex') {\n        // enableVertexAttribArray\n        this.material.program.setAttributeLocation(attributeName);\n        // Bind buffer\n        this.geometry.attributesInstanced[attributeName].bind();\n        // vertexAttribPointer\n        this.material.program.setAttributeInstancedPointer(\n          attributeName,\n          this.geometry.attributesInstanced[attributeName].itemSize\n        );\n        if (gl instanceof WebGL2RenderingContext) {\n          gl.vertexAttribDivisor(\n            this.material.program.attributeLocations[attributeName],\n            1\n          );\n        } else {\n          extensions.angleInstancedArrays.vertexAttribDivisorANGLE(\n            this.material.program.attributeLocations[attributeName],\n            1\n          );\n        }\n      }\n    });\n  }\n\n  public bindIndexBuffer() {\n    // Bind index buffer\n    if (this.geometry.bufferIndices) {\n      this.geometry.attributes.aIndex.bind();\n    }\n  }\n\n  public draw(camera: Camera | PerspectiveCamera | OrthographicCamera) {\n    if (!this.visible) return;\n    if (!this.material.program.created) return;\n\n    gl = GL.get();\n\n    // Update modelMatrix\n    this.updateMatrix(camera);\n\n    this.material.program.bind();\n\n    // Culling enable\n    if (this.material.culling !== -1) {\n      gl.enable(gl.CULL_FACE);\n      gl.cullFace(this.material.culling);\n    }\n\n    this.material.setUniforms(\n      camera.projectionMatrix,\n      this.modelViewMatrix,\n      this.modelMatrix,\n      camera\n    );\n\n    if (extensions.vertexArrayObject) {\n      this.vao.bind();\n    } else {\n      this.bindAttributes();\n      this.bindAttributesInstanced();\n      this.bindIndexBuffer();\n    }\n\n    if (this.geometry.attributes.aIndex) {\n      gl.drawElements(\n        this.material.drawType,\n        this.geometry.attributes.aIndex.numItems,\n        gl.UNSIGNED_SHORT,\n        0\n      );\n    } else {\n      gl.drawArrays(\n        this.material.drawType,\n        0,\n        this.geometry.attributes.aVertexPosition.numItems\n      );\n    }\n\n    if (extensions.vertexArrayObject) {\n      this.vao.unbind();\n    }\n\n    // Culling disable\n    if (this.material.culling !== -1) {\n      gl.disable(gl.CULL_FACE);\n    }\n  }\n\n  public drawInstance(camera: Camera | PerspectiveCamera | OrthographicCamera) {\n    if (!this.visible) return;\n    if (!this.material.program.created) return;\n\n    gl = GL.get();\n\n    // Update modelMatrix\n    this.updateMatrix(camera);\n\n    this.material.program.bind();\n    this.material.setUniforms(\n      camera.projectionMatrix,\n      this.modelViewMatrix,\n      this.modelMatrix,\n      camera\n    );\n\n    // Culling enable\n    if (this.material.culling !== -1) {\n      gl.enable(gl.CULL_FACE);\n      gl.cullFace(this.material.culling);\n    }\n\n    // Blending enable\n    if (this.material.blending) {\n      gl.enable(gl.BLEND);\n      gl.blendFunc(this.material.blendFunc[0], this.material.blendFunc[1]);\n    }\n\n    if (extensions.vertexArrayObject) {\n      this.vao.bind();\n    } else {\n      this.bindAttributes();\n      this.bindAttributesInstanced();\n      this.bindIndexBuffer();\n    }\n\n    if (gl instanceof WebGL2RenderingContext) {\n      gl.drawElementsInstanced(\n        this.material.drawType,\n        this.geometry.attributes.aIndex.numItems,\n        gl.UNSIGNED_SHORT,\n        0,\n        this.instanceCount\n      );\n    } else {\n      extensions.angleInstancedArrays.drawElementsInstancedANGLE(\n        this.material.drawType,\n        this.geometry.attributes.aIndex.numItems,\n        gl.UNSIGNED_SHORT,\n        0,\n        this.instanceCount\n      );\n    }\n\n    if (extensions.vertexArrayObject) {\n      this.vao.unbind();\n    }\n\n    // Culling disable\n    if (this.material.culling !== -1) {\n      gl.disable(gl.CULL_FACE);\n    }\n\n    // Disable blending\n    if (this.material.blending) {\n      gl.disable(gl.BLEND);\n    }\n  }\n\n  public computeBoundingSphere() {\n    this.boundingSphere = new Sphere();\n    let maxDistance = 0;\n    let distance;\n    this.geometry.vertices.forEach(vertex => {\n      distance = vertex.distance(this.boundingSphere.center);\n      if (distance > maxDistance) {\n        maxDistance = distance;\n      }\n    });\n    this.boundingSphere.radius = maxDistance;\n  }\n\n  public dispose() {\n    this.material.dispose();\n    this.geometry.dispose();\n    this.vao.dispose();\n    this.geometry = null;\n    this.material = null;\n    super.dispose();\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/core/Mesh.ts","import { mat3, mat4 } from 'gl-matrix';\nimport OrthographicCamera from '../cameras/OrthographicCamera';\nimport PerspectiveCamera from '../cameras/PerspectiveCamera';\nimport Geometry from '../geometry/Geometry';\nimport Lights from '../lights/Lights';\nimport Color from '../math/Color';\nimport {\n  basicFragmentShaderEs100,\n  basicFragmentShaderEs300\n} from '../shaders/Basic.glsl';\nimport {\n  lambertFragmentShaderEs100,\n  lambertFragmentShaderEs300\n} from '../shaders/Lambert.glsl';\nimport {\n  phongFragmentShaderEs100,\n  phongFragmentShaderEs300\n} from '../shaders/Phong.glsl';\nimport { vertexShaderEs100, vertexShaderEs300 } from '../shaders/Vertex.glsl';\nimport ShaderParser from '../utils/ShaderParser';\nimport { capabilities } from './Capabilities';\nimport * as CONSTANTS from './Constants';\nimport * as GL from './GL';\nimport Program from './Program';\nimport UniformBuffers from './UniformBuffers';\n\nlet gl: WebGL2RenderingContext | WebGLRenderingContext;\nconst normalMatrix: mat3 = mat3.create();\nconst inversedModelViewMatrix: mat4 = mat4.create();\n\ninterface Options {\n  name?: string;\n  type?: string;\n  uniforms?: any;\n  fov?: number;\n  hookVertexPre?: string;\n  hookVertexMain?: string;\n  hookVertexEnd?: string;\n  hookFragmentPre?: string;\n  hookFragmentMain?: string;\n  hookFragmentEnd?: string;\n  vertexShader?: string;\n  fragmentShader?: string;\n  drawType?: number;\n  ambientLight?: Lights;\n  directionalLights?: Lights;\n  pointLights?: Lights;\n  culling?: number;\n}\n\nexport default class Material {\n  public name: string;\n  public type: string;\n  public uniforms: any;\n  public fov: number;\n  public hookVertexPre: string;\n  public hookVertexMain: string;\n  public hookVertexEnd: string;\n  public hookFragmentPre: string;\n  public hookFragmentMain: string;\n  public hookFragmentEnd: string;\n  public vertexShader: string;\n  public fragmentShader: string;\n  public drawType: number;\n  public ambientLight: Lights;\n  public directionalLights: Lights;\n  public pointLights: Lights;\n  public culling: number;\n  public blending: boolean;\n  public blendFunc: number[];\n  public program: Program;\n  public customUniforms: object;\n\n  constructor(options: Options = {}) {\n    const vertexShader = GL.webgl2 ? vertexShaderEs300 : vertexShaderEs100;\n    let fragmentShader;\n\n    switch (options.type || '') {\n      case CONSTANTS.MATERIAL_LAMBERT: {\n        fragmentShader = GL.webgl2\n          ? lambertFragmentShaderEs300\n          : lambertFragmentShaderEs100;\n        break;\n      }\n      case CONSTANTS.MATERIAL_PHONG: {\n        fragmentShader = GL.webgl2\n          ? phongFragmentShaderEs300\n          : phongFragmentShaderEs100;\n        break;\n      }\n      default: {\n        fragmentShader = GL.webgl2\n          ? basicFragmentShaderEs300\n          : basicFragmentShaderEs100;\n      }\n    }\n\n    gl = GL.get();\n\n    this.name = '';\n    this.type = CONSTANTS.MATERIAL_BASIC;\n    this.uniforms = {};\n    this.hookVertexPre = '';\n    this.hookVertexMain = '';\n    this.hookVertexEnd = '';\n    this.hookFragmentPre = '';\n    this.hookFragmentMain = '';\n    this.hookFragmentEnd = '';\n    this.vertexShader = vertexShader;\n    this.fragmentShader = fragmentShader;\n    this.drawType = CONSTANTS.DRAW_TRIANGLES;\n    this.directionalLights = undefined;\n    this.pointLights = undefined;\n    this.culling = CONSTANTS.CULL_NONE;\n    this.blending = false;\n    this.blendFunc = [gl.SRC_ALPHA, gl.ONE];\n    Object.assign(this, options);\n    this.program = new Program();\n  }\n\n  public create(geometry: Geometry, transformFeedbackVaryings?: string[]) {\n    gl = GL.get();\n\n    this.vertexShader = this._processShader(\n      this.vertexShader,\n      'vertex',\n      geometry\n    );\n    this.fragmentShader = this._processShader(\n      this.fragmentShader,\n      'fragment',\n      geometry\n    );\n\n    this.program.link(\n      this.vertexShader,\n      this.fragmentShader,\n      transformFeedbackVaryings\n    );\n\n    // User defined uniforms\n    this.customUniforms = this.uniforms || {};\n\n    // Uniforms for ProjectionView uniform block\n    if (GL.webgl2) {\n      this.program.setUniformBlockLocation(\n        'ProjectionView',\n        UniformBuffers.projectionView.buffer,\n        CONSTANTS.UNIFORM_PROJECTION_VIEW_LOCATION\n      );\n    }\n\n    if (this.ambientLight) {\n      if (GL.webgl2) {\n        // Setup uniform block for point lights\n        this.program.setUniformBlockLocation(\n          'AmbientLight',\n          this.ambientLight.uniformBuffer.buffer,\n          CONSTANTS.UNIFORM_AMBIENT_LIGHT_LOCATION\n        );\n      } else {\n        // Generate uniforms for point lights\n        this.ambientLight.get().forEach((ambientLight, i) => {\n          Object.keys(ambientLight.uniforms).forEach(ambientLightUniform => {\n            const uniform = ambientLight.uniforms[ambientLightUniform];\n            this.customUniforms[\n              `uAmbientLight.${ambientLightUniform}`\n            ] = uniform;\n          });\n        });\n      }\n    }\n\n    if (this.directionalLights) {\n      if (GL.webgl2) {\n        // Setup uniform block for directional lights\n        this.program.setUniformBlockLocation(\n          'DirectionalLights',\n          this.directionalLights.uniformBuffer.buffer,\n          CONSTANTS.UNIFORM_DIRECTIONAL_LIGHTS_LOCATION\n        );\n      } else {\n        // Generate uniforms for directional lights\n        this.directionalLights.get().forEach((directionalLight, i) => {\n          Object.keys(\n            directionalLight.uniforms\n          ).forEach(directionalLightUniform => {\n            const uniform = directionalLight.uniforms[directionalLightUniform];\n            this.customUniforms[\n              `uDirectionalLights[${i}].${directionalLightUniform}`\n            ] = uniform;\n          });\n        });\n      }\n    }\n\n    if (this.pointLights) {\n      if (GL.webgl2) {\n        // Setup uniform block for point lights\n        this.program.setUniformBlockLocation(\n          'PointLights',\n          this.pointLights.uniformBuffer.buffer,\n          CONSTANTS.UNIFORM_POINT_LIGHTS_LOCATION\n        );\n      } else {\n        // Generate uniforms for point lights\n        this.pointLights.get().forEach((pointLight, i) => {\n          Object.keys(pointLight.uniforms).forEach(pointLightUniform => {\n            const uniform = pointLight.uniforms[pointLightUniform];\n            this.customUniforms[\n              `uPointLights[${i}].${pointLightUniform}`\n            ] = uniform;\n          });\n        });\n      }\n    }\n\n    // Generate texture indices\n    const textureIndices = [\n      gl.TEXTURE0,\n      gl.TEXTURE1,\n      gl.TEXTURE2,\n      gl.TEXTURE3,\n      gl.TEXTURE4,\n      gl.TEXTURE5\n    ];\n    Object.keys(this.uniforms).forEach((uniformName, i) => {\n      switch (this.uniforms[uniformName].type) {\n        case 't':\n        case 'tc':\n        case 't3d': {\n          this.uniforms[uniformName].textureIndex = i;\n          this.uniforms[uniformName].activeTexture = textureIndices[i];\n          break;\n        }\n        default:\n      }\n    });\n\n    // Add Camera position uniform for point lights if it doesn\"t exist\n    if (this.uniforms.uCameraPosition === undefined && this.pointLights) {\n      this.uniforms.uCameraPosition = {\n        type: '3f',\n        value: [0, 0, 0]\n      };\n    }\n\n    // Only for webgl1\n    const projectionViewUniforms = GL.webgl2\n      ? {}\n      : {\n          uProjectionMatrix: {\n            location: null,\n            type: '4fv',\n            value: mat4.create()\n          }\n        };\n\n    // Default uniforms\n    this.uniforms = {\n      uDiffuse: {\n        location: null,\n        type: '3f',\n        value: new Color().v\n      },\n      uModelMatrix: {\n        location: null,\n        type: '4fv',\n        value: mat4.create()\n      },\n      uModelViewMatrix: {\n        location: null,\n        type: '4fv',\n        value: mat4.create()\n      },\n      uNormalMatrix: {\n        location: null,\n        type: '4fv',\n        value: mat4.create()\n      },\n      ...this.customUniforms,\n      ...projectionViewUniforms\n    };\n\n    Object.keys(this.uniforms).forEach(uniformName => {\n      this.program.setUniformLocation(this.uniforms, uniformName);\n    });\n  }\n\n  public _processShader(shader: string, type: string, geometry: Geometry) {\n    gl = GL.get();\n    let defines = '';\n\n    const precision = `precision ${capabilities.precision} float;`;\n\n    function addDefine(define) {\n      defines += `#define ${define} \\n`;\n    }\n\n    if (geometry.bufferUvs) {\n      addDefine('uv');\n    }\n\n    if (geometry.bufferColors) {\n      addDefine('vertexColors');\n    }\n\n    if (geometry.bufferNormals) {\n      addDefine('normals');\n    }\n\n    if (this.ambientLight) {\n      addDefine('ambientLight');\n    }\n\n    if (this.directionalLights) {\n      addDefine('directionalLights');\n    }\n\n    if (this.pointLights) {\n      addDefine('pointLights');\n    }\n\n    shader = shader.replace(/#HOOK_PRECISION/g, precision);\n    shader = shader.replace(/#HOOK_DEFINES/g, defines);\n    shader = shader.replace(/#HOOK_VERTEX_PRE/g, this.hookVertexPre);\n    shader = shader.replace(/#HOOK_VERTEX_MAIN/g, this.hookVertexMain);\n    shader = shader.replace(/#HOOK_VERTEX_END/g, this.hookVertexEnd);\n    shader = shader.replace(/#HOOK_FRAGMENT_PRE/g, this.hookFragmentPre);\n    shader = shader.replace(/#HOOK_FRAGMENT_MAIN/g, this.hookFragmentMain);\n    shader = shader.replace(/#HOOK_FRAGMENT_END/g, this.hookFragmentEnd);\n\n    if (this.pointLights) {\n      shader = shader.replace(\n        /#HOOK_POINT_LIGHTS/g,\n        String(this.pointLights.length)\n      );\n    }\n\n    if (this.directionalLights) {\n      shader = shader.replace(\n        /#HOOK_DIRECTIONAL_LIGHTS/g,\n        String(this.directionalLights.length)\n      );\n    }\n\n    return ShaderParser(shader, type);\n  }\n\n  public setUniforms(\n    projectionMatrix: mat4,\n    modelViewMatrix: mat4,\n    modelMatrix: mat4,\n    camera?: PerspectiveCamera | OrthographicCamera\n  ) {\n    gl = GL.get();\n\n    // Update the other uniforms\n    Object.keys(this.customUniforms).forEach(uniformName => {\n      const uniform = this.uniforms[uniformName];\n      switch (uniform.type) {\n        case 't': {\n          gl.uniform1i(uniform.location, uniform.textureIndex);\n          gl.activeTexture(uniform.activeTexture);\n          gl.bindTexture(gl.TEXTURE_2D, uniform.value);\n          break;\n        }\n        case 'tc': {\n          gl.uniform1i(uniform.location, uniform.textureIndex);\n          gl.activeTexture(uniform.activeTexture);\n          gl.bindTexture(gl.TEXTURE_CUBE_MAP, uniform.value);\n          break;\n        }\n        case 't3d': {\n          if (gl instanceof WebGL2RenderingContext) {\n            gl.uniform1i(uniform.location, uniform.textureIndex);\n            gl.activeTexture(uniform.activeTexture);\n            gl.bindTexture(gl.TEXTURE_3D, uniform.value);\n          }\n          break;\n        }\n        case 'i': {\n          gl.uniform1i(uniform.location, uniform.value);\n          break;\n        }\n        case 'f': {\n          gl.uniform1f(uniform.location, uniform.value);\n          break;\n        }\n        case '2f': {\n          gl.uniform2f(uniform.location, uniform.value[0], uniform.value[1]);\n          break;\n        }\n        case '3f': {\n          gl.uniform3f(\n            uniform.location,\n            uniform.value[0],\n            uniform.value[1],\n            uniform.value[2]\n          );\n          break;\n        }\n        case '4f': {\n          gl.uniform4f(\n            uniform.location,\n            uniform.value[0],\n            uniform.value[1],\n            uniform.value[2],\n            uniform.value[3]\n          );\n          break;\n        }\n        case '1iv': {\n          gl.uniform1iv(uniform.location, uniform.value);\n          break;\n        }\n        case '2iv': {\n          gl.uniform2iv(uniform.location, uniform.value);\n          break;\n        }\n        case '1fv': {\n          gl.uniform1fv(uniform.location, uniform.value);\n          break;\n        }\n        case '2fv': {\n          gl.uniform2fv(uniform.location, uniform.value);\n          break;\n        }\n        case '3fv': {\n          gl.uniform3fv(uniform.location, uniform.value);\n          break;\n        }\n        case '4fv': {\n          gl.uniform4fv(uniform.location, uniform.value);\n          break;\n        }\n        case 'Matrix3fv': {\n          gl.uniformMatrix3fv(uniform.location, false, uniform.value);\n          break;\n        }\n        case 'Matrix4fv': {\n          gl.uniformMatrix4fv(uniform.location, false, uniform.value);\n          break;\n        }\n        default:\n      }\n    });\n\n    if (!GL.webgl2) {\n      gl.uniformMatrix4fv(\n        this.uniforms.uProjectionMatrix.location,\n        false,\n        projectionMatrix\n      );\n    }\n\n    gl.uniformMatrix4fv(\n      this.uniforms.uModelViewMatrix.location,\n      false,\n      modelViewMatrix\n    );\n    gl.uniformMatrix4fv(\n      this.uniforms.uModelMatrix.location,\n      false,\n      modelMatrix\n    );\n\n    mat4.identity(inversedModelViewMatrix);\n    mat4.invert(inversedModelViewMatrix, modelMatrix);\n\n    mat3.identity(normalMatrix);\n    mat3.fromMat4(normalMatrix, inversedModelViewMatrix);\n    mat3.transpose(normalMatrix, normalMatrix);\n    gl.uniformMatrix3fv(\n      this.uniforms.uNormalMatrix.location,\n      false,\n      normalMatrix\n    );\n\n    // uDiffuse\n    gl.uniform3f(\n      this.uniforms.uDiffuse.location,\n      this.uniforms.uDiffuse.value[0],\n      this.uniforms.uDiffuse.value[1],\n      this.uniforms.uDiffuse.value[2]\n    );\n\n    // Camera\n    if (camera && this.uniforms.uCameraPosition) {\n      gl.uniform3f(\n        this.uniforms.uCameraPosition.location,\n        camera.position.v[0],\n        camera.position.v[1],\n        camera.position.v[2]\n      );\n    }\n  }\n\n  public dispose() {\n    // Dispose textures\n    Object.keys(this.customUniforms).forEach(uniformName => {\n      const uniform = this.uniforms[uniformName];\n      switch (uniform.type) {\n        case 't':\n        case 'tc': {\n          gl.deleteTexture(uniform.value);\n          break;\n        }\n        default:\n      }\n    });\n    this.program.dispose();\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/core/Material.ts","// Es300\nexport default `\n\tuniform ProjectionView {\n\t\tmat4 projectionMatrix;\n\t} uProjectionView;\n`;\n\n\n\n// WEBPACK FOOTER //\n// ./src/shaders/chunks/ProjectionView.glsl.ts","import { vec2 } from 'gl-matrix';\n\nexport default class Vector2 {\n  public v: vec2;\n\n  constructor(x = 0, y = 0) {\n    this.v = vec2.create();\n    this.set(x, y);\n    return this;\n  }\n  set x(value: number) {\n    this.v[0] = value;\n  }\n  get x() {\n    return this.v[0];\n  }\n  set y(value: number) {\n    this.v[1] = value;\n  }\n  get y() {\n    return this.v[1];\n  }\n  public set(x: number, y: number) {\n    vec2.set(this.v, x, y);\n    return this;\n  }\n  public clone() {\n    return new Vector2(this.v[0], this.v[1]);\n  }\n  public copy(vector2: Vector2) {\n    vec2.copy(this.v, vector2.v);\n    return this;\n  }\n  public add(vector2: Vector2) {\n    vec2.add(this.v, this.v, vector2.v);\n    return this;\n  }\n  public subtract(vector2: Vector2) {\n    vec2.subtract(this.v, this.v, vector2.v);\n    return this;\n  }\n  public subtractVectors(vector0: Vector2, vector1: Vector2) {\n    const out = vec2.create();\n    vec2.subtract(out, vector0.v, vector1.v);\n    return out;\n  }\n  public scale(value: number) {\n    vec2.scale(this.v, this.v, value);\n    return this;\n  }\n  public distance(vector2: Vector2) {\n    return vec2.distance(this.v, vector2.v);\n  }\n  public length(): number {\n    return vec2.length(this.v);\n  }\n  public negate() {\n    vec2.negate(this.v, this.v);\n    return this;\n  }\n  public normalize() {\n    vec2.normalize(this.v, this.v);\n    return this;\n  }\n  public lerp(vector2: Vector2, value: number) {\n    vec2.lerp(this.v, this.v, vector2.v, value);\n    return this;\n  }\n  public equals(vector2: Vector2): boolean {\n    return vec2.equals(this.v, vector2.v);\n  }\n  public multiply(vector2: Vector2) {\n    this.v[0] *= vector2.v[0];\n    this.v[1] *= vector2.v[1];\n    return this;\n  }\n  public fromArray(values: number[]) {\n    return vec2.copy(this.v, values);\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/math/Vector2.ts","import { vec3 } from 'gl-matrix';\n\nexport default class Color {\n  public v: vec3;\n\n  constructor(hex = 0xffffff) {\n    this.v = vec3.create();\n    this.convert(hex);\n    return this;\n  }\n  set r(value: number) {\n    this.v[0] = value;\n  }\n  get r() {\n    return this.v[0];\n  }\n  set g(value: number) {\n    this.v[1] = value;\n  }\n  get g() {\n    return this.v[1];\n  }\n  set b(value: number) {\n    this.v[2] = value;\n  }\n  get b() {\n    return this.v[2];\n  }\n  public set(r: number, g: number, b: number) {\n    vec3.set(this.v, r, g, b);\n    return this;\n  }\n  public copy(rgb: number[]) {\n    vec3.copy(this.v, vec3.fromValues(rgb[0], rgb[1], rgb[2]));\n    return this;\n  }\n  public convert(hex: string | number) {\n    let rgb;\n    if (typeof hex === 'number') {\n      rgb = this.hexIntToRgb(hex);\n    }\n    if (typeof hex === 'string') {\n      rgb = this.hexStringToRgb(hex);\n    }\n    vec3.copy(this.v, this.normalize(rgb));\n    return this;\n  }\n  public normalize(array: number[]) {\n    return vec3.fromValues(array[0] / 255, array[1] / 255, array[2] / 255);\n  }\n  public fromArray(array: number[]) {\n    this.set(array[0], array[1], array[2]);\n  }\n  public componentToHex(c: number) {\n    const hex = c.toString(16);\n    return hex.length === 1 ? `0${hex}` : hex;\n  }\n  public rgbToHex(r: number, g: number, b: number) {\n    const hexR = this.componentToHex(r);\n    const hexG = this.componentToHex(g);\n    const hexB = this.componentToHex(b);\n    return `#${hexR}${hexG}${hexB}`;\n  }\n  public hexIntToRgb(hex: number) {\n    const r = hex >> 16;\n    const g = (hex >> 8) & 0xff;\n    const b = hex & 0xff;\n    return vec3.fromValues(r, g, b);\n  }\n  public hexStringToRgb(hex: string) {\n    const result = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(hex);\n    return result\n      ? vec3.fromValues(\n          parseInt(result[1], 16),\n          parseInt(result[2], 16),\n          parseInt(result[3], 16)\n        )\n      : null;\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/math/Color.ts","const enabled = true;\n\nexport const log = (() => {\n  if (!window.console || !console.log) {\n    return () => {\n      return;\n    };\n  }\n  if (!enabled)\n    return () => {\n      return;\n    };\n  return Function.prototype.bind.call(console.log, console);\n})();\n\nexport const clear = (() => {\n  if (!window.console || !console.clear) {\n    return () => {\n      return;\n    };\n  }\n  if (!enabled)\n    return () => {\n      return;\n    };\n  return Function.prototype.bind.call(console.clear, console);\n})();\n\nexport const debug = (() => {\n  if (!window.console || !console.debug) {\n    return () => {\n      return;\n    };\n  }\n  if (!enabled)\n    return () => {\n      return;\n    };\n  return Function.prototype.bind.call(console.debug, console);\n})();\n\nexport const info = (() => {\n  if (!window.console || !console.info) {\n    return () => {\n      return;\n    };\n  }\n  if (!enabled)\n    return () => {\n      return;\n    };\n  return Function.prototype.bind.call(console.info, console);\n})();\n\nexport const warn = (() => {\n  if (!window.console || !console.warn) {\n    return () => {\n      return;\n    };\n  }\n  if (!enabled)\n    return () => {\n      return;\n    };\n  return Function.prototype.bind.call(console.warn, console);\n})();\n\nexport const error = (() => {\n  if (!window.console || !console.error) {\n    return () => {\n      return;\n    };\n  }\n  if (!enabled)\n    return () => {\n      return;\n    };\n  return Function.prototype.bind.call(console.error, console);\n})();\n\n\n\n// WEBPACK FOOTER //\n// ./src/utils/Console.ts","// https://github.com/arboleya/happens\n\nexport default class EventDispatcher {\n  public listeners: any[];\n\n  public on(event: string, fn: () => void) {\n    this.validate(fn);\n    this.init(event).push(fn);\n  }\n\n  public off(event: string, fn: () => void) {\n    const pool = this.init(event);\n    pool.splice(pool.indexOf(fn), 1);\n  }\n\n  public once(event: string, fn: () => void) {\n    this.validate(fn);\n    const wrapper = () => {\n      this.off(event, wrapper);\n      fn.apply(this, arguments);\n    };\n    this.on(event, wrapper);\n  }\n\n  public emit(event: string, ...args) {\n    const pool = this.init(event).slice(0);\n    for (const i in pool) pool[i].apply(this, [].slice.call(arguments, 1));\n  }\n\n  private validate(fn: () => void) {\n    if (!(fn && fn instanceof Function))\n      throw new Error(fn + ' is not a Function');\n  }\n\n  private init(event: string) {\n    const tmp = this.listeners || (this.listeners = []);\n    return tmp[event] || (tmp[event] = []);\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/core/EventDispatcher.ts","import { mat4 } from 'gl-matrix';\nimport UniformBuffer from './UniformBuffer';\n\n// Global uniform buffers\nconst uniformBuffers: any = {};\n\n// Create buffers when gl context is ready\nexport function setup() {\n  // ProjectionView\n  const projectionViewData = new Float32Array(mat4.create());\n\n  uniformBuffers.projectionView = new UniformBuffer(projectionViewData);\n}\n\n// Update projectionView buffer data\nexport function updateProjectionView(\n  gl: WebGL2RenderingContext,\n  projectionMatrix: mat4\n) {\n  gl.bindBufferBase(gl.UNIFORM_BUFFER, 0, uniformBuffers.projectionView.buffer);\n  gl.bindBuffer(gl.UNIFORM_BUFFER, uniformBuffers.projectionView.buffer);\n\n  const projectionViewData = [...projectionMatrix];\n\n  uniformBuffers.projectionView.data.set(projectionViewData, 0);\n\n  gl.bufferSubData(gl.UNIFORM_BUFFER, 0, uniformBuffers.projectionView.data);\n  gl.bindBuffer(gl.UNIFORM_BUFFER, null);\n}\n\nexport default uniformBuffers;\n\n\n\n// WEBPACK FOOTER //\n// ./src/core/UniformBuffers.ts","import { mat4, vec3 } from 'gl-matrix';\nimport Vector3 from './Vector3';\n\nexport default class Sphere {\n  public center: Vector3;\n  public radius: number;\n\n  constructor(center: Vector3 = new Vector3(), radius: number = 0) {\n    this.center = center;\n    this.radius = radius;\n  }\n\n  public copy(sphere: Sphere) {\n    this.center.copy(sphere.center);\n    this.radius = sphere.radius;\n  }\n\n  public applyMatrix(matrix: mat4) {\n    vec3.transformMat4(this.center.v, this.center.v, matrix);\n    const scaling = mat4.getScaling(vec3.create(), matrix);\n    this.radius *= Math.max(scaling[0], scaling[1], scaling[2]);\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/math/Sphere.ts","import { mat4 } from 'gl-matrix';\nimport { RENDERER_DEFAULT_RATIO } from '../core/Constants';\nimport Object3D from '../core/Object3D';\nimport Vector3 from '../math/Vector3';\n\ninterface Options {\n  near?: number;\n  far?: number;\n  fov?: number;\n  position?: Vector3;\n  target?: Vector3;\n  up?: Vector3;\n}\n\nexport default class Camera {\n  public projectionMatrix: mat4;\n  public worldInverseMatrix: mat4;\n  public isCamera: boolean;\n  public isPespectiveCamera: boolean;\n  public isOrthographicCamera: boolean;\n  public near: number;\n  public far: number;\n  public fov: number;\n  public aspect: number;\n  public position: Vector3;\n  public target: Vector3;\n  public up: Vector3;\n\n  constructor(options: Options) {\n    this.projectionMatrix = mat4.create();\n    this.worldInverseMatrix = mat4.create();\n    this.isCamera = true;\n    this.isPespectiveCamera = false;\n    this.isOrthographicCamera = false;\n    this.near = 0.1;\n    this.far = 100;\n    this.fov = 70;\n    this.aspect = RENDERER_DEFAULT_RATIO;\n    this.position = new Vector3();\n    this.target = new Vector3();\n    this.up = new Vector3(0, 1, 0);\n    Object.assign(this, options);\n  }\n\n  public lookAt(x = 0, y = 0, z = 0) {\n    this.target.set(x, y, z);\n  }\n\n  public updateMatrixWorld() {\n    mat4.identity(this.worldInverseMatrix);\n    mat4.lookAt(\n      this.worldInverseMatrix,\n      this.position.v,\n      this.target.v,\n      this.up.v\n    );\n  }\n\n  public updateProjectionMatrix() {\n    // override\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/cameras/Camera.ts","import { createUniformBuffer } from './GL';\n\nexport default class UniformBuffer {\n  public data: Float32Array;\n  public buffer: WebGLBuffer;\n\n  constructor(data: Float32Array) {\n    this.data = data;\n    this.buffer = createUniformBuffer(data);\n  }\n\n  public setValues(values: Float32Array, offset = 0) {\n    this.data.set(values, offset);\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/core/UniformBuffer.ts","const ambientLightEs300 = `\n\tuniform AmbientLight {\n\t\tvec4 color;\n\t\tvec4 intensity;\n\t} uAmbientLight;\n`;\n\nconst ambientLightEs100 = `\n\tstruct AmbientLight {\n\t\tvec3 color;\n\t\tfloat intensity;\n\t};\n\tuniform AmbientLight uAmbientLight;\n`;\n\nexport { ambientLightEs300, ambientLightEs100 };\n\n\n\n// WEBPACK FOOTER //\n// ./src/shaders/chunks/AmbientLight.glsl.ts","const directionalLightsEs300 = `\n\tstruct DirectionalLight {\n\t\tvec4 position;\n\t\tvec4 color;\n\t\tvec4 intensity;\n\t};\n\tuniform DirectionalLights {\n\t\tDirectionalLight uDirectionalLights[#HOOK_DIRECTIONAL_LIGHTS];\n\t};\n`;\n\nconst directionalLightsEs100 = `\n\tstruct DirectionalLight {\n\t\tvec3 position;\n\t\tvec3 color;\n\t\tfloat intensity;\n\t};\n\tuniform DirectionalLight uDirectionalLights[#HOOK_DIRECTIONAL_LIGHTS];\n`;\n\nexport { directionalLightsEs300, directionalLightsEs100 };\n\n\n\n// WEBPACK FOOTER //\n// ./src/shaders/chunks/DirectionalLights.glsl.ts","const lambertEs300 = `\n\tvec3 CalculateDirectionalLight(DirectionalLight light, vec3 normal) {\n\t\tvec3 lightDirection = normalize(light.position.xyz);\n\t\t// diffuse shading\n\t\tfloat diff = max(dot(lightDirection, normal), 0.0);\n\n\t\tvec3 ambientColor = vec3(0.5);\n\t\tfloat ambientIntensity = 0.5;\n\n\t\t#ifdef ambientLight\n\t\tambientColor = uAmbientLight.color.rgb;\n\t\tambientIntensity = uAmbientLight.intensity.x;\n\t\t#endif\n\n\t\t// combine results\n\t\tvec3 ambient = (ambientColor * ambientIntensity) * vDiffuse;\n\t\tvec3 diffuse = light.color.rgb * diff * vDiffuse;\n\t\treturn (ambient + diffuse * light.intensity.x);\n\t}\n`;\n\nconst lambertEs100 = `\n\tvec3 CalculateDirectionalLight(DirectionalLight light, vec3 normal) {\n\t\tvec3 lightDirection = normalize(light.position);\n\t\t// diffuse shading\n\t\tfloat diff = max(dot(lightDirection, normal), 0.0);\n\n\t\t\tvec3 ambientColor = vec3(0.5);\n\t\t\tfloat ambientIntensity = 0.5;\n\n\t\t\t#ifdef ambientLight\n\t\t\tambientColor = uAmbientLight.color;\n\t\t\tambientIntensity = uAmbientLight.intensity;\n\t\t\t#endif\n\n\t\t\t// combine results\n\t\tvec3 ambient = (ambientColor * ambientIntensity) * vDiffuse;\n\t\t\tvec3 diffuse = light.color * diff * vDiffuse;\n\t\treturn (ambient + diffuse * light.intensity);\n\t}\n`;\n\nexport { lambertEs300, lambertEs100 };\n\n\n\n// WEBPACK FOOTER //\n// ./src/shaders/chunks/Lambert.glsl.ts","import parseHDR from 'parse-hdr';\nimport ImageData from '../core/ImageData';\n\nexport default function HdrLoader(src): Promise<ImageData> {\n  return new Promise((resolve: (image) => void, reject: (status) => void) => {\n    const req = new XMLHttpRequest();\n    req.responseType = 'arraybuffer';\n    req.onreadystatechange = () => {\n      if (req.readyState !== 4) return;\n      if (req.readyState === 4 && req.status === 200) {\n        const hdr = parseHDR(req.response);\n        const image = new ImageData(hdr.shape[0], hdr.shape[1], hdr.data);\n        resolve(image);\n      } else {\n        reject(req.status);\n      }\n    };\n    req.open('GET', src, true);\n    req.send();\n  });\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/loaders/HdrLoader.ts","export default class ImageData {\n  public width: number;\n  public height: number;\n  public data: Float32Array;\n\n  constructor(width: number, height: number, data: Float32Array) {\n    this.width = width;\n    this.height = height;\n    this.data = data;\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/core/ImageData.ts","export default function ImageLoader(src): Promise<HTMLImageElement> {\n  return new Promise((resolve: (image) => void, reject: (status) => void) => {\n    const image = new Image();\n\n    image.onload = () => {\n      resolve(image);\n    };\n\n    image.onerror = () => {\n      reject(`Failed to load ${src}`);\n    };\n\n    image.src = src;\n  });\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/loaders/ImageLoader.ts","export function createCanvas(width = 1, height = 1) {\n  const canvas = document.createElement('canvas');\n  const ctx = canvas.getContext('2d');\n  canvas.width = width;\n  canvas.height = height;\n  return {\n    canvas,\n    ctx\n  };\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/utils/Canvas.ts","export default class Light {\n  public type: string;\n  public data: Float32Array;\n\n  public update() {\n    return;\n  }\n\n  public setValues(values: number[] | Float32Array, offset = 0) {\n    this.data.set(values, offset);\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/lights/Light.ts","import { log } from '../utils/Console';\nexport default function FileLoader(url: string, responseType?): Promise<any> {\n  return new Promise(\n    (resolve: (response, statis) => void, reject: (status) => void) => {\n      const req = new XMLHttpRequest();\n      req.responseType = responseType || '';\n      req.onreadystatechange = () => {\n        if (req.readyState !== 4) return;\n        if (req.readyState === 4 && req.status === 200) {\n          resolve(req.response, req.status);\n        } else {\n          reject(req.status);\n        }\n      };\n      req.open('GET', url, true);\n      req.send();\n    }\n  );\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/loaders/FileLoader.ts","import * as glMatrix from \"./common.js\";\n\n/**\n * 3x3 Matrix\n * @module mat3\n */\n\n/**\n * Creates a new identity mat3\n *\n * @returns {mat3} a new 3x3 matrix\n */\nexport function create() {\n  let out = new glMatrix.ARRAY_TYPE(9);\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 1;\n  out[5] = 0;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 1;\n  return out;\n}\n\n/**\n * Copies the upper-left 3x3 values into the given mat3.\n *\n * @param {mat3} out the receiving 3x3 matrix\n * @param {mat4} a   the source 4x4 matrix\n * @returns {mat3} out\n */\nexport function fromMat4(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[4];\n  out[4] = a[5];\n  out[5] = a[6];\n  out[6] = a[8];\n  out[7] = a[9];\n  out[8] = a[10];\n  return out;\n}\n\n/**\n * Creates a new mat3 initialized with values from an existing matrix\n *\n * @param {mat3} a matrix to clone\n * @returns {mat3} a new 3x3 matrix\n */\nexport function clone(a) {\n  let out = new glMatrix.ARRAY_TYPE(9);\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  out[4] = a[4];\n  out[5] = a[5];\n  out[6] = a[6];\n  out[7] = a[7];\n  out[8] = a[8];\n  return out;\n}\n\n/**\n * Copy the values from one mat3 to another\n *\n * @param {mat3} out the receiving matrix\n * @param {mat3} a the source matrix\n * @returns {mat3} out\n */\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  out[4] = a[4];\n  out[5] = a[5];\n  out[6] = a[6];\n  out[7] = a[7];\n  out[8] = a[8];\n  return out;\n}\n\n/**\n * Create a new mat3 with the given values\n *\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\n * @param {Number} m02 Component in column 0, row 2 position (index 2)\n * @param {Number} m10 Component in column 1, row 0 position (index 3)\n * @param {Number} m11 Component in column 1, row 1 position (index 4)\n * @param {Number} m12 Component in column 1, row 2 position (index 5)\n * @param {Number} m20 Component in column 2, row 0 position (index 6)\n * @param {Number} m21 Component in column 2, row 1 position (index 7)\n * @param {Number} m22 Component in column 2, row 2 position (index 8)\n * @returns {mat3} A new mat3\n */\nexport function fromValues(m00, m01, m02, m10, m11, m12, m20, m21, m22) {\n  let out = new glMatrix.ARRAY_TYPE(9);\n  out[0] = m00;\n  out[1] = m01;\n  out[2] = m02;\n  out[3] = m10;\n  out[4] = m11;\n  out[5] = m12;\n  out[6] = m20;\n  out[7] = m21;\n  out[8] = m22;\n  return out;\n}\n\n/**\n * Set the components of a mat3 to the given values\n *\n * @param {mat3} out the receiving matrix\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\n * @param {Number} m02 Component in column 0, row 2 position (index 2)\n * @param {Number} m10 Component in column 1, row 0 position (index 3)\n * @param {Number} m11 Component in column 1, row 1 position (index 4)\n * @param {Number} m12 Component in column 1, row 2 position (index 5)\n * @param {Number} m20 Component in column 2, row 0 position (index 6)\n * @param {Number} m21 Component in column 2, row 1 position (index 7)\n * @param {Number} m22 Component in column 2, row 2 position (index 8)\n * @returns {mat3} out\n */\nexport function set(out, m00, m01, m02, m10, m11, m12, m20, m21, m22) {\n  out[0] = m00;\n  out[1] = m01;\n  out[2] = m02;\n  out[3] = m10;\n  out[4] = m11;\n  out[5] = m12;\n  out[6] = m20;\n  out[7] = m21;\n  out[8] = m22;\n  return out;\n}\n\n/**\n * Set a mat3 to the identity matrix\n *\n * @param {mat3} out the receiving matrix\n * @returns {mat3} out\n */\nexport function identity(out) {\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 1;\n  out[5] = 0;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 1;\n  return out;\n}\n\n/**\n * Transpose the values of a mat3\n *\n * @param {mat3} out the receiving matrix\n * @param {mat3} a the source matrix\n * @returns {mat3} out\n */\nexport function transpose(out, a) {\n  // If we are transposing ourselves we can skip a few steps but have to cache some values\n  if (out === a) {\n    let a01 = a[1], a02 = a[2], a12 = a[5];\n    out[1] = a[3];\n    out[2] = a[6];\n    out[3] = a01;\n    out[5] = a[7];\n    out[6] = a02;\n    out[7] = a12;\n  } else {\n    out[0] = a[0];\n    out[1] = a[3];\n    out[2] = a[6];\n    out[3] = a[1];\n    out[4] = a[4];\n    out[5] = a[7];\n    out[6] = a[2];\n    out[7] = a[5];\n    out[8] = a[8];\n  }\n\n  return out;\n}\n\n/**\n * Inverts a mat3\n *\n * @param {mat3} out the receiving matrix\n * @param {mat3} a the source matrix\n * @returns {mat3} out\n */\nexport function invert(out, a) {\n  let a00 = a[0], a01 = a[1], a02 = a[2];\n  let a10 = a[3], a11 = a[4], a12 = a[5];\n  let a20 = a[6], a21 = a[7], a22 = a[8];\n\n  let b01 = a22 * a11 - a12 * a21;\n  let b11 = -a22 * a10 + a12 * a20;\n  let b21 = a21 * a10 - a11 * a20;\n\n  // Calculate the determinant\n  let det = a00 * b01 + a01 * b11 + a02 * b21;\n\n  if (!det) {\n    return null;\n  }\n  det = 1.0 / det;\n\n  out[0] = b01 * det;\n  out[1] = (-a22 * a01 + a02 * a21) * det;\n  out[2] = (a12 * a01 - a02 * a11) * det;\n  out[3] = b11 * det;\n  out[4] = (a22 * a00 - a02 * a20) * det;\n  out[5] = (-a12 * a00 + a02 * a10) * det;\n  out[6] = b21 * det;\n  out[7] = (-a21 * a00 + a01 * a20) * det;\n  out[8] = (a11 * a00 - a01 * a10) * det;\n  return out;\n}\n\n/**\n * Calculates the adjugate of a mat3\n *\n * @param {mat3} out the receiving matrix\n * @param {mat3} a the source matrix\n * @returns {mat3} out\n */\nexport function adjoint(out, a) {\n  let a00 = a[0], a01 = a[1], a02 = a[2];\n  let a10 = a[3], a11 = a[4], a12 = a[5];\n  let a20 = a[6], a21 = a[7], a22 = a[8];\n\n  out[0] = (a11 * a22 - a12 * a21);\n  out[1] = (a02 * a21 - a01 * a22);\n  out[2] = (a01 * a12 - a02 * a11);\n  out[3] = (a12 * a20 - a10 * a22);\n  out[4] = (a00 * a22 - a02 * a20);\n  out[5] = (a02 * a10 - a00 * a12);\n  out[6] = (a10 * a21 - a11 * a20);\n  out[7] = (a01 * a20 - a00 * a21);\n  out[8] = (a00 * a11 - a01 * a10);\n  return out;\n}\n\n/**\n * Calculates the determinant of a mat3\n *\n * @param {mat3} a the source matrix\n * @returns {Number} determinant of a\n */\nexport function determinant(a) {\n  let a00 = a[0], a01 = a[1], a02 = a[2];\n  let a10 = a[3], a11 = a[4], a12 = a[5];\n  let a20 = a[6], a21 = a[7], a22 = a[8];\n\n  return a00 * (a22 * a11 - a12 * a21) + a01 * (-a22 * a10 + a12 * a20) + a02 * (a21 * a10 - a11 * a20);\n}\n\n/**\n * Multiplies two mat3's\n *\n * @param {mat3} out the receiving matrix\n * @param {mat3} a the first operand\n * @param {mat3} b the second operand\n * @returns {mat3} out\n */\nexport function multiply(out, a, b) {\n  let a00 = a[0], a01 = a[1], a02 = a[2];\n  let a10 = a[3], a11 = a[4], a12 = a[5];\n  let a20 = a[6], a21 = a[7], a22 = a[8];\n\n  let b00 = b[0], b01 = b[1], b02 = b[2];\n  let b10 = b[3], b11 = b[4], b12 = b[5];\n  let b20 = b[6], b21 = b[7], b22 = b[8];\n\n  out[0] = b00 * a00 + b01 * a10 + b02 * a20;\n  out[1] = b00 * a01 + b01 * a11 + b02 * a21;\n  out[2] = b00 * a02 + b01 * a12 + b02 * a22;\n\n  out[3] = b10 * a00 + b11 * a10 + b12 * a20;\n  out[4] = b10 * a01 + b11 * a11 + b12 * a21;\n  out[5] = b10 * a02 + b11 * a12 + b12 * a22;\n\n  out[6] = b20 * a00 + b21 * a10 + b22 * a20;\n  out[7] = b20 * a01 + b21 * a11 + b22 * a21;\n  out[8] = b20 * a02 + b21 * a12 + b22 * a22;\n  return out;\n}\n\n/**\n * Translate a mat3 by the given vector\n *\n * @param {mat3} out the receiving matrix\n * @param {mat3} a the matrix to translate\n * @param {vec2} v vector to translate by\n * @returns {mat3} out\n */\nexport function translate(out, a, v) {\n  let a00 = a[0], a01 = a[1], a02 = a[2],\n    a10 = a[3], a11 = a[4], a12 = a[5],\n    a20 = a[6], a21 = a[7], a22 = a[8],\n    x = v[0], y = v[1];\n\n  out[0] = a00;\n  out[1] = a01;\n  out[2] = a02;\n\n  out[3] = a10;\n  out[4] = a11;\n  out[5] = a12;\n\n  out[6] = x * a00 + y * a10 + a20;\n  out[7] = x * a01 + y * a11 + a21;\n  out[8] = x * a02 + y * a12 + a22;\n  return out;\n}\n\n/**\n * Rotates a mat3 by the given angle\n *\n * @param {mat3} out the receiving matrix\n * @param {mat3} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat3} out\n */\nexport function rotate(out, a, rad) {\n  let a00 = a[0], a01 = a[1], a02 = a[2],\n    a10 = a[3], a11 = a[4], a12 = a[5],\n    a20 = a[6], a21 = a[7], a22 = a[8],\n\n    s = Math.sin(rad),\n    c = Math.cos(rad);\n\n  out[0] = c * a00 + s * a10;\n  out[1] = c * a01 + s * a11;\n  out[2] = c * a02 + s * a12;\n\n  out[3] = c * a10 - s * a00;\n  out[4] = c * a11 - s * a01;\n  out[5] = c * a12 - s * a02;\n\n  out[6] = a20;\n  out[7] = a21;\n  out[8] = a22;\n  return out;\n};\n\n/**\n * Scales the mat3 by the dimensions in the given vec2\n *\n * @param {mat3} out the receiving matrix\n * @param {mat3} a the matrix to rotate\n * @param {vec2} v the vec2 to scale the matrix by\n * @returns {mat3} out\n **/\nexport function scale(out, a, v) {\n  let x = v[0], y = v[1];\n\n  out[0] = x * a[0];\n  out[1] = x * a[1];\n  out[2] = x * a[2];\n\n  out[3] = y * a[3];\n  out[4] = y * a[4];\n  out[5] = y * a[5];\n\n  out[6] = a[6];\n  out[7] = a[7];\n  out[8] = a[8];\n  return out;\n}\n\n/**\n * Creates a matrix from a vector translation\n * This is equivalent to (but much faster than):\n *\n *     mat3.identity(dest);\n *     mat3.translate(dest, dest, vec);\n *\n * @param {mat3} out mat3 receiving operation result\n * @param {vec2} v Translation vector\n * @returns {mat3} out\n */\nexport function fromTranslation(out, v) {\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 1;\n  out[5] = 0;\n  out[6] = v[0];\n  out[7] = v[1];\n  out[8] = 1;\n  return out;\n}\n\n/**\n * Creates a matrix from a given angle\n * This is equivalent to (but much faster than):\n *\n *     mat3.identity(dest);\n *     mat3.rotate(dest, dest, rad);\n *\n * @param {mat3} out mat3 receiving operation result\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat3} out\n */\nexport function fromRotation(out, rad) {\n  let s = Math.sin(rad), c = Math.cos(rad);\n\n  out[0] = c;\n  out[1] = s;\n  out[2] = 0;\n\n  out[3] = -s;\n  out[4] = c;\n  out[5] = 0;\n\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 1;\n  return out;\n}\n\n/**\n * Creates a matrix from a vector scaling\n * This is equivalent to (but much faster than):\n *\n *     mat3.identity(dest);\n *     mat3.scale(dest, dest, vec);\n *\n * @param {mat3} out mat3 receiving operation result\n * @param {vec2} v Scaling vector\n * @returns {mat3} out\n */\nexport function fromScaling(out, v) {\n  out[0] = v[0];\n  out[1] = 0;\n  out[2] = 0;\n\n  out[3] = 0;\n  out[4] = v[1];\n  out[5] = 0;\n\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 1;\n  return out;\n}\n\n/**\n * Copies the values from a mat2d into a mat3\n *\n * @param {mat3} out the receiving matrix\n * @param {mat2d} a the matrix to copy\n * @returns {mat3} out\n **/\nexport function fromMat2d(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = 0;\n\n  out[3] = a[2];\n  out[4] = a[3];\n  out[5] = 0;\n\n  out[6] = a[4];\n  out[7] = a[5];\n  out[8] = 1;\n  return out;\n}\n\n/**\n* Calculates a 3x3 matrix from the given quaternion\n*\n* @param {mat3} out mat3 receiving operation result\n* @param {quat} q Quaternion to create matrix from\n*\n* @returns {mat3} out\n*/\nexport function fromQuat(out, q) {\n  let x = q[0], y = q[1], z = q[2], w = q[3];\n  let x2 = x + x;\n  let y2 = y + y;\n  let z2 = z + z;\n\n  let xx = x * x2;\n  let yx = y * x2;\n  let yy = y * y2;\n  let zx = z * x2;\n  let zy = z * y2;\n  let zz = z * z2;\n  let wx = w * x2;\n  let wy = w * y2;\n  let wz = w * z2;\n\n  out[0] = 1 - yy - zz;\n  out[3] = yx - wz;\n  out[6] = zx + wy;\n\n  out[1] = yx + wz;\n  out[4] = 1 - xx - zz;\n  out[7] = zy - wx;\n\n  out[2] = zx - wy;\n  out[5] = zy + wx;\n  out[8] = 1 - xx - yy;\n\n  return out;\n}\n\n/**\n* Calculates a 3x3 normal matrix (transpose inverse) from the 4x4 matrix\n*\n* @param {mat3} out mat3 receiving operation result\n* @param {mat4} a Mat4 to derive the normal matrix from\n*\n* @returns {mat3} out\n*/\nexport function normalFromMat4(out, a) {\n  let a00 = a[0], a01 = a[1], a02 = a[2], a03 = a[3];\n  let a10 = a[4], a11 = a[5], a12 = a[6], a13 = a[7];\n  let a20 = a[8], a21 = a[9], a22 = a[10], a23 = a[11];\n  let a30 = a[12], a31 = a[13], a32 = a[14], a33 = a[15];\n\n  let b00 = a00 * a11 - a01 * a10;\n  let b01 = a00 * a12 - a02 * a10;\n  let b02 = a00 * a13 - a03 * a10;\n  let b03 = a01 * a12 - a02 * a11;\n  let b04 = a01 * a13 - a03 * a11;\n  let b05 = a02 * a13 - a03 * a12;\n  let b06 = a20 * a31 - a21 * a30;\n  let b07 = a20 * a32 - a22 * a30;\n  let b08 = a20 * a33 - a23 * a30;\n  let b09 = a21 * a32 - a22 * a31;\n  let b10 = a21 * a33 - a23 * a31;\n  let b11 = a22 * a33 - a23 * a32;\n\n  // Calculate the determinant\n  let det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\n\n  if (!det) {\n    return null;\n  }\n  det = 1.0 / det;\n\n  out[0] = (a11 * b11 - a12 * b10 + a13 * b09) * det;\n  out[1] = (a12 * b08 - a10 * b11 - a13 * b07) * det;\n  out[2] = (a10 * b10 - a11 * b08 + a13 * b06) * det;\n\n  out[3] = (a02 * b10 - a01 * b11 - a03 * b09) * det;\n  out[4] = (a00 * b11 - a02 * b08 + a03 * b07) * det;\n  out[5] = (a01 * b08 - a00 * b10 - a03 * b06) * det;\n\n  out[6] = (a31 * b05 - a32 * b04 + a33 * b03) * det;\n  out[7] = (a32 * b02 - a30 * b05 - a33 * b01) * det;\n  out[8] = (a30 * b04 - a31 * b02 + a33 * b00) * det;\n\n  return out;\n}\n\n/**\n * Generates a 2D projection matrix with the given bounds\n *\n * @param {mat3} out mat3 frustum matrix will be written into\n * @param {number} width Width of your gl context\n * @param {number} height Height of gl context\n * @returns {mat3} out\n */\nexport function projection(out, width, height) {\n    out[0] = 2 / width;\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n    out[4] = -2 / height;\n    out[5] = 0;\n    out[6] = -1;\n    out[7] = 1;\n    out[8] = 1;\n    return out;\n}\n\n/**\n * Returns a string representation of a mat3\n *\n * @param {mat3} a matrix to represent as a string\n * @returns {String} string representation of the matrix\n */\nexport function str(a) {\n  return 'mat3(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' +\n          a[3] + ', ' + a[4] + ', ' + a[5] + ', ' +\n          a[6] + ', ' + a[7] + ', ' + a[8] + ')';\n}\n\n/**\n * Returns Frobenius norm of a mat3\n *\n * @param {mat3} a the matrix to calculate Frobenius norm of\n * @returns {Number} Frobenius norm\n */\nexport function frob(a) {\n  return(Math.sqrt(Math.pow(a[0], 2) + Math.pow(a[1], 2) + Math.pow(a[2], 2) + Math.pow(a[3], 2) + Math.pow(a[4], 2) + Math.pow(a[5], 2) + Math.pow(a[6], 2) + Math.pow(a[7], 2) + Math.pow(a[8], 2)))\n}\n\n/**\n * Adds two mat3's\n *\n * @param {mat3} out the receiving matrix\n * @param {mat3} a the first operand\n * @param {mat3} b the second operand\n * @returns {mat3} out\n */\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  out[3] = a[3] + b[3];\n  out[4] = a[4] + b[4];\n  out[5] = a[5] + b[5];\n  out[6] = a[6] + b[6];\n  out[7] = a[7] + b[7];\n  out[8] = a[8] + b[8];\n  return out;\n}\n\n/**\n * Subtracts matrix b from matrix a\n *\n * @param {mat3} out the receiving matrix\n * @param {mat3} a the first operand\n * @param {mat3} b the second operand\n * @returns {mat3} out\n */\nexport function subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  out[2] = a[2] - b[2];\n  out[3] = a[3] - b[3];\n  out[4] = a[4] - b[4];\n  out[5] = a[5] - b[5];\n  out[6] = a[6] - b[6];\n  out[7] = a[7] - b[7];\n  out[8] = a[8] - b[8];\n  return out;\n}\n\n\n\n/**\n * Multiply each element of the matrix by a scalar.\n *\n * @param {mat3} out the receiving matrix\n * @param {mat3} a the matrix to scale\n * @param {Number} b amount to scale the matrix's elements by\n * @returns {mat3} out\n */\nexport function multiplyScalar(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  out[3] = a[3] * b;\n  out[4] = a[4] * b;\n  out[5] = a[5] * b;\n  out[6] = a[6] * b;\n  out[7] = a[7] * b;\n  out[8] = a[8] * b;\n  return out;\n}\n\n/**\n * Adds two mat3's after multiplying each element of the second operand by a scalar value.\n *\n * @param {mat3} out the receiving vector\n * @param {mat3} a the first operand\n * @param {mat3} b the second operand\n * @param {Number} scale the amount to scale b's elements by before adding\n * @returns {mat3} out\n */\nexport function multiplyScalarAndAdd(out, a, b, scale) {\n  out[0] = a[0] + (b[0] * scale);\n  out[1] = a[1] + (b[1] * scale);\n  out[2] = a[2] + (b[2] * scale);\n  out[3] = a[3] + (b[3] * scale);\n  out[4] = a[4] + (b[4] * scale);\n  out[5] = a[5] + (b[5] * scale);\n  out[6] = a[6] + (b[6] * scale);\n  out[7] = a[7] + (b[7] * scale);\n  out[8] = a[8] + (b[8] * scale);\n  return out;\n}\n\n/**\n * Returns whether or not the matrices have exactly the same elements in the same position (when compared with ===)\n *\n * @param {mat3} a The first matrix.\n * @param {mat3} b The second matrix.\n * @returns {Boolean} True if the matrices are equal, false otherwise.\n */\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] &&\n         a[3] === b[3] && a[4] === b[4] && a[5] === b[5] &&\n         a[6] === b[6] && a[7] === b[7] && a[8] === b[8];\n}\n\n/**\n * Returns whether or not the matrices have approximately the same elements in the same position.\n *\n * @param {mat3} a The first matrix.\n * @param {mat3} b The second matrix.\n * @returns {Boolean} True if the matrices are equal, false otherwise.\n */\nexport function equals(a, b) {\n  let a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3], a4 = a[4], a5 = a[5], a6 = a[6], a7 = a[7], a8 = a[8];\n  let b0 = b[0], b1 = b[1], b2 = b[2], b3 = b[3], b4 = b[4], b5 = b[5], b6 = b[6], b7 = b[7], b8 = b[8];\n  return (Math.abs(a0 - b0) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a0), Math.abs(b0)) &&\n          Math.abs(a1 - b1) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a1), Math.abs(b1)) &&\n          Math.abs(a2 - b2) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a2), Math.abs(b2)) &&\n          Math.abs(a3 - b3) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a3), Math.abs(b3)) &&\n          Math.abs(a4 - b4) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a4), Math.abs(b4)) &&\n          Math.abs(a5 - b5) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a5), Math.abs(b5)) &&\n          Math.abs(a6 - b6) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a6), Math.abs(b6)) &&\n          Math.abs(a7 - b7) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a7), Math.abs(b7)) &&\n          Math.abs(a8 - b8) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a8), Math.abs(b8)));\n}\n\n/**\n * Alias for {@link mat3.multiply}\n * @function\n */\nexport const mul = multiply;\n\n/**\n * Alias for {@link mat3.subtract}\n * @function\n */\nexport const sub = subtract;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/gl-matrix/src/gl-matrix/mat3.js\n// module id = 29\n// module chunks = 0","import * as glMatrix from \"./common.js\";\n\n/**\n * 4x4 Matrix<br>Format: column-major, when typed out it looks like row-major<br>The matrices are being post multiplied.\n * @module mat4\n */\n\n/**\n * Creates a new identity mat4\n *\n * @returns {mat4} a new 4x4 matrix\n */\nexport function create() {\n  let out = new glMatrix.ARRAY_TYPE(16);\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = 1;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = 1;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n\n/**\n * Creates a new mat4 initialized with values from an existing matrix\n *\n * @param {mat4} a matrix to clone\n * @returns {mat4} a new 4x4 matrix\n */\nexport function clone(a) {\n  let out = new glMatrix.ARRAY_TYPE(16);\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  out[4] = a[4];\n  out[5] = a[5];\n  out[6] = a[6];\n  out[7] = a[7];\n  out[8] = a[8];\n  out[9] = a[9];\n  out[10] = a[10];\n  out[11] = a[11];\n  out[12] = a[12];\n  out[13] = a[13];\n  out[14] = a[14];\n  out[15] = a[15];\n  return out;\n}\n\n/**\n * Copy the values from one mat4 to another\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the source matrix\n * @returns {mat4} out\n */\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  out[4] = a[4];\n  out[5] = a[5];\n  out[6] = a[6];\n  out[7] = a[7];\n  out[8] = a[8];\n  out[9] = a[9];\n  out[10] = a[10];\n  out[11] = a[11];\n  out[12] = a[12];\n  out[13] = a[13];\n  out[14] = a[14];\n  out[15] = a[15];\n  return out;\n}\n\n/**\n * Create a new mat4 with the given values\n *\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\n * @param {Number} m02 Component in column 0, row 2 position (index 2)\n * @param {Number} m03 Component in column 0, row 3 position (index 3)\n * @param {Number} m10 Component in column 1, row 0 position (index 4)\n * @param {Number} m11 Component in column 1, row 1 position (index 5)\n * @param {Number} m12 Component in column 1, row 2 position (index 6)\n * @param {Number} m13 Component in column 1, row 3 position (index 7)\n * @param {Number} m20 Component in column 2, row 0 position (index 8)\n * @param {Number} m21 Component in column 2, row 1 position (index 9)\n * @param {Number} m22 Component in column 2, row 2 position (index 10)\n * @param {Number} m23 Component in column 2, row 3 position (index 11)\n * @param {Number} m30 Component in column 3, row 0 position (index 12)\n * @param {Number} m31 Component in column 3, row 1 position (index 13)\n * @param {Number} m32 Component in column 3, row 2 position (index 14)\n * @param {Number} m33 Component in column 3, row 3 position (index 15)\n * @returns {mat4} A new mat4\n */\nexport function fromValues(m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33) {\n  let out = new glMatrix.ARRAY_TYPE(16);\n  out[0] = m00;\n  out[1] = m01;\n  out[2] = m02;\n  out[3] = m03;\n  out[4] = m10;\n  out[5] = m11;\n  out[6] = m12;\n  out[7] = m13;\n  out[8] = m20;\n  out[9] = m21;\n  out[10] = m22;\n  out[11] = m23;\n  out[12] = m30;\n  out[13] = m31;\n  out[14] = m32;\n  out[15] = m33;\n  return out;\n}\n\n/**\n * Set the components of a mat4 to the given values\n *\n * @param {mat4} out the receiving matrix\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\n * @param {Number} m02 Component in column 0, row 2 position (index 2)\n * @param {Number} m03 Component in column 0, row 3 position (index 3)\n * @param {Number} m10 Component in column 1, row 0 position (index 4)\n * @param {Number} m11 Component in column 1, row 1 position (index 5)\n * @param {Number} m12 Component in column 1, row 2 position (index 6)\n * @param {Number} m13 Component in column 1, row 3 position (index 7)\n * @param {Number} m20 Component in column 2, row 0 position (index 8)\n * @param {Number} m21 Component in column 2, row 1 position (index 9)\n * @param {Number} m22 Component in column 2, row 2 position (index 10)\n * @param {Number} m23 Component in column 2, row 3 position (index 11)\n * @param {Number} m30 Component in column 3, row 0 position (index 12)\n * @param {Number} m31 Component in column 3, row 1 position (index 13)\n * @param {Number} m32 Component in column 3, row 2 position (index 14)\n * @param {Number} m33 Component in column 3, row 3 position (index 15)\n * @returns {mat4} out\n */\nexport function set(out, m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33) {\n  out[0] = m00;\n  out[1] = m01;\n  out[2] = m02;\n  out[3] = m03;\n  out[4] = m10;\n  out[5] = m11;\n  out[6] = m12;\n  out[7] = m13;\n  out[8] = m20;\n  out[9] = m21;\n  out[10] = m22;\n  out[11] = m23;\n  out[12] = m30;\n  out[13] = m31;\n  out[14] = m32;\n  out[15] = m33;\n  return out;\n}\n\n\n/**\n * Set a mat4 to the identity matrix\n *\n * @param {mat4} out the receiving matrix\n * @returns {mat4} out\n */\nexport function identity(out) {\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = 1;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = 1;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n\n/**\n * Transpose the values of a mat4\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the source matrix\n * @returns {mat4} out\n */\nexport function transpose(out, a) {\n  // If we are transposing ourselves we can skip a few steps but have to cache some values\n  if (out === a) {\n    let a01 = a[1], a02 = a[2], a03 = a[3];\n    let a12 = a[6], a13 = a[7];\n    let a23 = a[11];\n\n    out[1] = a[4];\n    out[2] = a[8];\n    out[3] = a[12];\n    out[4] = a01;\n    out[6] = a[9];\n    out[7] = a[13];\n    out[8] = a02;\n    out[9] = a12;\n    out[11] = a[14];\n    out[12] = a03;\n    out[13] = a13;\n    out[14] = a23;\n  } else {\n    out[0] = a[0];\n    out[1] = a[4];\n    out[2] = a[8];\n    out[3] = a[12];\n    out[4] = a[1];\n    out[5] = a[5];\n    out[6] = a[9];\n    out[7] = a[13];\n    out[8] = a[2];\n    out[9] = a[6];\n    out[10] = a[10];\n    out[11] = a[14];\n    out[12] = a[3];\n    out[13] = a[7];\n    out[14] = a[11];\n    out[15] = a[15];\n  }\n\n  return out;\n}\n\n/**\n * Inverts a mat4\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the source matrix\n * @returns {mat4} out\n */\nexport function invert(out, a) {\n  let a00 = a[0], a01 = a[1], a02 = a[2], a03 = a[3];\n  let a10 = a[4], a11 = a[5], a12 = a[6], a13 = a[7];\n  let a20 = a[8], a21 = a[9], a22 = a[10], a23 = a[11];\n  let a30 = a[12], a31 = a[13], a32 = a[14], a33 = a[15];\n\n  let b00 = a00 * a11 - a01 * a10;\n  let b01 = a00 * a12 - a02 * a10;\n  let b02 = a00 * a13 - a03 * a10;\n  let b03 = a01 * a12 - a02 * a11;\n  let b04 = a01 * a13 - a03 * a11;\n  let b05 = a02 * a13 - a03 * a12;\n  let b06 = a20 * a31 - a21 * a30;\n  let b07 = a20 * a32 - a22 * a30;\n  let b08 = a20 * a33 - a23 * a30;\n  let b09 = a21 * a32 - a22 * a31;\n  let b10 = a21 * a33 - a23 * a31;\n  let b11 = a22 * a33 - a23 * a32;\n\n  // Calculate the determinant\n  let det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\n\n  if (!det) {\n    return null;\n  }\n  det = 1.0 / det;\n\n  out[0] = (a11 * b11 - a12 * b10 + a13 * b09) * det;\n  out[1] = (a02 * b10 - a01 * b11 - a03 * b09) * det;\n  out[2] = (a31 * b05 - a32 * b04 + a33 * b03) * det;\n  out[3] = (a22 * b04 - a21 * b05 - a23 * b03) * det;\n  out[4] = (a12 * b08 - a10 * b11 - a13 * b07) * det;\n  out[5] = (a00 * b11 - a02 * b08 + a03 * b07) * det;\n  out[6] = (a32 * b02 - a30 * b05 - a33 * b01) * det;\n  out[7] = (a20 * b05 - a22 * b02 + a23 * b01) * det;\n  out[8] = (a10 * b10 - a11 * b08 + a13 * b06) * det;\n  out[9] = (a01 * b08 - a00 * b10 - a03 * b06) * det;\n  out[10] = (a30 * b04 - a31 * b02 + a33 * b00) * det;\n  out[11] = (a21 * b02 - a20 * b04 - a23 * b00) * det;\n  out[12] = (a11 * b07 - a10 * b09 - a12 * b06) * det;\n  out[13] = (a00 * b09 - a01 * b07 + a02 * b06) * det;\n  out[14] = (a31 * b01 - a30 * b03 - a32 * b00) * det;\n  out[15] = (a20 * b03 - a21 * b01 + a22 * b00) * det;\n\n  return out;\n}\n\n/**\n * Calculates the adjugate of a mat4\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the source matrix\n * @returns {mat4} out\n */\nexport function adjoint(out, a) {\n  let a00 = a[0], a01 = a[1], a02 = a[2], a03 = a[3];\n  let a10 = a[4], a11 = a[5], a12 = a[6], a13 = a[7];\n  let a20 = a[8], a21 = a[9], a22 = a[10], a23 = a[11];\n  let a30 = a[12], a31 = a[13], a32 = a[14], a33 = a[15];\n\n  out[0]  =  (a11 * (a22 * a33 - a23 * a32) - a21 * (a12 * a33 - a13 * a32) + a31 * (a12 * a23 - a13 * a22));\n  out[1]  = -(a01 * (a22 * a33 - a23 * a32) - a21 * (a02 * a33 - a03 * a32) + a31 * (a02 * a23 - a03 * a22));\n  out[2]  =  (a01 * (a12 * a33 - a13 * a32) - a11 * (a02 * a33 - a03 * a32) + a31 * (a02 * a13 - a03 * a12));\n  out[3]  = -(a01 * (a12 * a23 - a13 * a22) - a11 * (a02 * a23 - a03 * a22) + a21 * (a02 * a13 - a03 * a12));\n  out[4]  = -(a10 * (a22 * a33 - a23 * a32) - a20 * (a12 * a33 - a13 * a32) + a30 * (a12 * a23 - a13 * a22));\n  out[5]  =  (a00 * (a22 * a33 - a23 * a32) - a20 * (a02 * a33 - a03 * a32) + a30 * (a02 * a23 - a03 * a22));\n  out[6]  = -(a00 * (a12 * a33 - a13 * a32) - a10 * (a02 * a33 - a03 * a32) + a30 * (a02 * a13 - a03 * a12));\n  out[7]  =  (a00 * (a12 * a23 - a13 * a22) - a10 * (a02 * a23 - a03 * a22) + a20 * (a02 * a13 - a03 * a12));\n  out[8]  =  (a10 * (a21 * a33 - a23 * a31) - a20 * (a11 * a33 - a13 * a31) + a30 * (a11 * a23 - a13 * a21));\n  out[9]  = -(a00 * (a21 * a33 - a23 * a31) - a20 * (a01 * a33 - a03 * a31) + a30 * (a01 * a23 - a03 * a21));\n  out[10] =  (a00 * (a11 * a33 - a13 * a31) - a10 * (a01 * a33 - a03 * a31) + a30 * (a01 * a13 - a03 * a11));\n  out[11] = -(a00 * (a11 * a23 - a13 * a21) - a10 * (a01 * a23 - a03 * a21) + a20 * (a01 * a13 - a03 * a11));\n  out[12] = -(a10 * (a21 * a32 - a22 * a31) - a20 * (a11 * a32 - a12 * a31) + a30 * (a11 * a22 - a12 * a21));\n  out[13] =  (a00 * (a21 * a32 - a22 * a31) - a20 * (a01 * a32 - a02 * a31) + a30 * (a01 * a22 - a02 * a21));\n  out[14] = -(a00 * (a11 * a32 - a12 * a31) - a10 * (a01 * a32 - a02 * a31) + a30 * (a01 * a12 - a02 * a11));\n  out[15] =  (a00 * (a11 * a22 - a12 * a21) - a10 * (a01 * a22 - a02 * a21) + a20 * (a01 * a12 - a02 * a11));\n  return out;\n}\n\n/**\n * Calculates the determinant of a mat4\n *\n * @param {mat4} a the source matrix\n * @returns {Number} determinant of a\n */\nexport function determinant(a) {\n  let a00 = a[0], a01 = a[1], a02 = a[2], a03 = a[3];\n  let a10 = a[4], a11 = a[5], a12 = a[6], a13 = a[7];\n  let a20 = a[8], a21 = a[9], a22 = a[10], a23 = a[11];\n  let a30 = a[12], a31 = a[13], a32 = a[14], a33 = a[15];\n\n  let b00 = a00 * a11 - a01 * a10;\n  let b01 = a00 * a12 - a02 * a10;\n  let b02 = a00 * a13 - a03 * a10;\n  let b03 = a01 * a12 - a02 * a11;\n  let b04 = a01 * a13 - a03 * a11;\n  let b05 = a02 * a13 - a03 * a12;\n  let b06 = a20 * a31 - a21 * a30;\n  let b07 = a20 * a32 - a22 * a30;\n  let b08 = a20 * a33 - a23 * a30;\n  let b09 = a21 * a32 - a22 * a31;\n  let b10 = a21 * a33 - a23 * a31;\n  let b11 = a22 * a33 - a23 * a32;\n\n  // Calculate the determinant\n  return b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\n}\n\n/**\n * Multiplies two mat4s\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the first operand\n * @param {mat4} b the second operand\n * @returns {mat4} out\n */\nexport function multiply(out, a, b) {\n  let a00 = a[0], a01 = a[1], a02 = a[2], a03 = a[3];\n  let a10 = a[4], a11 = a[5], a12 = a[6], a13 = a[7];\n  let a20 = a[8], a21 = a[9], a22 = a[10], a23 = a[11];\n  let a30 = a[12], a31 = a[13], a32 = a[14], a33 = a[15];\n\n  // Cache only the current line of the second matrix\n  let b0  = b[0], b1 = b[1], b2 = b[2], b3 = b[3];\n  out[0] = b0*a00 + b1*a10 + b2*a20 + b3*a30;\n  out[1] = b0*a01 + b1*a11 + b2*a21 + b3*a31;\n  out[2] = b0*a02 + b1*a12 + b2*a22 + b3*a32;\n  out[3] = b0*a03 + b1*a13 + b2*a23 + b3*a33;\n\n  b0 = b[4]; b1 = b[5]; b2 = b[6]; b3 = b[7];\n  out[4] = b0*a00 + b1*a10 + b2*a20 + b3*a30;\n  out[5] = b0*a01 + b1*a11 + b2*a21 + b3*a31;\n  out[6] = b0*a02 + b1*a12 + b2*a22 + b3*a32;\n  out[7] = b0*a03 + b1*a13 + b2*a23 + b3*a33;\n\n  b0 = b[8]; b1 = b[9]; b2 = b[10]; b3 = b[11];\n  out[8] = b0*a00 + b1*a10 + b2*a20 + b3*a30;\n  out[9] = b0*a01 + b1*a11 + b2*a21 + b3*a31;\n  out[10] = b0*a02 + b1*a12 + b2*a22 + b3*a32;\n  out[11] = b0*a03 + b1*a13 + b2*a23 + b3*a33;\n\n  b0 = b[12]; b1 = b[13]; b2 = b[14]; b3 = b[15];\n  out[12] = b0*a00 + b1*a10 + b2*a20 + b3*a30;\n  out[13] = b0*a01 + b1*a11 + b2*a21 + b3*a31;\n  out[14] = b0*a02 + b1*a12 + b2*a22 + b3*a32;\n  out[15] = b0*a03 + b1*a13 + b2*a23 + b3*a33;\n  return out;\n}\n\n/**\n * Translate a mat4 by the given vector\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the matrix to translate\n * @param {vec3} v vector to translate by\n * @returns {mat4} out\n */\nexport function translate(out, a, v) {\n  let x = v[0], y = v[1], z = v[2];\n  let a00, a01, a02, a03;\n  let a10, a11, a12, a13;\n  let a20, a21, a22, a23;\n\n  if (a === out) {\n    out[12] = a[0] * x + a[4] * y + a[8] * z + a[12];\n    out[13] = a[1] * x + a[5] * y + a[9] * z + a[13];\n    out[14] = a[2] * x + a[6] * y + a[10] * z + a[14];\n    out[15] = a[3] * x + a[7] * y + a[11] * z + a[15];\n  } else {\n    a00 = a[0]; a01 = a[1]; a02 = a[2]; a03 = a[3];\n    a10 = a[4]; a11 = a[5]; a12 = a[6]; a13 = a[7];\n    a20 = a[8]; a21 = a[9]; a22 = a[10]; a23 = a[11];\n\n    out[0] = a00; out[1] = a01; out[2] = a02; out[3] = a03;\n    out[4] = a10; out[5] = a11; out[6] = a12; out[7] = a13;\n    out[8] = a20; out[9] = a21; out[10] = a22; out[11] = a23;\n\n    out[12] = a00 * x + a10 * y + a20 * z + a[12];\n    out[13] = a01 * x + a11 * y + a21 * z + a[13];\n    out[14] = a02 * x + a12 * y + a22 * z + a[14];\n    out[15] = a03 * x + a13 * y + a23 * z + a[15];\n  }\n\n  return out;\n}\n\n/**\n * Scales the mat4 by the dimensions in the given vec3 not using vectorization\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the matrix to scale\n * @param {vec3} v the vec3 to scale the matrix by\n * @returns {mat4} out\n **/\nexport function scale(out, a, v) {\n  let x = v[0], y = v[1], z = v[2];\n\n  out[0] = a[0] * x;\n  out[1] = a[1] * x;\n  out[2] = a[2] * x;\n  out[3] = a[3] * x;\n  out[4] = a[4] * y;\n  out[5] = a[5] * y;\n  out[6] = a[6] * y;\n  out[7] = a[7] * y;\n  out[8] = a[8] * z;\n  out[9] = a[9] * z;\n  out[10] = a[10] * z;\n  out[11] = a[11] * z;\n  out[12] = a[12];\n  out[13] = a[13];\n  out[14] = a[14];\n  out[15] = a[15];\n  return out;\n}\n\n/**\n * Rotates a mat4 by the given angle around the given axis\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @param {vec3} axis the axis to rotate around\n * @returns {mat4} out\n */\nexport function rotate(out, a, rad, axis) {\n  let x = axis[0], y = axis[1], z = axis[2];\n  let len = Math.sqrt(x * x + y * y + z * z);\n  let s, c, t;\n  let a00, a01, a02, a03;\n  let a10, a11, a12, a13;\n  let a20, a21, a22, a23;\n  let b00, b01, b02;\n  let b10, b11, b12;\n  let b20, b21, b22;\n\n  if (len < glMatrix.EPSILON) { return null; }\n\n  len = 1 / len;\n  x *= len;\n  y *= len;\n  z *= len;\n\n  s = Math.sin(rad);\n  c = Math.cos(rad);\n  t = 1 - c;\n\n  a00 = a[0]; a01 = a[1]; a02 = a[2]; a03 = a[3];\n  a10 = a[4]; a11 = a[5]; a12 = a[6]; a13 = a[7];\n  a20 = a[8]; a21 = a[9]; a22 = a[10]; a23 = a[11];\n\n  // Construct the elements of the rotation matrix\n  b00 = x * x * t + c; b01 = y * x * t + z * s; b02 = z * x * t - y * s;\n  b10 = x * y * t - z * s; b11 = y * y * t + c; b12 = z * y * t + x * s;\n  b20 = x * z * t + y * s; b21 = y * z * t - x * s; b22 = z * z * t + c;\n\n  // Perform rotation-specific matrix multiplication\n  out[0] = a00 * b00 + a10 * b01 + a20 * b02;\n  out[1] = a01 * b00 + a11 * b01 + a21 * b02;\n  out[2] = a02 * b00 + a12 * b01 + a22 * b02;\n  out[3] = a03 * b00 + a13 * b01 + a23 * b02;\n  out[4] = a00 * b10 + a10 * b11 + a20 * b12;\n  out[5] = a01 * b10 + a11 * b11 + a21 * b12;\n  out[6] = a02 * b10 + a12 * b11 + a22 * b12;\n  out[7] = a03 * b10 + a13 * b11 + a23 * b12;\n  out[8] = a00 * b20 + a10 * b21 + a20 * b22;\n  out[9] = a01 * b20 + a11 * b21 + a21 * b22;\n  out[10] = a02 * b20 + a12 * b21 + a22 * b22;\n  out[11] = a03 * b20 + a13 * b21 + a23 * b22;\n\n  if (a !== out) { // If the source and destination differ, copy the unchanged last row\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n  }\n  return out;\n}\n\n/**\n * Rotates a matrix by the given angle around the X axis\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\nexport function rotateX(out, a, rad) {\n  let s = Math.sin(rad);\n  let c = Math.cos(rad);\n  let a10 = a[4];\n  let a11 = a[5];\n  let a12 = a[6];\n  let a13 = a[7];\n  let a20 = a[8];\n  let a21 = a[9];\n  let a22 = a[10];\n  let a23 = a[11];\n\n  if (a !== out) { // If the source and destination differ, copy the unchanged rows\n    out[0]  = a[0];\n    out[1]  = a[1];\n    out[2]  = a[2];\n    out[3]  = a[3];\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n  }\n\n  // Perform axis-specific matrix multiplication\n  out[4] = a10 * c + a20 * s;\n  out[5] = a11 * c + a21 * s;\n  out[6] = a12 * c + a22 * s;\n  out[7] = a13 * c + a23 * s;\n  out[8] = a20 * c - a10 * s;\n  out[9] = a21 * c - a11 * s;\n  out[10] = a22 * c - a12 * s;\n  out[11] = a23 * c - a13 * s;\n  return out;\n}\n\n/**\n * Rotates a matrix by the given angle around the Y axis\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\nexport function rotateY(out, a, rad) {\n  let s = Math.sin(rad);\n  let c = Math.cos(rad);\n  let a00 = a[0];\n  let a01 = a[1];\n  let a02 = a[2];\n  let a03 = a[3];\n  let a20 = a[8];\n  let a21 = a[9];\n  let a22 = a[10];\n  let a23 = a[11];\n\n  if (a !== out) { // If the source and destination differ, copy the unchanged rows\n    out[4]  = a[4];\n    out[5]  = a[5];\n    out[6]  = a[6];\n    out[7]  = a[7];\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n  }\n\n  // Perform axis-specific matrix multiplication\n  out[0] = a00 * c - a20 * s;\n  out[1] = a01 * c - a21 * s;\n  out[2] = a02 * c - a22 * s;\n  out[3] = a03 * c - a23 * s;\n  out[8] = a00 * s + a20 * c;\n  out[9] = a01 * s + a21 * c;\n  out[10] = a02 * s + a22 * c;\n  out[11] = a03 * s + a23 * c;\n  return out;\n}\n\n/**\n * Rotates a matrix by the given angle around the Z axis\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\nexport function rotateZ(out, a, rad) {\n  let s = Math.sin(rad);\n  let c = Math.cos(rad);\n  let a00 = a[0];\n  let a01 = a[1];\n  let a02 = a[2];\n  let a03 = a[3];\n  let a10 = a[4];\n  let a11 = a[5];\n  let a12 = a[6];\n  let a13 = a[7];\n\n  if (a !== out) { // If the source and destination differ, copy the unchanged last row\n    out[8]  = a[8];\n    out[9]  = a[9];\n    out[10] = a[10];\n    out[11] = a[11];\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n  }\n\n  // Perform axis-specific matrix multiplication\n  out[0] = a00 * c + a10 * s;\n  out[1] = a01 * c + a11 * s;\n  out[2] = a02 * c + a12 * s;\n  out[3] = a03 * c + a13 * s;\n  out[4] = a10 * c - a00 * s;\n  out[5] = a11 * c - a01 * s;\n  out[6] = a12 * c - a02 * s;\n  out[7] = a13 * c - a03 * s;\n  return out;\n}\n\n/**\n * Creates a matrix from a vector translation\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.translate(dest, dest, vec);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {vec3} v Translation vector\n * @returns {mat4} out\n */\nexport function fromTranslation(out, v) {\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = 1;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = 1;\n  out[11] = 0;\n  out[12] = v[0];\n  out[13] = v[1];\n  out[14] = v[2];\n  out[15] = 1;\n  return out;\n}\n\n/**\n * Creates a matrix from a vector scaling\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.scale(dest, dest, vec);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {vec3} v Scaling vector\n * @returns {mat4} out\n */\nexport function fromScaling(out, v) {\n  out[0] = v[0];\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = v[1];\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = v[2];\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n\n/**\n * Creates a matrix from a given angle around a given axis\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.rotate(dest, dest, rad, axis);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {Number} rad the angle to rotate the matrix by\n * @param {vec3} axis the axis to rotate around\n * @returns {mat4} out\n */\nexport function fromRotation(out, rad, axis) {\n  let x = axis[0], y = axis[1], z = axis[2];\n  let len = Math.sqrt(x * x + y * y + z * z);\n  let s, c, t;\n\n  if (len < glMatrix.EPSILON) { return null; }\n\n  len = 1 / len;\n  x *= len;\n  y *= len;\n  z *= len;\n\n  s = Math.sin(rad);\n  c = Math.cos(rad);\n  t = 1 - c;\n\n  // Perform rotation-specific matrix multiplication\n  out[0] = x * x * t + c;\n  out[1] = y * x * t + z * s;\n  out[2] = z * x * t - y * s;\n  out[3] = 0;\n  out[4] = x * y * t - z * s;\n  out[5] = y * y * t + c;\n  out[6] = z * y * t + x * s;\n  out[7] = 0;\n  out[8] = x * z * t + y * s;\n  out[9] = y * z * t - x * s;\n  out[10] = z * z * t + c;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n\n/**\n * Creates a matrix from the given angle around the X axis\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.rotateX(dest, dest, rad);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\nexport function fromXRotation(out, rad) {\n  let s = Math.sin(rad);\n  let c = Math.cos(rad);\n\n  // Perform axis-specific matrix multiplication\n  out[0]  = 1;\n  out[1]  = 0;\n  out[2]  = 0;\n  out[3]  = 0;\n  out[4] = 0;\n  out[5] = c;\n  out[6] = s;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = -s;\n  out[10] = c;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n\n/**\n * Creates a matrix from the given angle around the Y axis\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.rotateY(dest, dest, rad);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\nexport function fromYRotation(out, rad) {\n  let s = Math.sin(rad);\n  let c = Math.cos(rad);\n\n  // Perform axis-specific matrix multiplication\n  out[0]  = c;\n  out[1]  = 0;\n  out[2]  = -s;\n  out[3]  = 0;\n  out[4] = 0;\n  out[5] = 1;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = s;\n  out[9] = 0;\n  out[10] = c;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n\n/**\n * Creates a matrix from the given angle around the Z axis\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.rotateZ(dest, dest, rad);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\nexport function fromZRotation(out, rad) {\n  let s = Math.sin(rad);\n  let c = Math.cos(rad);\n\n  // Perform axis-specific matrix multiplication\n  out[0]  = c;\n  out[1]  = s;\n  out[2]  = 0;\n  out[3]  = 0;\n  out[4] = -s;\n  out[5] = c;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = 1;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n\n/**\n * Creates a matrix from a quaternion rotation and vector translation\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.translate(dest, vec);\n *     let quatMat = mat4.create();\n *     quat4.toMat4(quat, quatMat);\n *     mat4.multiply(dest, quatMat);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {quat4} q Rotation quaternion\n * @param {vec3} v Translation vector\n * @returns {mat4} out\n */\nexport function fromRotationTranslation(out, q, v) {\n  // Quaternion math\n  let x = q[0], y = q[1], z = q[2], w = q[3];\n  let x2 = x + x;\n  let y2 = y + y;\n  let z2 = z + z;\n\n  let xx = x * x2;\n  let xy = x * y2;\n  let xz = x * z2;\n  let yy = y * y2;\n  let yz = y * z2;\n  let zz = z * z2;\n  let wx = w * x2;\n  let wy = w * y2;\n  let wz = w * z2;\n\n  out[0] = 1 - (yy + zz);\n  out[1] = xy + wz;\n  out[2] = xz - wy;\n  out[3] = 0;\n  out[4] = xy - wz;\n  out[5] = 1 - (xx + zz);\n  out[6] = yz + wx;\n  out[7] = 0;\n  out[8] = xz + wy;\n  out[9] = yz - wx;\n  out[10] = 1 - (xx + yy);\n  out[11] = 0;\n  out[12] = v[0];\n  out[13] = v[1];\n  out[14] = v[2];\n  out[15] = 1;\n\n  return out;\n}\n\n/**\n * Creates a new mat4 from a dual quat.\n *\n * @param {mat4} out Matrix\n * @param {quat2} a Dual Quaternion\n * @returns {mat4} mat4 receiving operation result\n */\nexport function fromQuat2(out, a) {\n  let translation = new glMatrix.ARRAY_TYPE(3);\n  let bx = -a[0], by = -a[1], bz = -a[2], bw = a[3],\n  ax = a[4], ay = a[5], az = a[6], aw = a[7];\n\n  let magnitude = bx * bx + by * by + bz * bz + bw * bw;\n  //Only scale if it makes sense\n  if (magnitude > 0) {\n    translation[0] = (ax * bw + aw * bx + ay * bz - az * by) * 2 / magnitude;\n    translation[1] = (ay * bw + aw * by + az * bx - ax * bz) * 2 / magnitude;\n    translation[2] = (az * bw + aw * bz + ax * by - ay * bx) * 2 / magnitude;\n  } else {\n    translation[0] = (ax * bw + aw * bx + ay * bz - az * by) * 2;\n    translation[1] = (ay * bw + aw * by + az * bx - ax * bz) * 2;\n    translation[2] = (az * bw + aw * bz + ax * by - ay * bx) * 2;\n  }\n  fromRotationTranslation(out, a, translation);\n  return out;\n}\n\n/**\n * Returns the translation vector component of a transformation\n *  matrix. If a matrix is built with fromRotationTranslation,\n *  the returned vector will be the same as the translation vector\n *  originally supplied.\n * @param  {vec3} out Vector to receive translation component\n * @param  {mat4} mat Matrix to be decomposed (input)\n * @return {vec3} out\n */\nexport function getTranslation(out, mat) {\n  out[0] = mat[12];\n  out[1] = mat[13];\n  out[2] = mat[14];\n\n  return out;\n}\n\n/**\n * Returns the scaling factor component of a transformation\n *  matrix. If a matrix is built with fromRotationTranslationScale\n *  with a normalized Quaternion paramter, the returned vector will be\n *  the same as the scaling vector\n *  originally supplied.\n * @param  {vec3} out Vector to receive scaling factor component\n * @param  {mat4} mat Matrix to be decomposed (input)\n * @return {vec3} out\n */\nexport function getScaling(out, mat) {\n  let m11 = mat[0];\n  let m12 = mat[1];\n  let m13 = mat[2];\n  let m21 = mat[4];\n  let m22 = mat[5];\n  let m23 = mat[6];\n  let m31 = mat[8];\n  let m32 = mat[9];\n  let m33 = mat[10];\n\n  out[0] = Math.sqrt(m11 * m11 + m12 * m12 + m13 * m13);\n  out[1] = Math.sqrt(m21 * m21 + m22 * m22 + m23 * m23);\n  out[2] = Math.sqrt(m31 * m31 + m32 * m32 + m33 * m33);\n\n  return out;\n}\n\n/**\n * Returns a quaternion representing the rotational component\n *  of a transformation matrix. If a matrix is built with\n *  fromRotationTranslation, the returned quaternion will be the\n *  same as the quaternion originally supplied.\n * @param {quat} out Quaternion to receive the rotation component\n * @param {mat4} mat Matrix to be decomposed (input)\n * @return {quat} out\n */\nexport function getRotation(out, mat) {\n  // Algorithm taken from http://www.euclideanspace.com/maths/geometry/rotations/conversions/matrixToQuaternion/index.htm\n  let trace = mat[0] + mat[5] + mat[10];\n  let S = 0;\n\n  if (trace > 0) {\n    S = Math.sqrt(trace + 1.0) * 2;\n    out[3] = 0.25 * S;\n    out[0] = (mat[6] - mat[9]) / S;\n    out[1] = (mat[8] - mat[2]) / S;\n    out[2] = (mat[1] - mat[4]) / S;\n  } else if ((mat[0] > mat[5]) && (mat[0] > mat[10])) {\n    S = Math.sqrt(1.0 + mat[0] - mat[5] - mat[10]) * 2;\n    out[3] = (mat[6] - mat[9]) / S;\n    out[0] = 0.25 * S;\n    out[1] = (mat[1] + mat[4]) / S;\n    out[2] = (mat[8] + mat[2]) / S;\n  } else if (mat[5] > mat[10]) {\n    S = Math.sqrt(1.0 + mat[5] - mat[0] - mat[10]) * 2;\n    out[3] = (mat[8] - mat[2]) / S;\n    out[0] = (mat[1] + mat[4]) / S;\n    out[1] = 0.25 * S;\n    out[2] = (mat[6] + mat[9]) / S;\n  } else {\n    S = Math.sqrt(1.0 + mat[10] - mat[0] - mat[5]) * 2;\n    out[3] = (mat[1] - mat[4]) / S;\n    out[0] = (mat[8] + mat[2]) / S;\n    out[1] = (mat[6] + mat[9]) / S;\n    out[2] = 0.25 * S;\n  }\n\n  return out;\n}\n\n/**\n * Creates a matrix from a quaternion rotation, vector translation and vector scale\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.translate(dest, vec);\n *     let quatMat = mat4.create();\n *     quat4.toMat4(quat, quatMat);\n *     mat4.multiply(dest, quatMat);\n *     mat4.scale(dest, scale)\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {quat4} q Rotation quaternion\n * @param {vec3} v Translation vector\n * @param {vec3} s Scaling vector\n * @returns {mat4} out\n */\nexport function fromRotationTranslationScale(out, q, v, s) {\n  // Quaternion math\n  let x = q[0], y = q[1], z = q[2], w = q[3];\n  let x2 = x + x;\n  let y2 = y + y;\n  let z2 = z + z;\n\n  let xx = x * x2;\n  let xy = x * y2;\n  let xz = x * z2;\n  let yy = y * y2;\n  let yz = y * z2;\n  let zz = z * z2;\n  let wx = w * x2;\n  let wy = w * y2;\n  let wz = w * z2;\n  let sx = s[0];\n  let sy = s[1];\n  let sz = s[2];\n\n  out[0] = (1 - (yy + zz)) * sx;\n  out[1] = (xy + wz) * sx;\n  out[2] = (xz - wy) * sx;\n  out[3] = 0;\n  out[4] = (xy - wz) * sy;\n  out[5] = (1 - (xx + zz)) * sy;\n  out[6] = (yz + wx) * sy;\n  out[7] = 0;\n  out[8] = (xz + wy) * sz;\n  out[9] = (yz - wx) * sz;\n  out[10] = (1 - (xx + yy)) * sz;\n  out[11] = 0;\n  out[12] = v[0];\n  out[13] = v[1];\n  out[14] = v[2];\n  out[15] = 1;\n\n  return out;\n}\n\n/**\n * Creates a matrix from a quaternion rotation, vector translation and vector scale, rotating and scaling around the given origin\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.translate(dest, vec);\n *     mat4.translate(dest, origin);\n *     let quatMat = mat4.create();\n *     quat4.toMat4(quat, quatMat);\n *     mat4.multiply(dest, quatMat);\n *     mat4.scale(dest, scale)\n *     mat4.translate(dest, negativeOrigin);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {quat4} q Rotation quaternion\n * @param {vec3} v Translation vector\n * @param {vec3} s Scaling vector\n * @param {vec3} o The origin vector around which to scale and rotate\n * @returns {mat4} out\n */\nexport function fromRotationTranslationScaleOrigin(out, q, v, s, o) {\n  // Quaternion math\n  let x = q[0], y = q[1], z = q[2], w = q[3];\n  let x2 = x + x;\n  let y2 = y + y;\n  let z2 = z + z;\n\n  let xx = x * x2;\n  let xy = x * y2;\n  let xz = x * z2;\n  let yy = y * y2;\n  let yz = y * z2;\n  let zz = z * z2;\n  let wx = w * x2;\n  let wy = w * y2;\n  let wz = w * z2;\n\n  let sx = s[0];\n  let sy = s[1];\n  let sz = s[2];\n\n  let ox = o[0];\n  let oy = o[1];\n  let oz = o[2];\n\n  let out0 = (1 - (yy + zz)) * sx;\n  let out1 = (xy + wz) * sx;\n  let out2 = (xz - wy) * sx;\n  let out4 = (xy - wz) * sy;\n  let out5 = (1 - (xx + zz)) * sy;\n  let out6 = (yz + wx) * sy;\n  let out8 = (xz + wy) * sz;\n  let out9 = (yz - wx) * sz;\n  let out10 = (1 - (xx + yy)) * sz;\n\n  out[0] = out0;\n  out[1] = out1;\n  out[2] = out2;\n  out[3] = 0;\n  out[4] = out4;\n  out[5] = out5;\n  out[6] = out6;\n  out[7] = 0;\n  out[8] = out8;\n  out[9] = out9;\n  out[10] = out10;\n  out[11] = 0;\n  out[12] = v[0] + ox - (out0 * ox + out4 * oy + out8 * oz);\n  out[13] = v[1] + oy - (out1 * ox + out5 * oy + out9 * oz);\n  out[14] = v[2] + oz - (out2 * ox + out6 * oy + out10 * oz);\n  out[15] = 1;\n\n  return out;\n}\n\n/**\n * Calculates a 4x4 matrix from the given quaternion\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {quat} q Quaternion to create matrix from\n *\n * @returns {mat4} out\n */\nexport function fromQuat(out, q) {\n  let x = q[0], y = q[1], z = q[2], w = q[3];\n  let x2 = x + x;\n  let y2 = y + y;\n  let z2 = z + z;\n\n  let xx = x * x2;\n  let yx = y * x2;\n  let yy = y * y2;\n  let zx = z * x2;\n  let zy = z * y2;\n  let zz = z * z2;\n  let wx = w * x2;\n  let wy = w * y2;\n  let wz = w * z2;\n\n  out[0] = 1 - yy - zz;\n  out[1] = yx + wz;\n  out[2] = zx - wy;\n  out[3] = 0;\n\n  out[4] = yx - wz;\n  out[5] = 1 - xx - zz;\n  out[6] = zy + wx;\n  out[7] = 0;\n\n  out[8] = zx + wy;\n  out[9] = zy - wx;\n  out[10] = 1 - xx - yy;\n  out[11] = 0;\n\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n\n  return out;\n}\n\n/**\n * Generates a frustum matrix with the given bounds\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {Number} left Left bound of the frustum\n * @param {Number} right Right bound of the frustum\n * @param {Number} bottom Bottom bound of the frustum\n * @param {Number} top Top bound of the frustum\n * @param {Number} near Near bound of the frustum\n * @param {Number} far Far bound of the frustum\n * @returns {mat4} out\n */\nexport function frustum(out, left, right, bottom, top, near, far) {\n  let rl = 1 / (right - left);\n  let tb = 1 / (top - bottom);\n  let nf = 1 / (near - far);\n  out[0] = (near * 2) * rl;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = (near * 2) * tb;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = (right + left) * rl;\n  out[9] = (top + bottom) * tb;\n  out[10] = (far + near) * nf;\n  out[11] = -1;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = (far * near * 2) * nf;\n  out[15] = 0;\n  return out;\n}\n\n/**\n * Generates a perspective projection matrix with the given bounds\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {number} fovy Vertical field of view in radians\n * @param {number} aspect Aspect ratio. typically viewport width/height\n * @param {number} near Near bound of the frustum\n * @param {number} far Far bound of the frustum\n * @returns {mat4} out\n */\nexport function perspective(out, fovy, aspect, near, far) {\n  let f = 1.0 / Math.tan(fovy / 2);\n  let nf = 1 / (near - far);\n  out[0] = f / aspect;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = f;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = (far + near) * nf;\n  out[11] = -1;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = (2 * far * near) * nf;\n  out[15] = 0;\n  return out;\n}\n\n/**\n * Generates a perspective projection matrix with the given field of view.\n * This is primarily useful for generating projection matrices to be used\n * with the still experiemental WebVR API.\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {Object} fov Object containing the following values: upDegrees, downDegrees, leftDegrees, rightDegrees\n * @param {number} near Near bound of the frustum\n * @param {number} far Far bound of the frustum\n * @returns {mat4} out\n */\nexport function perspectiveFromFieldOfView(out, fov, near, far) {\n  let upTan = Math.tan(fov.upDegrees * Math.PI/180.0);\n  let downTan = Math.tan(fov.downDegrees * Math.PI/180.0);\n  let leftTan = Math.tan(fov.leftDegrees * Math.PI/180.0);\n  let rightTan = Math.tan(fov.rightDegrees * Math.PI/180.0);\n  let xScale = 2.0 / (leftTan + rightTan);\n  let yScale = 2.0 / (upTan + downTan);\n\n  out[0] = xScale;\n  out[1] = 0.0;\n  out[2] = 0.0;\n  out[3] = 0.0;\n  out[4] = 0.0;\n  out[5] = yScale;\n  out[6] = 0.0;\n  out[7] = 0.0;\n  out[8] = -((leftTan - rightTan) * xScale * 0.5);\n  out[9] = ((upTan - downTan) * yScale * 0.5);\n  out[10] = far / (near - far);\n  out[11] = -1.0;\n  out[12] = 0.0;\n  out[13] = 0.0;\n  out[14] = (far * near) / (near - far);\n  out[15] = 0.0;\n  return out;\n}\n\n/**\n * Generates a orthogonal projection matrix with the given bounds\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {number} left Left bound of the frustum\n * @param {number} right Right bound of the frustum\n * @param {number} bottom Bottom bound of the frustum\n * @param {number} top Top bound of the frustum\n * @param {number} near Near bound of the frustum\n * @param {number} far Far bound of the frustum\n * @returns {mat4} out\n */\nexport function ortho(out, left, right, bottom, top, near, far) {\n  let lr = 1 / (left - right);\n  let bt = 1 / (bottom - top);\n  let nf = 1 / (near - far);\n  out[0] = -2 * lr;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = -2 * bt;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = 2 * nf;\n  out[11] = 0;\n  out[12] = (left + right) * lr;\n  out[13] = (top + bottom) * bt;\n  out[14] = (far + near) * nf;\n  out[15] = 1;\n  return out;\n}\n\n/**\n * Generates a look-at matrix with the given eye position, focal point, and up axis.\n * If you want a matrix that actually makes an object look at another object, you should use targetTo instead.\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {vec3} eye Position of the viewer\n * @param {vec3} center Point the viewer is looking at\n * @param {vec3} up vec3 pointing up\n * @returns {mat4} out\n */\nexport function lookAt(out, eye, center, up) {\n  let x0, x1, x2, y0, y1, y2, z0, z1, z2, len;\n  let eyex = eye[0];\n  let eyey = eye[1];\n  let eyez = eye[2];\n  let upx = up[0];\n  let upy = up[1];\n  let upz = up[2];\n  let centerx = center[0];\n  let centery = center[1];\n  let centerz = center[2];\n\n  if (Math.abs(eyex - centerx) < glMatrix.EPSILON &&\n      Math.abs(eyey - centery) < glMatrix.EPSILON &&\n      Math.abs(eyez - centerz) < glMatrix.EPSILON) {\n    return identity(out);\n  }\n\n  z0 = eyex - centerx;\n  z1 = eyey - centery;\n  z2 = eyez - centerz;\n\n  len = 1 / Math.sqrt(z0 * z0 + z1 * z1 + z2 * z2);\n  z0 *= len;\n  z1 *= len;\n  z2 *= len;\n\n  x0 = upy * z2 - upz * z1;\n  x1 = upz * z0 - upx * z2;\n  x2 = upx * z1 - upy * z0;\n  len = Math.sqrt(x0 * x0 + x1 * x1 + x2 * x2);\n  if (!len) {\n    x0 = 0;\n    x1 = 0;\n    x2 = 0;\n  } else {\n    len = 1 / len;\n    x0 *= len;\n    x1 *= len;\n    x2 *= len;\n  }\n\n  y0 = z1 * x2 - z2 * x1;\n  y1 = z2 * x0 - z0 * x2;\n  y2 = z0 * x1 - z1 * x0;\n\n  len = Math.sqrt(y0 * y0 + y1 * y1 + y2 * y2);\n  if (!len) {\n    y0 = 0;\n    y1 = 0;\n    y2 = 0;\n  } else {\n    len = 1 / len;\n    y0 *= len;\n    y1 *= len;\n    y2 *= len;\n  }\n\n  out[0] = x0;\n  out[1] = y0;\n  out[2] = z0;\n  out[3] = 0;\n  out[4] = x1;\n  out[5] = y1;\n  out[6] = z1;\n  out[7] = 0;\n  out[8] = x2;\n  out[9] = y2;\n  out[10] = z2;\n  out[11] = 0;\n  out[12] = -(x0 * eyex + x1 * eyey + x2 * eyez);\n  out[13] = -(y0 * eyex + y1 * eyey + y2 * eyez);\n  out[14] = -(z0 * eyex + z1 * eyey + z2 * eyez);\n  out[15] = 1;\n\n  return out;\n}\n\n/**\n * Generates a matrix that makes something look at something else.\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {vec3} eye Position of the viewer\n * @param {vec3} center Point the viewer is looking at\n * @param {vec3} up vec3 pointing up\n * @returns {mat4} out\n */\nexport function targetTo(out, eye, target, up) {\n  let eyex = eye[0],\n      eyey = eye[1],\n      eyez = eye[2],\n      upx = up[0],\n      upy = up[1],\n      upz = up[2];\n\n  let z0 = eyex - target[0],\n      z1 = eyey - target[1],\n      z2 = eyez - target[2];\n\n  let len = z0*z0 + z1*z1 + z2*z2;\n  if (len > 0) {\n    len = 1 / Math.sqrt(len);\n    z0 *= len;\n    z1 *= len;\n    z2 *= len;\n  }\n\n  let x0 = upy * z2 - upz * z1,\n      x1 = upz * z0 - upx * z2,\n      x2 = upx * z1 - upy * z0;\n\n  len = x0*x0 + x1*x1 + x2*x2;\n  if (len > 0) {\n    len = 1 / Math.sqrt(len);\n    x0 *= len;\n    x1 *= len;\n    x2 *= len;\n  }\n\n  out[0] = x0;\n  out[1] = x1;\n  out[2] = x2;\n  out[3] = 0;\n  out[4] = z1 * x2 - z2 * x1;\n  out[5] = z2 * x0 - z0 * x2;\n  out[6] = z0 * x1 - z1 * x0;\n  out[7] = 0;\n  out[8] = z0;\n  out[9] = z1;\n  out[10] = z2;\n  out[11] = 0;\n  out[12] = eyex;\n  out[13] = eyey;\n  out[14] = eyez;\n  out[15] = 1;\n  return out;\n};\n\n/**\n * Returns a string representation of a mat4\n *\n * @param {mat4} a matrix to represent as a string\n * @returns {String} string representation of the matrix\n */\nexport function str(a) {\n  return 'mat4(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' + a[3] + ', ' +\n          a[4] + ', ' + a[5] + ', ' + a[6] + ', ' + a[7] + ', ' +\n          a[8] + ', ' + a[9] + ', ' + a[10] + ', ' + a[11] + ', ' +\n          a[12] + ', ' + a[13] + ', ' + a[14] + ', ' + a[15] + ')';\n}\n\n/**\n * Returns Frobenius norm of a mat4\n *\n * @param {mat4} a the matrix to calculate Frobenius norm of\n * @returns {Number} Frobenius norm\n */\nexport function frob(a) {\n  return(Math.sqrt(Math.pow(a[0], 2) + Math.pow(a[1], 2) + Math.pow(a[2], 2) + Math.pow(a[3], 2) + Math.pow(a[4], 2) + Math.pow(a[5], 2) + Math.pow(a[6], 2) + Math.pow(a[7], 2) + Math.pow(a[8], 2) + Math.pow(a[9], 2) + Math.pow(a[10], 2) + Math.pow(a[11], 2) + Math.pow(a[12], 2) + Math.pow(a[13], 2) + Math.pow(a[14], 2) + Math.pow(a[15], 2) ))\n}\n\n/**\n * Adds two mat4's\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the first operand\n * @param {mat4} b the second operand\n * @returns {mat4} out\n */\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  out[3] = a[3] + b[3];\n  out[4] = a[4] + b[4];\n  out[5] = a[5] + b[5];\n  out[6] = a[6] + b[6];\n  out[7] = a[7] + b[7];\n  out[8] = a[8] + b[8];\n  out[9] = a[9] + b[9];\n  out[10] = a[10] + b[10];\n  out[11] = a[11] + b[11];\n  out[12] = a[12] + b[12];\n  out[13] = a[13] + b[13];\n  out[14] = a[14] + b[14];\n  out[15] = a[15] + b[15];\n  return out;\n}\n\n/**\n * Subtracts matrix b from matrix a\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the first operand\n * @param {mat4} b the second operand\n * @returns {mat4} out\n */\nexport function subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  out[2] = a[2] - b[2];\n  out[3] = a[3] - b[3];\n  out[4] = a[4] - b[4];\n  out[5] = a[5] - b[5];\n  out[6] = a[6] - b[6];\n  out[7] = a[7] - b[7];\n  out[8] = a[8] - b[8];\n  out[9] = a[9] - b[9];\n  out[10] = a[10] - b[10];\n  out[11] = a[11] - b[11];\n  out[12] = a[12] - b[12];\n  out[13] = a[13] - b[13];\n  out[14] = a[14] - b[14];\n  out[15] = a[15] - b[15];\n  return out;\n}\n\n/**\n * Multiply each element of the matrix by a scalar.\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the matrix to scale\n * @param {Number} b amount to scale the matrix's elements by\n * @returns {mat4} out\n */\nexport function multiplyScalar(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  out[3] = a[3] * b;\n  out[4] = a[4] * b;\n  out[5] = a[5] * b;\n  out[6] = a[6] * b;\n  out[7] = a[7] * b;\n  out[8] = a[8] * b;\n  out[9] = a[9] * b;\n  out[10] = a[10] * b;\n  out[11] = a[11] * b;\n  out[12] = a[12] * b;\n  out[13] = a[13] * b;\n  out[14] = a[14] * b;\n  out[15] = a[15] * b;\n  return out;\n}\n\n/**\n * Adds two mat4's after multiplying each element of the second operand by a scalar value.\n *\n * @param {mat4} out the receiving vector\n * @param {mat4} a the first operand\n * @param {mat4} b the second operand\n * @param {Number} scale the amount to scale b's elements by before adding\n * @returns {mat4} out\n */\nexport function multiplyScalarAndAdd(out, a, b, scale) {\n  out[0] = a[0] + (b[0] * scale);\n  out[1] = a[1] + (b[1] * scale);\n  out[2] = a[2] + (b[2] * scale);\n  out[3] = a[3] + (b[3] * scale);\n  out[4] = a[4] + (b[4] * scale);\n  out[5] = a[5] + (b[5] * scale);\n  out[6] = a[6] + (b[6] * scale);\n  out[7] = a[7] + (b[7] * scale);\n  out[8] = a[8] + (b[8] * scale);\n  out[9] = a[9] + (b[9] * scale);\n  out[10] = a[10] + (b[10] * scale);\n  out[11] = a[11] + (b[11] * scale);\n  out[12] = a[12] + (b[12] * scale);\n  out[13] = a[13] + (b[13] * scale);\n  out[14] = a[14] + (b[14] * scale);\n  out[15] = a[15] + (b[15] * scale);\n  return out;\n}\n\n/**\n * Returns whether or not the matrices have exactly the same elements in the same position (when compared with ===)\n *\n * @param {mat4} a The first matrix.\n * @param {mat4} b The second matrix.\n * @returns {Boolean} True if the matrices are equal, false otherwise.\n */\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3] &&\n         a[4] === b[4] && a[5] === b[5] && a[6] === b[6] && a[7] === b[7] &&\n         a[8] === b[8] && a[9] === b[9] && a[10] === b[10] && a[11] === b[11] &&\n         a[12] === b[12] && a[13] === b[13] && a[14] === b[14] && a[15] === b[15];\n}\n\n/**\n * Returns whether or not the matrices have approximately the same elements in the same position.\n *\n * @param {mat4} a The first matrix.\n * @param {mat4} b The second matrix.\n * @returns {Boolean} True if the matrices are equal, false otherwise.\n */\nexport function equals(a, b) {\n  let a0  = a[0],  a1  = a[1],  a2  = a[2],  a3  = a[3];\n  let a4  = a[4],  a5  = a[5],  a6  = a[6],  a7  = a[7];\n  let a8  = a[8],  a9  = a[9],  a10 = a[10], a11 = a[11];\n  let a12 = a[12], a13 = a[13], a14 = a[14], a15 = a[15];\n\n  let b0  = b[0],  b1  = b[1],  b2  = b[2],  b3  = b[3];\n  let b4  = b[4],  b5  = b[5],  b6  = b[6],  b7  = b[7];\n  let b8  = b[8],  b9  = b[9],  b10 = b[10], b11 = b[11];\n  let b12 = b[12], b13 = b[13], b14 = b[14], b15 = b[15];\n\n  return (Math.abs(a0 - b0) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a0), Math.abs(b0)) &&\n          Math.abs(a1 - b1) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a1), Math.abs(b1)) &&\n          Math.abs(a2 - b2) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a2), Math.abs(b2)) &&\n          Math.abs(a3 - b3) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a3), Math.abs(b3)) &&\n          Math.abs(a4 - b4) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a4), Math.abs(b4)) &&\n          Math.abs(a5 - b5) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a5), Math.abs(b5)) &&\n          Math.abs(a6 - b6) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a6), Math.abs(b6)) &&\n          Math.abs(a7 - b7) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a7), Math.abs(b7)) &&\n          Math.abs(a8 - b8) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a8), Math.abs(b8)) &&\n          Math.abs(a9 - b9) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a9), Math.abs(b9)) &&\n          Math.abs(a10 - b10) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a10), Math.abs(b10)) &&\n          Math.abs(a11 - b11) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a11), Math.abs(b11)) &&\n          Math.abs(a12 - b12) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a12), Math.abs(b12)) &&\n          Math.abs(a13 - b13) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a13), Math.abs(b13)) &&\n          Math.abs(a14 - b14) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a14), Math.abs(b14)) &&\n          Math.abs(a15 - b15) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a15), Math.abs(b15)));\n}\n\n/**\n * Alias for {@link mat4.multiply}\n * @function\n */\nexport const mul = multiply;\n\n/**\n * Alias for {@link mat4.subtract}\n * @function\n */\nexport const sub = subtract;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/gl-matrix/src/gl-matrix/mat4.js\n// module id = 30\n// module chunks = 0","import * as glMatrix from \"./common.js\"\nimport * as mat3 from \"./mat3.js\"\nimport * as vec3 from \"./vec3.js\"\nimport * as vec4 from \"./vec4.js\"\n\n/**\n * Quaternion\n * @module quat\n */\n\n/**\n * Creates a new identity quat\n *\n * @returns {quat} a new quaternion\n */\nexport function create() {\n  let out = new glMatrix.ARRAY_TYPE(4);\n  out[0] = 0;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 1;\n  return out;\n}\n\n/**\n * Set a quat to the identity quaternion\n *\n * @param {quat} out the receiving quaternion\n * @returns {quat} out\n */\nexport function identity(out) {\n  out[0] = 0;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 1;\n  return out;\n}\n\n/**\n * Sets a quat from the given angle and rotation axis,\n * then returns it.\n *\n * @param {quat} out the receiving quaternion\n * @param {vec3} axis the axis around which to rotate\n * @param {Number} rad the angle in radians\n * @returns {quat} out\n **/\nexport function setAxisAngle(out, axis, rad) {\n  rad = rad * 0.5;\n  let s = Math.sin(rad);\n  out[0] = s * axis[0];\n  out[1] = s * axis[1];\n  out[2] = s * axis[2];\n  out[3] = Math.cos(rad);\n  return out;\n}\n\n/**\n * Gets the rotation axis and angle for a given\n *  quaternion. If a quaternion is created with\n *  setAxisAngle, this method will return the same\n *  values as providied in the original parameter list\n *  OR functionally equivalent values.\n * Example: The quaternion formed by axis [0, 0, 1] and\n *  angle -90 is the same as the quaternion formed by\n *  [0, 0, 1] and 270. This method favors the latter.\n * @param  {vec3} out_axis  Vector receiving the axis of rotation\n * @param  {quat} q     Quaternion to be decomposed\n * @return {Number}     Angle, in radians, of the rotation\n */\nexport function getAxisAngle(out_axis, q) {\n  let rad = Math.acos(q[3]) * 2.0;\n  let s = Math.sin(rad / 2.0);\n  if (s != 0.0) {\n    out_axis[0] = q[0] / s;\n    out_axis[1] = q[1] / s;\n    out_axis[2] = q[2] / s;\n  } else {\n    // If s is zero, return any axis (no rotation - axis does not matter)\n    out_axis[0] = 1;\n    out_axis[1] = 0;\n    out_axis[2] = 0;\n  }\n  return rad;\n}\n\n/**\n * Multiplies two quat's\n *\n * @param {quat} out the receiving quaternion\n * @param {quat} a the first operand\n * @param {quat} b the second operand\n * @returns {quat} out\n */\nexport function multiply(out, a, b) {\n  let ax = a[0], ay = a[1], az = a[2], aw = a[3];\n  let bx = b[0], by = b[1], bz = b[2], bw = b[3];\n\n  out[0] = ax * bw + aw * bx + ay * bz - az * by;\n  out[1] = ay * bw + aw * by + az * bx - ax * bz;\n  out[2] = az * bw + aw * bz + ax * by - ay * bx;\n  out[3] = aw * bw - ax * bx - ay * by - az * bz;\n  return out;\n}\n\n/**\n * Rotates a quaternion by the given angle about the X axis\n *\n * @param {quat} out quat receiving operation result\n * @param {quat} a quat to rotate\n * @param {number} rad angle (in radians) to rotate\n * @returns {quat} out\n */\nexport function rotateX(out, a, rad) {\n  rad *= 0.5;\n\n  let ax = a[0], ay = a[1], az = a[2], aw = a[3];\n  let bx = Math.sin(rad), bw = Math.cos(rad);\n\n  out[0] = ax * bw + aw * bx;\n  out[1] = ay * bw + az * bx;\n  out[2] = az * bw - ay * bx;\n  out[3] = aw * bw - ax * bx;\n  return out;\n}\n\n/**\n * Rotates a quaternion by the given angle about the Y axis\n *\n * @param {quat} out quat receiving operation result\n * @param {quat} a quat to rotate\n * @param {number} rad angle (in radians) to rotate\n * @returns {quat} out\n */\nexport function rotateY(out, a, rad) {\n  rad *= 0.5;\n\n  let ax = a[0], ay = a[1], az = a[2], aw = a[3];\n  let by = Math.sin(rad), bw = Math.cos(rad);\n\n  out[0] = ax * bw - az * by;\n  out[1] = ay * bw + aw * by;\n  out[2] = az * bw + ax * by;\n  out[3] = aw * bw - ay * by;\n  return out;\n}\n\n/**\n * Rotates a quaternion by the given angle about the Z axis\n *\n * @param {quat} out quat receiving operation result\n * @param {quat} a quat to rotate\n * @param {number} rad angle (in radians) to rotate\n * @returns {quat} out\n */\nexport function rotateZ(out, a, rad) {\n  rad *= 0.5;\n\n  let ax = a[0], ay = a[1], az = a[2], aw = a[3];\n  let bz = Math.sin(rad), bw = Math.cos(rad);\n\n  out[0] = ax * bw + ay * bz;\n  out[1] = ay * bw - ax * bz;\n  out[2] = az * bw + aw * bz;\n  out[3] = aw * bw - az * bz;\n  return out;\n}\n\n/**\n * Calculates the W component of a quat from the X, Y, and Z components.\n * Assumes that quaternion is 1 unit in length.\n * Any existing W component will be ignored.\n *\n * @param {quat} out the receiving quaternion\n * @param {quat} a quat to calculate W component of\n * @returns {quat} out\n */\nexport function calculateW(out, a) {\n  let x = a[0], y = a[1], z = a[2];\n\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  out[3] = Math.sqrt(Math.abs(1.0 - x * x - y * y - z * z));\n  return out;\n}\n\n/**\n * Performs a spherical linear interpolation between two quat\n *\n * @param {quat} out the receiving quaternion\n * @param {quat} a the first operand\n * @param {quat} b the second operand\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\n * @returns {quat} out\n */\nexport function slerp(out, a, b, t) {\n  // benchmarks:\n  //    http://jsperf.com/quaternion-slerp-implementations\n  let ax = a[0], ay = a[1], az = a[2], aw = a[3];\n  let bx = b[0], by = b[1], bz = b[2], bw = b[3];\n\n  let omega, cosom, sinom, scale0, scale1;\n\n  // calc cosine\n  cosom = ax * bx + ay * by + az * bz + aw * bw;\n  // adjust signs (if necessary)\n  if ( cosom < 0.0 ) {\n    cosom = -cosom;\n    bx = - bx;\n    by = - by;\n    bz = - bz;\n    bw = - bw;\n  }\n  // calculate coefficients\n  if ( (1.0 - cosom) > 0.000001 ) {\n    // standard case (slerp)\n    omega  = Math.acos(cosom);\n    sinom  = Math.sin(omega);\n    scale0 = Math.sin((1.0 - t) * omega) / sinom;\n    scale1 = Math.sin(t * omega) / sinom;\n  } else {\n    // \"from\" and \"to\" quaternions are very close\n    //  ... so we can do a linear interpolation\n    scale0 = 1.0 - t;\n    scale1 = t;\n  }\n  // calculate final values\n  out[0] = scale0 * ax + scale1 * bx;\n  out[1] = scale0 * ay + scale1 * by;\n  out[2] = scale0 * az + scale1 * bz;\n  out[3] = scale0 * aw + scale1 * bw;\n\n  return out;\n}\n\n/**\n * Calculates the inverse of a quat\n *\n * @param {quat} out the receiving quaternion\n * @param {quat} a quat to calculate inverse of\n * @returns {quat} out\n */\nexport function invert(out, a) {\n  let a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3];\n  let dot = a0*a0 + a1*a1 + a2*a2 + a3*a3;\n  let invDot = dot ? 1.0/dot : 0;\n\n  // TODO: Would be faster to return [0,0,0,0] immediately if dot == 0\n\n  out[0] = -a0*invDot;\n  out[1] = -a1*invDot;\n  out[2] = -a2*invDot;\n  out[3] = a3*invDot;\n  return out;\n}\n\n/**\n * Calculates the conjugate of a quat\n * If the quaternion is normalized, this function is faster than quat.inverse and produces the same result.\n *\n * @param {quat} out the receiving quaternion\n * @param {quat} a quat to calculate conjugate of\n * @returns {quat} out\n */\nexport function conjugate(out, a) {\n  out[0] = -a[0];\n  out[1] = -a[1];\n  out[2] = -a[2];\n  out[3] = a[3];\n  return out;\n}\n\n/**\n * Creates a quaternion from the given 3x3 rotation matrix.\n *\n * NOTE: The resultant quaternion is not normalized, so you should be sure\n * to renormalize the quaternion yourself where necessary.\n *\n * @param {quat} out the receiving quaternion\n * @param {mat3} m rotation matrix\n * @returns {quat} out\n * @function\n */\nexport function fromMat3(out, m) {\n  // Algorithm in Ken Shoemake's article in 1987 SIGGRAPH course notes\n  // article \"Quaternion Calculus and Fast Animation\".\n  let fTrace = m[0] + m[4] + m[8];\n  let fRoot;\n\n  if ( fTrace > 0.0 ) {\n    // |w| > 1/2, may as well choose w > 1/2\n    fRoot = Math.sqrt(fTrace + 1.0);  // 2w\n    out[3] = 0.5 * fRoot;\n    fRoot = 0.5/fRoot;  // 1/(4w)\n    out[0] = (m[5]-m[7])*fRoot;\n    out[1] = (m[6]-m[2])*fRoot;\n    out[2] = (m[1]-m[3])*fRoot;\n  } else {\n    // |w| <= 1/2\n    let i = 0;\n    if ( m[4] > m[0] )\n      i = 1;\n    if ( m[8] > m[i*3+i] )\n      i = 2;\n    let j = (i+1)%3;\n    let k = (i+2)%3;\n\n    fRoot = Math.sqrt(m[i*3+i]-m[j*3+j]-m[k*3+k] + 1.0);\n    out[i] = 0.5 * fRoot;\n    fRoot = 0.5 / fRoot;\n    out[3] = (m[j*3+k] - m[k*3+j]) * fRoot;\n    out[j] = (m[j*3+i] + m[i*3+j]) * fRoot;\n    out[k] = (m[k*3+i] + m[i*3+k]) * fRoot;\n  }\n\n  return out;\n}\n\n/**\n * Creates a quaternion from the given euler angle x, y, z.\n *\n * @param {quat} out the receiving quaternion\n * @param {x} Angle to rotate around X axis in degrees.\n * @param {y} Angle to rotate around Y axis in degrees.\n * @param {z} Angle to rotate around Z axis in degrees.\n * @returns {quat} out\n * @function\n */\nexport function fromEuler(out, x, y, z) {\n    let halfToRad = 0.5 * Math.PI / 180.0;\n    x *= halfToRad;\n    y *= halfToRad;\n    z *= halfToRad;\n\n    let sx = Math.sin(x);\n    let cx = Math.cos(x);\n    let sy = Math.sin(y);\n    let cy = Math.cos(y);\n    let sz = Math.sin(z);\n    let cz = Math.cos(z);\n\n    out[0] = sx * cy * cz - cx * sy * sz;\n    out[1] = cx * sy * cz + sx * cy * sz;\n    out[2] = cx * cy * sz - sx * sy * cz;\n    out[3] = cx * cy * cz + sx * sy * sz;\n\n    return out;\n}\n\n/**\n * Returns a string representation of a quatenion\n *\n * @param {quat} a vector to represent as a string\n * @returns {String} string representation of the vector\n */\nexport function str(a) {\n  return 'quat(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' + a[3] + ')';\n}\n\n/**\n * Creates a new quat initialized with values from an existing quaternion\n *\n * @param {quat} a quaternion to clone\n * @returns {quat} a new quaternion\n * @function\n */\nexport const clone = vec4.clone;\n\n/**\n * Creates a new quat initialized with the given values\n *\n * @param {Number} x X component\n * @param {Number} y Y component\n * @param {Number} z Z component\n * @param {Number} w W component\n * @returns {quat} a new quaternion\n * @function\n */\nexport const fromValues = vec4.fromValues;\n\n/**\n * Copy the values from one quat to another\n *\n * @param {quat} out the receiving quaternion\n * @param {quat} a the source quaternion\n * @returns {quat} out\n * @function\n */\nexport const copy = vec4.copy;\n\n/**\n * Set the components of a quat to the given values\n *\n * @param {quat} out the receiving quaternion\n * @param {Number} x X component\n * @param {Number} y Y component\n * @param {Number} z Z component\n * @param {Number} w W component\n * @returns {quat} out\n * @function\n */\nexport const set = vec4.set;\n\n/**\n * Adds two quat's\n *\n * @param {quat} out the receiving quaternion\n * @param {quat} a the first operand\n * @param {quat} b the second operand\n * @returns {quat} out\n * @function\n */\nexport const add = vec4.add;\n\n/**\n * Alias for {@link quat.multiply}\n * @function\n */\nexport const mul = multiply;\n\n/**\n * Scales a quat by a scalar number\n *\n * @param {quat} out the receiving vector\n * @param {quat} a the vector to scale\n * @param {Number} b amount to scale the vector by\n * @returns {quat} out\n * @function\n */\nexport const scale = vec4.scale;\n\n/**\n * Calculates the dot product of two quat's\n *\n * @param {quat} a the first operand\n * @param {quat} b the second operand\n * @returns {Number} dot product of a and b\n * @function\n */\nexport const dot = vec4.dot;\n\n/**\n * Performs a linear interpolation between two quat's\n *\n * @param {quat} out the receiving quaternion\n * @param {quat} a the first operand\n * @param {quat} b the second operand\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\n * @returns {quat} out\n * @function\n */\nexport const lerp = vec4.lerp;\n\n/**\n * Calculates the length of a quat\n *\n * @param {quat} a vector to calculate length of\n * @returns {Number} length of a\n */\nexport const length = vec4.length;\n\n/**\n * Alias for {@link quat.length}\n * @function\n */\nexport const len = length;\n\n/**\n * Calculates the squared length of a quat\n *\n * @param {quat} a vector to calculate squared length of\n * @returns {Number} squared length of a\n * @function\n */\nexport const squaredLength = vec4.squaredLength;\n\n/**\n * Alias for {@link quat.squaredLength}\n * @function\n */\nexport const sqrLen = squaredLength;\n\n/**\n * Normalize a quat\n *\n * @param {quat} out the receiving quaternion\n * @param {quat} a quaternion to normalize\n * @returns {quat} out\n * @function\n */\nexport const normalize = vec4.normalize;\n\n/**\n * Returns whether or not the quaternions have exactly the same elements in the same position (when compared with ===)\n *\n * @param {quat} a The first quaternion.\n * @param {quat} b The second quaternion.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\nexport const exactEquals = vec4.exactEquals;\n\n/**\n * Returns whether or not the quaternions have approximately the same elements in the same position.\n *\n * @param {quat} a The first vector.\n * @param {quat} b The second vector.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\nexport const equals = vec4.equals;\n\n/**\n * Sets a quaternion to represent the shortest rotation from one\n * vector to another.\n *\n * Both vectors are assumed to be unit length.\n *\n * @param {quat} out the receiving quaternion.\n * @param {vec3} a the initial vector\n * @param {vec3} b the destination vector\n * @returns {quat} out\n */\nexport const rotationTo = (function() {\n  let tmpvec3 = vec3.create();\n  let xUnitVec3 = vec3.fromValues(1,0,0);\n  let yUnitVec3 = vec3.fromValues(0,1,0);\n\n  return function(out, a, b) {\n    let dot = vec3.dot(a, b);\n    if (dot < -0.999999) {\n      vec3.cross(tmpvec3, xUnitVec3, a);\n      if (vec3.len(tmpvec3) < 0.000001)\n        vec3.cross(tmpvec3, yUnitVec3, a);\n      vec3.normalize(tmpvec3, tmpvec3);\n      setAxisAngle(out, tmpvec3, Math.PI);\n      return out;\n    } else if (dot > 0.999999) {\n      out[0] = 0;\n      out[1] = 0;\n      out[2] = 0;\n      out[3] = 1;\n      return out;\n    } else {\n      vec3.cross(tmpvec3, a, b);\n      out[0] = tmpvec3[0];\n      out[1] = tmpvec3[1];\n      out[2] = tmpvec3[2];\n      out[3] = 1 + dot;\n      return normalize(out, out);\n    }\n  };\n})();\n\n/**\n * Performs a spherical linear interpolation with two control points\n *\n * @param {quat} out the receiving quaternion\n * @param {quat} a the first operand\n * @param {quat} b the second operand\n * @param {quat} c the third operand\n * @param {quat} d the fourth operand\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\n * @returns {quat} out\n */\nexport const sqlerp = (function () {\n  let temp1 = create();\n  let temp2 = create();\n\n  return function (out, a, b, c, d, t) {\n    slerp(temp1, a, d, t);\n    slerp(temp2, b, c, t);\n    slerp(out, temp1, temp2, 2 * t * (1 - t));\n\n    return out;\n  };\n}());\n\n/**\n * Sets the specified quaternion with values corresponding to the given\n * axes. Each axis is a vec3 and is expected to be unit length and\n * perpendicular to all other specified axes.\n *\n * @param {vec3} view  the vector representing the viewing direction\n * @param {vec3} right the vector representing the local \"right\" direction\n * @param {vec3} up    the vector representing the local \"up\" direction\n * @returns {quat} out\n */\nexport const setAxes = (function() {\n  let matr = mat3.create();\n\n  return function(out, view, right, up) {\n    matr[0] = right[0];\n    matr[3] = right[1];\n    matr[6] = right[2];\n\n    matr[1] = up[0];\n    matr[4] = up[1];\n    matr[7] = up[2];\n\n    matr[2] = -view[0];\n    matr[5] = -view[1];\n    matr[8] = -view[2];\n\n    return normalize(out, fromMat3(out, matr));\n  };\n})();\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/gl-matrix/src/gl-matrix/quat.js\n// module id = 31\n// module chunks = 0","import * as glMatrix from \"./common.js\";\n\n/**\n * 3 Dimensional Vector\n * @module vec3\n */\n\n/**\n * Creates a new, empty vec3\n *\n * @returns {vec3} a new 3D vector\n */\nexport function create() {\n  let out = new glMatrix.ARRAY_TYPE(3);\n  out[0] = 0;\n  out[1] = 0;\n  out[2] = 0;\n  return out;\n}\n\n/**\n * Creates a new vec3 initialized with values from an existing vector\n *\n * @param {vec3} a vector to clone\n * @returns {vec3} a new 3D vector\n */\nexport function clone(a) {\n  var out = new glMatrix.ARRAY_TYPE(3);\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  return out;\n}\n\n/**\n * Calculates the length of a vec3\n *\n * @param {vec3} a vector to calculate length of\n * @returns {Number} length of a\n */\nexport function length(a) {\n  let x = a[0];\n  let y = a[1];\n  let z = a[2];\n  return Math.sqrt(x*x + y*y + z*z);\n}\n\n/**\n * Creates a new vec3 initialized with the given values\n *\n * @param {Number} x X component\n * @param {Number} y Y component\n * @param {Number} z Z component\n * @returns {vec3} a new 3D vector\n */\nexport function fromValues(x, y, z) {\n  let out = new glMatrix.ARRAY_TYPE(3);\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  return out;\n}\n\n/**\n * Copy the values from one vec3 to another\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the source vector\n * @returns {vec3} out\n */\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  return out;\n}\n\n/**\n * Set the components of a vec3 to the given values\n *\n * @param {vec3} out the receiving vector\n * @param {Number} x X component\n * @param {Number} y Y component\n * @param {Number} z Z component\n * @returns {vec3} out\n */\nexport function set(out, x, y, z) {\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  return out;\n}\n\n/**\n * Adds two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @returns {vec3} out\n */\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  return out;\n}\n\n/**\n * Subtracts vector b from vector a\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @returns {vec3} out\n */\nexport function subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  out[2] = a[2] - b[2];\n  return out;\n}\n\n/**\n * Multiplies two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @returns {vec3} out\n */\nexport function multiply(out, a, b) {\n  out[0] = a[0] * b[0];\n  out[1] = a[1] * b[1];\n  out[2] = a[2] * b[2];\n  return out;\n}\n\n/**\n * Divides two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @returns {vec3} out\n */\nexport function divide(out, a, b) {\n  out[0] = a[0] / b[0];\n  out[1] = a[1] / b[1];\n  out[2] = a[2] / b[2];\n  return out;\n}\n\n/**\n * Math.ceil the components of a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a vector to ceil\n * @returns {vec3} out\n */\nexport function ceil(out, a) {\n  out[0] = Math.ceil(a[0]);\n  out[1] = Math.ceil(a[1]);\n  out[2] = Math.ceil(a[2]);\n  return out;\n}\n\n/**\n * Math.floor the components of a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a vector to floor\n * @returns {vec3} out\n */\nexport function floor(out, a) {\n  out[0] = Math.floor(a[0]);\n  out[1] = Math.floor(a[1]);\n  out[2] = Math.floor(a[2]);\n  return out;\n}\n\n/**\n * Returns the minimum of two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @returns {vec3} out\n */\nexport function min(out, a, b) {\n  out[0] = Math.min(a[0], b[0]);\n  out[1] = Math.min(a[1], b[1]);\n  out[2] = Math.min(a[2], b[2]);\n  return out;\n}\n\n/**\n * Returns the maximum of two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @returns {vec3} out\n */\nexport function max(out, a, b) {\n  out[0] = Math.max(a[0], b[0]);\n  out[1] = Math.max(a[1], b[1]);\n  out[2] = Math.max(a[2], b[2]);\n  return out;\n}\n\n/**\n * Math.round the components of a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a vector to round\n * @returns {vec3} out\n */\nexport function round(out, a) {\n  out[0] = Math.round(a[0]);\n  out[1] = Math.round(a[1]);\n  out[2] = Math.round(a[2]);\n  return out;\n}\n\n/**\n * Scales a vec3 by a scalar number\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the vector to scale\n * @param {Number} b amount to scale the vector by\n * @returns {vec3} out\n */\nexport function scale(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  return out;\n}\n\n/**\n * Adds two vec3's after scaling the second operand by a scalar value\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @param {Number} scale the amount to scale b by before adding\n * @returns {vec3} out\n */\nexport function scaleAndAdd(out, a, b, scale) {\n  out[0] = a[0] + (b[0] * scale);\n  out[1] = a[1] + (b[1] * scale);\n  out[2] = a[2] + (b[2] * scale);\n  return out;\n}\n\n/**\n * Calculates the euclidian distance between two vec3's\n *\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @returns {Number} distance between a and b\n */\nexport function distance(a, b) {\n  let x = b[0] - a[0];\n  let y = b[1] - a[1];\n  let z = b[2] - a[2];\n  return Math.sqrt(x*x + y*y + z*z);\n}\n\n/**\n * Calculates the squared euclidian distance between two vec3's\n *\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @returns {Number} squared distance between a and b\n */\nexport function squaredDistance(a, b) {\n  let x = b[0] - a[0];\n  let y = b[1] - a[1];\n  let z = b[2] - a[2];\n  return x*x + y*y + z*z;\n}\n\n/**\n * Calculates the squared length of a vec3\n *\n * @param {vec3} a vector to calculate squared length of\n * @returns {Number} squared length of a\n */\nexport function squaredLength(a) {\n  let x = a[0];\n  let y = a[1];\n  let z = a[2];\n  return x*x + y*y + z*z;\n}\n\n/**\n * Negates the components of a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a vector to negate\n * @returns {vec3} out\n */\nexport function negate(out, a) {\n  out[0] = -a[0];\n  out[1] = -a[1];\n  out[2] = -a[2];\n  return out;\n}\n\n/**\n * Returns the inverse of the components of a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a vector to invert\n * @returns {vec3} out\n */\nexport function inverse(out, a) {\n  out[0] = 1.0 / a[0];\n  out[1] = 1.0 / a[1];\n  out[2] = 1.0 / a[2];\n  return out;\n}\n\n/**\n * Normalize a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a vector to normalize\n * @returns {vec3} out\n */\nexport function normalize(out, a) {\n  let x = a[0];\n  let y = a[1];\n  let z = a[2];\n  let len = x*x + y*y + z*z;\n  if (len > 0) {\n    //TODO: evaluate use of glm_invsqrt here?\n    len = 1 / Math.sqrt(len);\n    out[0] = a[0] * len;\n    out[1] = a[1] * len;\n    out[2] = a[2] * len;\n  }\n  return out;\n}\n\n/**\n * Calculates the dot product of two vec3's\n *\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @returns {Number} dot product of a and b\n */\nexport function dot(a, b) {\n  return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];\n}\n\n/**\n * Computes the cross product of two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @returns {vec3} out\n */\nexport function cross(out, a, b) {\n  let ax = a[0], ay = a[1], az = a[2];\n  let bx = b[0], by = b[1], bz = b[2];\n\n  out[0] = ay * bz - az * by;\n  out[1] = az * bx - ax * bz;\n  out[2] = ax * by - ay * bx;\n  return out;\n}\n\n/**\n * Performs a linear interpolation between two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\n * @returns {vec3} out\n */\nexport function lerp(out, a, b, t) {\n  let ax = a[0];\n  let ay = a[1];\n  let az = a[2];\n  out[0] = ax + t * (b[0] - ax);\n  out[1] = ay + t * (b[1] - ay);\n  out[2] = az + t * (b[2] - az);\n  return out;\n}\n\n/**\n * Performs a hermite interpolation with two control points\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @param {vec3} c the third operand\n * @param {vec3} d the fourth operand\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\n * @returns {vec3} out\n */\nexport function hermite(out, a, b, c, d, t) {\n  let factorTimes2 = t * t;\n  let factor1 = factorTimes2 * (2 * t - 3) + 1;\n  let factor2 = factorTimes2 * (t - 2) + t;\n  let factor3 = factorTimes2 * (t - 1);\n  let factor4 = factorTimes2 * (3 - 2 * t);\n\n  out[0] = a[0] * factor1 + b[0] * factor2 + c[0] * factor3 + d[0] * factor4;\n  out[1] = a[1] * factor1 + b[1] * factor2 + c[1] * factor3 + d[1] * factor4;\n  out[2] = a[2] * factor1 + b[2] * factor2 + c[2] * factor3 + d[2] * factor4;\n\n  return out;\n}\n\n/**\n * Performs a bezier interpolation with two control points\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @param {vec3} c the third operand\n * @param {vec3} d the fourth operand\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\n * @returns {vec3} out\n */\nexport function bezier(out, a, b, c, d, t) {\n  let inverseFactor = 1 - t;\n  let inverseFactorTimesTwo = inverseFactor * inverseFactor;\n  let factorTimes2 = t * t;\n  let factor1 = inverseFactorTimesTwo * inverseFactor;\n  let factor2 = 3 * t * inverseFactorTimesTwo;\n  let factor3 = 3 * factorTimes2 * inverseFactor;\n  let factor4 = factorTimes2 * t;\n\n  out[0] = a[0] * factor1 + b[0] * factor2 + c[0] * factor3 + d[0] * factor4;\n  out[1] = a[1] * factor1 + b[1] * factor2 + c[1] * factor3 + d[1] * factor4;\n  out[2] = a[2] * factor1 + b[2] * factor2 + c[2] * factor3 + d[2] * factor4;\n\n  return out;\n}\n\n/**\n * Generates a random vector with the given scale\n *\n * @param {vec3} out the receiving vector\n * @param {Number} [scale] Length of the resulting vector. If ommitted, a unit vector will be returned\n * @returns {vec3} out\n */\nexport function random(out, scale) {\n  scale = scale || 1.0;\n\n  let r = glMatrix.RANDOM() * 2.0 * Math.PI;\n  let z = (glMatrix.RANDOM() * 2.0) - 1.0;\n  let zScale = Math.sqrt(1.0-z*z) * scale;\n\n  out[0] = Math.cos(r) * zScale;\n  out[1] = Math.sin(r) * zScale;\n  out[2] = z * scale;\n  return out;\n}\n\n/**\n * Transforms the vec3 with a mat4.\n * 4th vector component is implicitly '1'\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the vector to transform\n * @param {mat4} m matrix to transform with\n * @returns {vec3} out\n */\nexport function transformMat4(out, a, m) {\n  let x = a[0], y = a[1], z = a[2];\n  let w = m[3] * x + m[7] * y + m[11] * z + m[15];\n  w = w || 1.0;\n  out[0] = (m[0] * x + m[4] * y + m[8] * z + m[12]) / w;\n  out[1] = (m[1] * x + m[5] * y + m[9] * z + m[13]) / w;\n  out[2] = (m[2] * x + m[6] * y + m[10] * z + m[14]) / w;\n  return out;\n}\n\n/**\n * Transforms the vec3 with a mat3.\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the vector to transform\n * @param {mat3} m the 3x3 matrix to transform with\n * @returns {vec3} out\n */\nexport function transformMat3(out, a, m) {\n  let x = a[0], y = a[1], z = a[2];\n  out[0] = x * m[0] + y * m[3] + z * m[6];\n  out[1] = x * m[1] + y * m[4] + z * m[7];\n  out[2] = x * m[2] + y * m[5] + z * m[8];\n  return out;\n}\n\n/**\n * Transforms the vec3 with a quat\n * Can also be used for dual quaternions. (Multiply it with the real part)\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the vector to transform\n * @param {quat} q quaternion to transform with\n * @returns {vec3} out\n */\nexport function transformQuat(out, a, q) {\n    // benchmarks: https://jsperf.com/quaternion-transform-vec3-implementations-fixed\n    let qx = q[0], qy = q[1], qz = q[2], qw = q[3];\n    let x = a[0], y = a[1], z = a[2];\n    // var qvec = [qx, qy, qz];\n    // var uv = vec3.cross([], qvec, a);\n    let uvx = qy * z - qz * y,\n        uvy = qz * x - qx * z,\n        uvz = qx * y - qy * x;\n    // var uuv = vec3.cross([], qvec, uv);\n    let uuvx = qy * uvz - qz * uvy,\n        uuvy = qz * uvx - qx * uvz,\n        uuvz = qx * uvy - qy * uvx;\n    // vec3.scale(uv, uv, 2 * w);\n    let w2 = qw * 2;\n    uvx *= w2;\n    uvy *= w2;\n    uvz *= w2;\n    // vec3.scale(uuv, uuv, 2);\n    uuvx *= 2;\n    uuvy *= 2;\n    uuvz *= 2;\n    // return vec3.add(out, a, vec3.add(out, uv, uuv));\n    out[0] = x + uvx + uuvx;\n    out[1] = y + uvy + uuvy;\n    out[2] = z + uvz + uuvz;\n    return out;\n}\n\n/**\n * Rotate a 3D vector around the x-axis\n * @param {vec3} out The receiving vec3\n * @param {vec3} a The vec3 point to rotate\n * @param {vec3} b The origin of the rotation\n * @param {Number} c The angle of rotation\n * @returns {vec3} out\n */\nexport function rotateX(out, a, b, c){\n  let p = [], r=[];\n  //Translate point to the origin\n  p[0] = a[0] - b[0];\n  p[1] = a[1] - b[1];\n  p[2] = a[2] - b[2];\n\n  //perform rotation\n  r[0] = p[0];\n  r[1] = p[1]*Math.cos(c) - p[2]*Math.sin(c);\n  r[2] = p[1]*Math.sin(c) + p[2]*Math.cos(c);\n\n  //translate to correct position\n  out[0] = r[0] + b[0];\n  out[1] = r[1] + b[1];\n  out[2] = r[2] + b[2];\n\n  return out;\n}\n\n/**\n * Rotate a 3D vector around the y-axis\n * @param {vec3} out The receiving vec3\n * @param {vec3} a The vec3 point to rotate\n * @param {vec3} b The origin of the rotation\n * @param {Number} c The angle of rotation\n * @returns {vec3} out\n */\nexport function rotateY(out, a, b, c){\n  let p = [], r=[];\n  //Translate point to the origin\n  p[0] = a[0] - b[0];\n  p[1] = a[1] - b[1];\n  p[2] = a[2] - b[2];\n\n  //perform rotation\n  r[0] = p[2]*Math.sin(c) + p[0]*Math.cos(c);\n  r[1] = p[1];\n  r[2] = p[2]*Math.cos(c) - p[0]*Math.sin(c);\n\n  //translate to correct position\n  out[0] = r[0] + b[0];\n  out[1] = r[1] + b[1];\n  out[2] = r[2] + b[2];\n\n  return out;\n}\n\n/**\n * Rotate a 3D vector around the z-axis\n * @param {vec3} out The receiving vec3\n * @param {vec3} a The vec3 point to rotate\n * @param {vec3} b The origin of the rotation\n * @param {Number} c The angle of rotation\n * @returns {vec3} out\n */\nexport function rotateZ(out, a, b, c){\n  let p = [], r=[];\n  //Translate point to the origin\n  p[0] = a[0] - b[0];\n  p[1] = a[1] - b[1];\n  p[2] = a[2] - b[2];\n\n  //perform rotation\n  r[0] = p[0]*Math.cos(c) - p[1]*Math.sin(c);\n  r[1] = p[0]*Math.sin(c) + p[1]*Math.cos(c);\n  r[2] = p[2];\n\n  //translate to correct position\n  out[0] = r[0] + b[0];\n  out[1] = r[1] + b[1];\n  out[2] = r[2] + b[2];\n\n  return out;\n}\n\n/**\n * Get the angle between two 3D vectors\n * @param {vec3} a The first operand\n * @param {vec3} b The second operand\n * @returns {Number} The angle in radians\n */\nexport function angle(a, b) {\n  let tempA = fromValues(a[0], a[1], a[2]);\n  let tempB = fromValues(b[0], b[1], b[2]);\n\n  normalize(tempA, tempA);\n  normalize(tempB, tempB);\n\n  let cosine = dot(tempA, tempB);\n\n  if(cosine > 1.0) {\n    return 0;\n  }\n  else if(cosine < -1.0) {\n    return Math.PI;\n  } else {\n    return Math.acos(cosine);\n  }\n}\n\n/**\n * Returns a string representation of a vector\n *\n * @param {vec3} a vector to represent as a string\n * @returns {String} string representation of the vector\n */\nexport function str(a) {\n  return 'vec3(' + a[0] + ', ' + a[1] + ', ' + a[2] + ')';\n}\n\n/**\n * Returns whether or not the vectors have exactly the same elements in the same position (when compared with ===)\n *\n * @param {vec3} a The first vector.\n * @param {vec3} b The second vector.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2];\n}\n\n/**\n * Returns whether or not the vectors have approximately the same elements in the same position.\n *\n * @param {vec3} a The first vector.\n * @param {vec3} b The second vector.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\nexport function equals(a, b) {\n  let a0 = a[0], a1 = a[1], a2 = a[2];\n  let b0 = b[0], b1 = b[1], b2 = b[2];\n  return (Math.abs(a0 - b0) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a0), Math.abs(b0)) &&\n          Math.abs(a1 - b1) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a1), Math.abs(b1)) &&\n          Math.abs(a2 - b2) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a2), Math.abs(b2)));\n}\n\n/**\n * Alias for {@link vec3.subtract}\n * @function\n */\nexport const sub = subtract;\n\n/**\n * Alias for {@link vec3.multiply}\n * @function\n */\nexport const mul = multiply;\n\n/**\n * Alias for {@link vec3.divide}\n * @function\n */\nexport const div = divide;\n\n/**\n * Alias for {@link vec3.distance}\n * @function\n */\nexport const dist = distance;\n\n/**\n * Alias for {@link vec3.squaredDistance}\n * @function\n */\nexport const sqrDist = squaredDistance;\n\n/**\n * Alias for {@link vec3.length}\n * @function\n */\nexport const len = length;\n\n/**\n * Alias for {@link vec3.squaredLength}\n * @function\n */\nexport const sqrLen = squaredLength;\n\n/**\n * Perform some operation over an array of vec3s.\n *\n * @param {Array} a the array of vectors to iterate over\n * @param {Number} stride Number of elements between the start of each vec3. If 0 assumes tightly packed\n * @param {Number} offset Number of elements to skip at the beginning of the array\n * @param {Number} count Number of vec3s to iterate over. If 0 iterates over entire array\n * @param {Function} fn Function to call for each vector in the array\n * @param {Object} [arg] additional argument to pass to fn\n * @returns {Array} a\n * @function\n */\nexport const forEach = (function() {\n  let vec = create();\n\n  return function(a, stride, offset, count, fn, arg) {\n    let i, l;\n    if(!stride) {\n      stride = 3;\n    }\n\n    if(!offset) {\n      offset = 0;\n    }\n\n    if(count) {\n      l = Math.min((count * stride) + offset, a.length);\n    } else {\n      l = a.length;\n    }\n\n    for(i = offset; i < l; i += stride) {\n      vec[0] = a[i]; vec[1] = a[i+1]; vec[2] = a[i+2];\n      fn(vec, vec, arg);\n      a[i] = vec[0]; a[i+1] = vec[1]; a[i+2] = vec[2];\n    }\n\n    return a;\n  };\n})();\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/gl-matrix/src/gl-matrix/vec3.js\n// module id = 32\n// module chunks = 0","import * as glMatrix from \"./common.js\";\n\n/**\n * 4 Dimensional Vector\n * @module vec4\n */\n\n/**\n * Creates a new, empty vec4\n *\n * @returns {vec4} a new 4D vector\n */\nexport function create() {\n  let out = new glMatrix.ARRAY_TYPE(4);\n  out[0] = 0;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  return out;\n}\n\n/**\n * Creates a new vec4 initialized with values from an existing vector\n *\n * @param {vec4} a vector to clone\n * @returns {vec4} a new 4D vector\n */\nexport function clone(a) {\n  let out = new glMatrix.ARRAY_TYPE(4);\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  return out;\n}\n\n/**\n * Creates a new vec4 initialized with the given values\n *\n * @param {Number} x X component\n * @param {Number} y Y component\n * @param {Number} z Z component\n * @param {Number} w W component\n * @returns {vec4} a new 4D vector\n */\nexport function fromValues(x, y, z, w) {\n  let out = new glMatrix.ARRAY_TYPE(4);\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  out[3] = w;\n  return out;\n}\n\n/**\n * Copy the values from one vec4 to another\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a the source vector\n * @returns {vec4} out\n */\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  return out;\n}\n\n/**\n * Set the components of a vec4 to the given values\n *\n * @param {vec4} out the receiving vector\n * @param {Number} x X component\n * @param {Number} y Y component\n * @param {Number} z Z component\n * @param {Number} w W component\n * @returns {vec4} out\n */\nexport function set(out, x, y, z, w) {\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  out[3] = w;\n  return out;\n}\n\n/**\n * Adds two vec4's\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a the first operand\n * @param {vec4} b the second operand\n * @returns {vec4} out\n */\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  out[3] = a[3] + b[3];\n  return out;\n}\n\n/**\n * Subtracts vector b from vector a\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a the first operand\n * @param {vec4} b the second operand\n * @returns {vec4} out\n */\nexport function subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  out[2] = a[2] - b[2];\n  out[3] = a[3] - b[3];\n  return out;\n}\n\n/**\n * Multiplies two vec4's\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a the first operand\n * @param {vec4} b the second operand\n * @returns {vec4} out\n */\nexport function multiply(out, a, b) {\n  out[0] = a[0] * b[0];\n  out[1] = a[1] * b[1];\n  out[2] = a[2] * b[2];\n  out[3] = a[3] * b[3];\n  return out;\n}\n\n/**\n * Divides two vec4's\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a the first operand\n * @param {vec4} b the second operand\n * @returns {vec4} out\n */\nexport function divide(out, a, b) {\n  out[0] = a[0] / b[0];\n  out[1] = a[1] / b[1];\n  out[2] = a[2] / b[2];\n  out[3] = a[3] / b[3];\n  return out;\n}\n\n/**\n * Math.ceil the components of a vec4\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a vector to ceil\n * @returns {vec4} out\n */\nexport function ceil(out, a) {\n  out[0] = Math.ceil(a[0]);\n  out[1] = Math.ceil(a[1]);\n  out[2] = Math.ceil(a[2]);\n  out[3] = Math.ceil(a[3]);\n  return out;\n}\n\n/**\n * Math.floor the components of a vec4\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a vector to floor\n * @returns {vec4} out\n */\nexport function floor(out, a) {\n  out[0] = Math.floor(a[0]);\n  out[1] = Math.floor(a[1]);\n  out[2] = Math.floor(a[2]);\n  out[3] = Math.floor(a[3]);\n  return out;\n}\n\n/**\n * Returns the minimum of two vec4's\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a the first operand\n * @param {vec4} b the second operand\n * @returns {vec4} out\n */\nexport function min(out, a, b) {\n  out[0] = Math.min(a[0], b[0]);\n  out[1] = Math.min(a[1], b[1]);\n  out[2] = Math.min(a[2], b[2]);\n  out[3] = Math.min(a[3], b[3]);\n  return out;\n}\n\n/**\n * Returns the maximum of two vec4's\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a the first operand\n * @param {vec4} b the second operand\n * @returns {vec4} out\n */\nexport function max(out, a, b) {\n  out[0] = Math.max(a[0], b[0]);\n  out[1] = Math.max(a[1], b[1]);\n  out[2] = Math.max(a[2], b[2]);\n  out[3] = Math.max(a[3], b[3]);\n  return out;\n}\n\n/**\n * Math.round the components of a vec4\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a vector to round\n * @returns {vec4} out\n */\nexport function round(out, a) {\n  out[0] = Math.round(a[0]);\n  out[1] = Math.round(a[1]);\n  out[2] = Math.round(a[2]);\n  out[3] = Math.round(a[3]);\n  return out;\n}\n\n/**\n * Scales a vec4 by a scalar number\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a the vector to scale\n * @param {Number} b amount to scale the vector by\n * @returns {vec4} out\n */\nexport function scale(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  out[3] = a[3] * b;\n  return out;\n}\n\n/**\n * Adds two vec4's after scaling the second operand by a scalar value\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a the first operand\n * @param {vec4} b the second operand\n * @param {Number} scale the amount to scale b by before adding\n * @returns {vec4} out\n */\nexport function scaleAndAdd(out, a, b, scale) {\n  out[0] = a[0] + (b[0] * scale);\n  out[1] = a[1] + (b[1] * scale);\n  out[2] = a[2] + (b[2] * scale);\n  out[3] = a[3] + (b[3] * scale);\n  return out;\n}\n\n/**\n * Calculates the euclidian distance between two vec4's\n *\n * @param {vec4} a the first operand\n * @param {vec4} b the second operand\n * @returns {Number} distance between a and b\n */\nexport function distance(a, b) {\n  let x = b[0] - a[0];\n  let y = b[1] - a[1];\n  let z = b[2] - a[2];\n  let w = b[3] - a[3];\n  return Math.sqrt(x*x + y*y + z*z + w*w);\n}\n\n/**\n * Calculates the squared euclidian distance between two vec4's\n *\n * @param {vec4} a the first operand\n * @param {vec4} b the second operand\n * @returns {Number} squared distance between a and b\n */\nexport function squaredDistance(a, b) {\n  let x = b[0] - a[0];\n  let y = b[1] - a[1];\n  let z = b[2] - a[2];\n  let w = b[3] - a[3];\n  return x*x + y*y + z*z + w*w;\n}\n\n/**\n * Calculates the length of a vec4\n *\n * @param {vec4} a vector to calculate length of\n * @returns {Number} length of a\n */\nexport function length(a) {\n  let x = a[0];\n  let y = a[1];\n  let z = a[2];\n  let w = a[3];\n  return Math.sqrt(x*x + y*y + z*z + w*w);\n}\n\n/**\n * Calculates the squared length of a vec4\n *\n * @param {vec4} a vector to calculate squared length of\n * @returns {Number} squared length of a\n */\nexport function squaredLength(a) {\n  let x = a[0];\n  let y = a[1];\n  let z = a[2];\n  let w = a[3];\n  return x*x + y*y + z*z + w*w;\n}\n\n/**\n * Negates the components of a vec4\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a vector to negate\n * @returns {vec4} out\n */\nexport function negate(out, a) {\n  out[0] = -a[0];\n  out[1] = -a[1];\n  out[2] = -a[2];\n  out[3] = -a[3];\n  return out;\n}\n\n/**\n * Returns the inverse of the components of a vec4\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a vector to invert\n * @returns {vec4} out\n */\nexport function inverse(out, a) {\n  out[0] = 1.0 / a[0];\n  out[1] = 1.0 / a[1];\n  out[2] = 1.0 / a[2];\n  out[3] = 1.0 / a[3];\n  return out;\n}\n\n/**\n * Normalize a vec4\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a vector to normalize\n * @returns {vec4} out\n */\nexport function normalize(out, a) {\n  let x = a[0];\n  let y = a[1];\n  let z = a[2];\n  let w = a[3];\n  let len = x*x + y*y + z*z + w*w;\n  if (len > 0) {\n    len = 1 / Math.sqrt(len);\n    out[0] = x * len;\n    out[1] = y * len;\n    out[2] = z * len;\n    out[3] = w * len;\n  }\n  return out;\n}\n\n/**\n * Calculates the dot product of two vec4's\n *\n * @param {vec4} a the first operand\n * @param {vec4} b the second operand\n * @returns {Number} dot product of a and b\n */\nexport function dot(a, b) {\n  return a[0] * b[0] + a[1] * b[1] + a[2] * b[2] + a[3] * b[3];\n}\n\n/**\n * Performs a linear interpolation between two vec4's\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a the first operand\n * @param {vec4} b the second operand\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\n * @returns {vec4} out\n */\nexport function lerp(out, a, b, t) {\n  let ax = a[0];\n  let ay = a[1];\n  let az = a[2];\n  let aw = a[3];\n  out[0] = ax + t * (b[0] - ax);\n  out[1] = ay + t * (b[1] - ay);\n  out[2] = az + t * (b[2] - az);\n  out[3] = aw + t * (b[3] - aw);\n  return out;\n}\n\n/**\n * Generates a random vector with the given scale\n *\n * @param {vec4} out the receiving vector\n * @param {Number} [scale] Length of the resulting vector. If ommitted, a unit vector will be returned\n * @returns {vec4} out\n */\nexport function random(out, vectorScale) {\n  vectorScale = vectorScale || 1.0;\n\n  // Marsaglia, George. Choosing a Point from the Surface of a\n  // Sphere. Ann. Math. Statist. 43 (1972), no. 2, 645--646.\n  // http://projecteuclid.org/euclid.aoms/1177692644;\n  var v1, v2, v3, v4;\n  var s1, s2;\n  do {\n    v1 = glMatrix.RANDOM() * 2 - 1;\n    v2 = glMatrix.RANDOM() * 2 - 1;\n    s1 = v1 * v1 + v2 * v2;\n  } while (s1 >= 1);\n  do {\n    v3 = glMatrix.RANDOM() * 2 - 1;\n    v4 = glMatrix.RANDOM() * 2 - 1;\n    s2 = v3 * v3 + v4 * v4;\n  } while (s2 >= 1);\n\n  var d = Math.sqrt((1 - s1) / s2);\n  out[0] = scale * v1;\n  out[1] = scale * v2;\n  out[2] = scale * v3 * d;\n  out[3] = scale * v4 * d;\n  return out;\n}\n\n/**\n * Transforms the vec4 with a mat4.\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a the vector to transform\n * @param {mat4} m matrix to transform with\n * @returns {vec4} out\n */\nexport function transformMat4(out, a, m) {\n  let x = a[0], y = a[1], z = a[2], w = a[3];\n  out[0] = m[0] * x + m[4] * y + m[8] * z + m[12] * w;\n  out[1] = m[1] * x + m[5] * y + m[9] * z + m[13] * w;\n  out[2] = m[2] * x + m[6] * y + m[10] * z + m[14] * w;\n  out[3] = m[3] * x + m[7] * y + m[11] * z + m[15] * w;\n  return out;\n}\n\n/**\n * Transforms the vec4 with a quat\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a the vector to transform\n * @param {quat} q quaternion to transform with\n * @returns {vec4} out\n */\nexport function transformQuat(out, a, q) {\n  let x = a[0], y = a[1], z = a[2];\n  let qx = q[0], qy = q[1], qz = q[2], qw = q[3];\n\n  // calculate quat * vec\n  let ix = qw * x + qy * z - qz * y;\n  let iy = qw * y + qz * x - qx * z;\n  let iz = qw * z + qx * y - qy * x;\n  let iw = -qx * x - qy * y - qz * z;\n\n  // calculate result * inverse quat\n  out[0] = ix * qw + iw * -qx + iy * -qz - iz * -qy;\n  out[1] = iy * qw + iw * -qy + iz * -qx - ix * -qz;\n  out[2] = iz * qw + iw * -qz + ix * -qy - iy * -qx;\n  out[3] = a[3];\n  return out;\n}\n\n/**\n * Returns a string representation of a vector\n *\n * @param {vec4} a vector to represent as a string\n * @returns {String} string representation of the vector\n */\nexport function str(a) {\n  return 'vec4(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' + a[3] + ')';\n}\n\n/**\n * Returns whether or not the vectors have exactly the same elements in the same position (when compared with ===)\n *\n * @param {vec4} a The first vector.\n * @param {vec4} b The second vector.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3];\n}\n\n/**\n * Returns whether or not the vectors have approximately the same elements in the same position.\n *\n * @param {vec4} a The first vector.\n * @param {vec4} b The second vector.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\nexport function equals(a, b) {\n  let a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3];\n  let b0 = b[0], b1 = b[1], b2 = b[2], b3 = b[3];\n  return (Math.abs(a0 - b0) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a0), Math.abs(b0)) &&\n          Math.abs(a1 - b1) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a1), Math.abs(b1)) &&\n          Math.abs(a2 - b2) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a2), Math.abs(b2)) &&\n          Math.abs(a3 - b3) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a3), Math.abs(b3)));\n}\n\n/**\n * Alias for {@link vec4.subtract}\n * @function\n */\nexport const sub = subtract;\n\n/**\n * Alias for {@link vec4.multiply}\n * @function\n */\nexport const mul = multiply;\n\n/**\n * Alias for {@link vec4.divide}\n * @function\n */\nexport const div = divide;\n\n/**\n * Alias for {@link vec4.distance}\n * @function\n */\nexport const dist = distance;\n\n/**\n * Alias for {@link vec4.squaredDistance}\n * @function\n */\nexport const sqrDist = squaredDistance;\n\n/**\n * Alias for {@link vec4.length}\n * @function\n */\nexport const len = length;\n\n/**\n * Alias for {@link vec4.squaredLength}\n * @function\n */\nexport const sqrLen = squaredLength;\n\n/**\n * Perform some operation over an array of vec4s.\n *\n * @param {Array} a the array of vectors to iterate over\n * @param {Number} stride Number of elements between the start of each vec4. If 0 assumes tightly packed\n * @param {Number} offset Number of elements to skip at the beginning of the array\n * @param {Number} count Number of vec4s to iterate over. If 0 iterates over entire array\n * @param {Function} fn Function to call for each vector in the array\n * @param {Object} [arg] additional argument to pass to fn\n * @returns {Array} a\n * @function\n */\nexport const forEach = (function() {\n  let vec = create();\n\n  return function(a, stride, offset, count, fn, arg) {\n    let i, l;\n    if(!stride) {\n      stride = 4;\n    }\n\n    if(!offset) {\n      offset = 0;\n    }\n\n    if(count) {\n      l = Math.min((count * stride) + offset, a.length);\n    } else {\n      l = a.length;\n    }\n\n    for(i = offset; i < l; i += stride) {\n      vec[0] = a[i]; vec[1] = a[i+1]; vec[2] = a[i+2]; vec[3] = a[i+3];\n      fn(vec, vec, arg);\n      a[i] = vec[0]; a[i+1] = vec[1]; a[i+2] = vec[2]; a[i+3] = vec[3];\n    }\n\n    return a;\n  };\n})();\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/gl-matrix/src/gl-matrix/vec4.js\n// module id = 33\n// module chunks = 0","import { mat4, quat, vec3 } from 'gl-matrix';\n\nimport Camera from '../cameras/Camera';\nimport OrthographicCamera from '../cameras/OrthographicCamera';\nimport PerspectiveCamera from '../cameras/PerspectiveCamera';\nimport { lookAt } from '../math/Utils';\nimport Vector3 from '../math/Vector3';\n\nlet axisAngle = 0;\nconst quaternionAxisAngle = vec3.create();\n\nexport default class Object3D {\n  public children: Object3D[];\n  public localMatrix: mat4;\n  public modelMatrix: mat4;\n  public modelViewMatrix: mat4;\n  public position: Vector3;\n  public rotation: Vector3;\n  public scale: Vector3;\n  public isObject3D: boolean;\n  public parent: Object3D;\n  public matrixAutoUpdate: boolean;\n  public quaternion: quat;\n  public quaternionLookAt: quat;\n  public lookAtUp: vec3;\n\n  constructor() {\n    this.children = [];\n    this.localMatrix = mat4.create();\n    this.modelMatrix = mat4.create();\n    this.modelViewMatrix = mat4.create();\n    this.matrixAutoUpdate = true;\n    this.position = new Vector3();\n    this.rotation = new Vector3();\n    this.scale = new Vector3(1, 1, 1);\n    this.isObject3D = true;\n    this.quaternion = quat.create();\n    this.quaternionLookAt = quat.create();\n    this.lookAtUp = vec3.create(); // needs to be [0, 0, 0] although it should be [0, 1, 0]\n  }\n\n  public updateMatrix(camera: Camera | PerspectiveCamera | OrthographicCamera) {\n    mat4.identity(this.modelViewMatrix);\n\n    if (this.matrixAutoUpdate) {\n      // Reset\n      mat4.identity(this.localMatrix);\n      mat4.identity(this.modelMatrix);\n      quat.identity(this.quaternion);\n\n      // If Object3D has a parent, copy the computed modelMatrix into localMatrix\n      if (this.parent) {\n        mat4.copy(this.localMatrix, this.parent.modelMatrix);\n        mat4.multiply(this.modelMatrix, this.modelMatrix, this.localMatrix);\n      }\n\n      // Use lookAt quat as base\n      // Note: this.rotation isn't updated if lookAt's used\n      quat.copy(this.quaternion, this.quaternionLookAt);\n\n      // Apply local transitions to modelMatrix\n      mat4.translate(this.modelMatrix, this.modelMatrix, this.position.v);\n      quat.rotateX(this.quaternion, this.quaternion, this.rotation.x);\n      quat.rotateY(this.quaternion, this.quaternion, this.rotation.y);\n      quat.rotateZ(this.quaternion, this.quaternion, this.rotation.z);\n      axisAngle = quat.getAxisAngle(quaternionAxisAngle, this.quaternion);\n      mat4.rotate(\n        this.modelMatrix,\n        this.modelMatrix,\n        axisAngle,\n        quaternionAxisAngle\n      );\n      mat4.scale(this.modelMatrix, this.modelMatrix, this.scale.v);\n    }\n\n    // Model View Matrix\n    if (camera) {\n      mat4.multiply(\n        this.modelViewMatrix,\n        camera.worldInverseMatrix,\n        this.modelMatrix\n      );\n    }\n  }\n\n  public lookAt(target: Vector3) {\n    quat.identity(this.quaternionLookAt);\n    this.quaternionLookAt = lookAt(this.position.v, target.v, this.lookAtUp);\n  }\n\n  public setParent(parent: Object3D) {\n    this.unParent();\n    if (parent.isObject3D) {\n      parent.children.push(this);\n      this.parent = parent;\n    }\n  }\n\n  public unParent() {\n    if (this.parent === undefined) return;\n    const objectIndex = this.parent.children.indexOf(this);\n    if (objectIndex !== -1) {\n      this.parent.children.splice(objectIndex, 1);\n      this.parent = null;\n    }\n  }\n\n  public dispose() {\n    this.unParent();\n    this.children = [];\n    this.localMatrix = null;\n    this.modelMatrix = null;\n    this.position = null;\n    this.rotation = null;\n    this.scale = null;\n    this.quaternion = null;\n    this.isObject3D = null;\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/core/Object3D.ts","import { extensions } from './Capabilities';\nimport * as GL from './GL';\n\nlet gl: WebGL2RenderingContext | WebGLRenderingContext;\n\nexport default class Vao {\n  public vao: any;\n\n  constructor() {\n    gl = GL.get();\n    if (gl instanceof WebGL2RenderingContext) {\n      this.vao = gl.createVertexArray();\n    } else if (extensions.vertexArrayObject) {\n      this.vao = extensions.vertexArrayObject.createVertexArrayOES();\n    }\n  }\n\n  public bind() {\n    if (gl instanceof WebGL2RenderingContext) {\n      gl.bindVertexArray(this.vao);\n    } else if (extensions.vertexArrayObject) {\n      extensions.vertexArrayObject.bindVertexArrayOES(this.vao);\n    }\n  }\n\n  public unbind() {\n    if (gl instanceof WebGL2RenderingContext) {\n      gl.bindVertexArray(null);\n    } else if (extensions.vertexArrayObject) {\n      extensions.vertexArrayObject.bindVertexArrayOES(null);\n    }\n  }\n\n  public dispose() {\n    if (gl instanceof WebGL2RenderingContext) {\n      gl.deleteVertexArray(this.vao);\n    } else if (extensions.vertexArrayObject) {\n      extensions.vertexArrayObject.deleteVertexArrayOES(this.vao);\n    }\n    this.vao = null;\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/core/Vao.ts","import { vec3 } from 'gl-matrix';\nimport Sphere from './Sphere';\nimport Vector3 from './Vector3';\n\nconst diff = vec3.create();\nconst edge1 = vec3.create();\nconst edge2 = vec3.create();\nconst normal = vec3.create();\nconst v1 = vec3.create();\n\nexport default class Ray {\n  public origin: Vector3;\n  public direction: Vector3;\n\n  constructor() {\n    this.origin = new Vector3();\n    this.direction = new Vector3();\n  }\n\n  public set(origin: Vector3, direction: Vector3) {\n    this.origin.copy(origin);\n    this.direction.copy(direction);\n  }\n\n  public intersectTriangle(a: Vector3, b: Vector3, c: Vector3, culling = true) {\n    vec3.sub(edge1, b.v, a.v);\n    vec3.sub(edge2, c.v, a.v);\n    vec3.cross(normal, edge1, edge2);\n\n    // Solve Q + t*D = b1*E1 + b2*E2 (Q = kDiff, D = ray direction,\n    // E1 = kEdge1, E2 = kEdge2, N = Cross(E1,E2)) by\n    //   |Dot(D,N)|*b1 = sign(Dot(D,N))*Dot(D,Cross(Q,E2))\n    //   |Dot(D,N)|*b2 = sign(Dot(D,N))*Dot(D,Cross(E1,Q))\n    //   |Dot(D,N)|*t = -sign(Dot(D,N))*Dot(Q,N)\n\n    // console.log('normal', normal);\n    let DdN = vec3.dot(this.direction.v, normal);\n    let sign;\n\n    // console.log('normal', normal);\n\n    if (DdN > 0) {\n      if (culling) return null;\n      sign = 1;\n    } else if (DdN < 0) {\n      sign = -1;\n      DdN = -DdN;\n    } else {\n      return null;\n    }\n\n    vec3.sub(diff, this.origin.v, a.v);\n    vec3.cross(edge2, diff, edge2);\n    const DdQxE2 = sign * vec3.dot(this.direction.v, edge2);\n\n    // b1 < 0, no intersection\n    if (DdQxE2 < 0) {\n      return null;\n    }\n\n    vec3.cross(edge1, edge1, diff);\n    const DdE1xQ = sign * vec3.dot(this.direction.v, edge1);\n\n    // b2 < 0, no intersection\n    if (DdE1xQ < 0) {\n      return null;\n    }\n\n    // b1+b2 > 1, no intersection\n    if (DdQxE2 + DdE1xQ > DdN) {\n      return null;\n    }\n\n    // Line intersects triangle, check if ray does.\n    const QdN = -sign * vec3.dot(diff, normal);\n\n    // t < 0, no intersection\n    if (QdN < 0) {\n      return null;\n    }\n\n    const result = new Vector3();\n    result\n      .copy(this.direction)\n      .scale(QdN / DdN)\n      .add(this.origin);\n\n    return result;\n  }\n\n  public at(scale: number) {\n    const result = vec3.fromValues(\n      this.direction.v[0],\n      this.direction.v[1],\n      this.direction.v[2]\n    );\n    vec3.scale(result, result, scale);\n    vec3.add(result, result, this.origin.v);\n  }\n\n  public intersectsSphere(sphere) {\n    return this.distanceToPoint(sphere.center) <= sphere.radius;\n  }\n\n  public distanceToPoint(point) {\n    return Math.sqrt(this.distanceSqToPoint(point));\n  }\n\n  public distanceSqToPoint(point: Vector3) {\n    vec3.subtract(v1, point.v, this.origin.v);\n    const directionDistance = vec3.dot(v1, this.direction.v);\n\n    // point behind the ray\n    if (directionDistance < 0) {\n      return vec3.squaredDistance(this.origin.v, point.v);\n    }\n\n    vec3.copy(v1, this.direction.v);\n    vec3.scale(v1, v1, directionDistance);\n    vec3.add(v1, v1, this.origin.v);\n\n    return vec3.squaredDistance(v1, point.v);\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/math/Ray.ts","export default function() {\n  try {\n    const renderingContext = WebGLRenderingContext;\n    const canvasWebgl = document.createElement('canvas');\n    const canvasWebg2 = document.createElement('canvas');\n    const webgl2Context = canvasWebg2.getContext('webgl2');\n    const webglContext =\n      canvasWebgl.getContext('webgl') ||\n      canvasWebgl.getContext('experimental-webgl');\n    if (renderingContext === undefined) {\n      return false;\n    }\n    return {\n      webgl: !!webglContext,\n      webgl2: !!webgl2Context\n    };\n  } catch (error) {\n    return false;\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/utils/Detect.ts","const pointLightsEs300 = `\n\tstruct PointLight {\n\t\tvec4 position;\n\t\tvec4 color;\n\t\tvec4 specularColor;\n\t\tvec4 shininess;\n\t\tvec4 intensity;\n\t};\n\tuniform PointLights {\n\t\tPointLight uPointLights[#HOOK_POINT_LIGHTS];\n\t};\n`;\n\nconst pointLightsEs100 = `\n\tstruct PointLight {\n\t\tvec3 position;\n\t\tvec3 color;\n\t\tvec3 specularColor;\n\t\tfloat shininess;\n\t\tfloat intensity;\n\t};\n\tuniform PointLight uPointLights[#HOOK_POINT_LIGHTS];\n`;\n\nexport { pointLightsEs300, pointLightsEs100 };\n\n\n\n// WEBPACK FOOTER //\n// ./src/shaders/chunks/PointLights.glsl.ts","export const definePI = `\n#define PI 3.141592653589793\n`;\n\nexport const definePITwo = `\n#define TWO_PI 6.283185307179586\n`;\n\nexport const mapLinear = `\nfloat mapLinear(float value, float in_min, float in_max, float out_min, float out_max) {\n\treturn (value - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;\n}\n`;\n\nexport default {\n  definePI,\n  definePITwo,\n  mapLinear\n};\n\n\n\n// WEBPACK FOOTER //\n// ./src/shaders/chunks/Math.glsl.ts","import Vector2 from '../math/Vector2';\nimport Vector3 from '../math/Vector3';\nexport function flatten(arr: any /* [number[] | Vector3[] | Vector2[]] */) {\n  return arr.reduce((a, b) => {\n    if (b instanceof Vector2 || b instanceof Vector3) {\n      return a.concat(...b.v);\n    }\n    return a.concat(b);\n  }, []);\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/utils/Array.ts","import * as GL from '../core/GL';\n\nlet gl: WebGL2RenderingContext | WebGLRenderingContext;\n\nexport default class BufferAttribute {\n  public type: number;\n  public data: number[];\n  public itemSize: number;\n  public numItems: number;\n  public buffer: WebGLBuffer;\n  public shaderAttribute: boolean;\n\n  constructor(\n    type: GLenum,\n    data: any, // Float32Array | Uint16Array | Uint32Array, (typings are wrong for createBuffer)\n    itemSize: number,\n    shaderAttribute = true\n  ) {\n    this.type = type;\n    this.itemSize = itemSize;\n    this.numItems = data.length / itemSize;\n    this.buffer = GL.createBuffer(type, data);\n    this.shaderAttribute = shaderAttribute;\n  }\n\n  public bind() {\n    gl = GL.get();\n    gl.bindBuffer(this.type, this.buffer);\n  }\n\n  public unbind() {\n    gl = GL.get();\n    gl.bindBuffer(this.type, null);\n  }\n\n  public update(data: Float32Array) {\n    this.bind();\n    gl = GL.get();\n    gl.bufferSubData(this.type, 0, data);\n    this.unbind();\n  }\n\n  public dispose() {\n    gl = GL.get();\n    gl.deleteBuffer(this.buffer);\n    this.buffer = null;\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/geometry/BufferAttribute.ts","import Geometry from './Geometry';\n\nexport default class LineGeometry extends Geometry {\n  constructor(bufferVertices: number[] | Float32Array) {\n    const vertices = [];\n    let i3 = 0;\n    let i6 = 0;\n    const length = bufferVertices.length / 3;\n    for (let i = 0; i < length; i += 1) {\n      i3 = i * 3;\n      i6 = i * 6;\n      if (i < length - 1) {\n        vertices[i6] = bufferVertices[i3];\n        vertices[i6 + 1] = bufferVertices[i3 + 1];\n        vertices[i6 + 2] = bufferVertices[i3 + 2];\n        vertices[i6 + 3] = bufferVertices[i3 + 3];\n        vertices[i6 + 4] = bufferVertices[i3 + 4];\n        vertices[i6 + 5] = bufferVertices[i3 + 5];\n      }\n    }\n    super(new Float32Array(vertices));\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/geometry/LineGeometry.ts","import Geometry from './Geometry';\n\nexport default class SphereGeometry extends Geometry {\n  constructor(\n    radius = 1,\n    axisDivisions = 8,\n    heightDivisons = 8,\n    colors?: Float32Array\n  ) {\n    // https://github.com/gpjt/webgl-lessons/blob/master/lesson12/index.html\n\n    const vertices = [];\n    const normals = [];\n    const uvs = [];\n    for (let axisNumber = 0; axisNumber <= axisDivisions; axisNumber += 1) {\n      const theta = axisNumber * Math.PI / axisDivisions;\n      const sinTheta = Math.sin(theta);\n      const cosTheta = Math.cos(theta);\n      for (\n        let heightNumber = 0;\n        heightNumber <= heightDivisons;\n        heightNumber += 1\n      ) {\n        const phi = heightNumber * 2 * Math.PI / heightDivisons;\n        const sinPhi = Math.sin(phi);\n        const cosPhi = Math.cos(phi);\n        const x = cosPhi * sinTheta;\n        const y = cosTheta;\n        const z = sinPhi * sinTheta;\n        const u = 1 - heightNumber / heightDivisons;\n        const v = 1 - axisNumber / axisDivisions;\n        normals.push(x);\n        normals.push(y);\n        normals.push(z);\n        uvs.push(u);\n        uvs.push(v);\n        vertices.push(radius * x);\n        vertices.push(radius * y);\n        vertices.push(radius * z);\n      }\n    }\n\n    const indices = [];\n    for (let axisNumber = 0; axisNumber < axisDivisions; axisNumber += 1) {\n      for (\n        let heightNumber = 0;\n        heightNumber < heightDivisons;\n        heightNumber += 1\n      ) {\n        const first = axisNumber * (heightDivisons + 1) + heightNumber;\n        const second = first + heightDivisons + 1;\n        indices.push(first);\n        indices.push(second);\n        indices.push(first + 1);\n        indices.push(second);\n        indices.push(second + 1);\n        indices.push(first + 1);\n      }\n    }\n\n    super(\n      new Float32Array(vertices),\n      new Uint16Array(indices),\n      new Float32Array(normals),\n      new Float32Array(uvs),\n      colors\n    );\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/geometry/SphereGeometry.ts","/**\n  A javascript Bezier curve library by Pomax.\n\n  Based on http://pomax.github.io/bezierinfo\n\n  This code is MIT licensed.\n**/\n(function() {\n  \"use strict\";\n\n  // math-inlining.\n  var abs = Math.abs,\n      min = Math.min,\n      max = Math.max,\n      acos = Math.acos,\n      sqrt = Math.sqrt,\n      pi = Math.PI,\n      // a zero coordinate, which is surprisingly useful\n      ZERO = {x:0,y:0,z:0};\n\n  // quite needed\n  var utils = require('./utils.js');\n\n  // not quite needed, but eventually this'll be useful...\n  var PolyBezier = require('./poly-bezier.js');\n\n  /**\n   * Bezier curve constructor. The constructor argument can be one of three things:\n   *\n   * 1. array/4 of {x:..., y:..., z:...}, z optional\n   * 2. numerical array/8 ordered x1,y1,x2,y2,x3,y3,x4,y4\n   * 3. numerical array/12 ordered x1,y1,z1,x2,y2,z2,x3,y3,z3,x4,y4,z4\n   *\n   */\n  var Bezier = function(coords) {\n    var args = (coords && coords.forEach) ? coords : [].slice.call(arguments);\n    var coordlen = false;\n    if(typeof args[0] === \"object\") {\n      coordlen = args.length;\n      var newargs = [];\n      args.forEach(function(point) {\n        ['x','y','z'].forEach(function(d) {\n          if(typeof point[d] !== \"undefined\") {\n            newargs.push(point[d]);\n          }\n        });\n      });\n      args = newargs;\n    }\n    var higher = false;\n    var len = args.length;\n    if (coordlen) {\n      if(coordlen>4) {\n        if (arguments.length !== 1) {\n          throw new Error(\"Only new Bezier(point[]) is accepted for 4th and higher order curves\");\n        }\n        higher = true;\n      }\n    } else {\n      if(len!==6 && len!==8 && len!==9 && len!==12) {\n        if (arguments.length !== 1) {\n          throw new Error(\"Only new Bezier(point[]) is accepted for 4th and higher order curves\");\n        }\n      }\n    }\n    var _3d = (!higher && (len === 9 || len === 12)) || (coords && coords[0] && typeof coords[0].z !== \"undefined\");\n    this._3d = _3d;\n    var points = [];\n    for(var idx=0, step=(_3d ? 3 : 2); idx<len; idx+=step) {\n      var point = {\n        x: args[idx],\n        y: args[idx+1]\n      };\n      if(_3d) { point.z = args[idx+2] };\n      points.push(point);\n    }\n    this.order = points.length - 1;\n    this.points = points;\n    var dims = ['x','y'];\n    if(_3d) dims.push('z');\n    this.dims = dims;\n    this.dimlen = dims.length;\n\n    (function(curve) {\n      var order = curve.order;\n      var points = curve.points;\n      var a = utils.align(points, {p1:points[0], p2:points[order]});\n      for(var i=0; i<a.length; i++) {\n        if(abs(a[i].y) > 0.0001) {\n          curve._linear = false;\n          return;\n        }\n      }\n      curve._linear = true;\n    }(this));\n\n    this._t1 = 0;\n    this._t2 = 1;\n    this.update();\n  };\n\n  Bezier.fromSVG = function(svgString) {\n    var list = svgString.match(/[-+]?\\d*\\.?\\d+(?:[eE][-+]?\\d+)?/g).map(parseFloat);\n    var relative = /[cq]/.test(svgString);\n    if(!relative) return new Bezier(list);\n    list = list.map(function(v,i) {\n      return i < 2 ? v : v + list[i % 2];\n    });\n    return new Bezier(list);\n  };\n\n  function getABC(n,S,B,E,t) {\n    if(typeof t === \"undefined\") { t = 0.5; }\n    var u = utils.projectionratio(t,n),\n        um = 1-u,\n        C = {\n          x: u*S.x + um*E.x,\n          y: u*S.y + um*E.y\n        },\n        s = utils.abcratio(t,n),\n        A = {\n          x: B.x + (B.x-C.x)/s,\n          y: B.y + (B.y-C.y)/s\n        };\n    return { A:A, B:B, C:C };\n  }\n\n  Bezier.quadraticFromPoints = function(p1,p2,p3, t) {\n    if(typeof t === \"undefined\") { t = 0.5; }\n    // shortcuts, although they're really dumb\n    if(t===0) { return new Bezier(p2,p2,p3); }\n    if(t===1) { return new Bezier(p1,p2,p2); }\n    // real fitting.\n    var abc = getABC(2,p1,p2,p3,t);\n    return new Bezier(p1, abc.A, p3);\n  };\n\n  Bezier.cubicFromPoints = function(S,B,E, t,d1) {\n    if(typeof t === \"undefined\") { t = 0.5; }\n    var abc = getABC(3,S,B,E,t);\n    if(typeof d1 === \"undefined\") { d1 = utils.dist(B,abc.C); }\n    var d2 = d1 * (1-t)/t;\n\n    var selen = utils.dist(S,E),\n        lx = (E.x-S.x)/selen,\n        ly = (E.y-S.y)/selen,\n        bx1 = d1 * lx,\n        by1 = d1 * ly,\n        bx2 = d2 * lx,\n        by2 = d2 * ly;\n    // derivation of new hull coordinates\n    var e1  = { x: B.x - bx1, y: B.y - by1 },\n        e2  = { x: B.x + bx2, y: B.y + by2 },\n        A = abc.A,\n        v1  = { x: A.x + (e1.x-A.x)/(1-t), y: A.y + (e1.y-A.y)/(1-t) },\n        v2  = { x: A.x + (e2.x-A.x)/(t), y: A.y + (e2.y-A.y)/(t) },\n        nc1 = { x: S.x + (v1.x-S.x)/(t), y: S.y + (v1.y-S.y)/(t) },\n        nc2 = { x: E.x + (v2.x-E.x)/(1-t), y: E.y + (v2.y-E.y)/(1-t) };\n    // ...done\n    return new Bezier(S,nc1,nc2,E);\n  };\n\n  var getUtils = function() {\n    return utils;\n  };\n\n  Bezier.getUtils = getUtils;\n\n  Bezier.prototype = {\n    getUtils: getUtils,\n    valueOf: function() {\n      return this.toString();\n    },\n    toString: function() {\n      return utils.pointsToString(this.points);\n    },\n    toSVG: function(relative) {\n      if(this._3d) return false;\n      var p = this.points,\n          x = p[0].x,\n          y = p[0].y,\n          s = [\"M\", x, y, (this.order===2 ? \"Q\":\"C\")];\n      for(var i=1, last=p.length; i<last; i++) {\n        s.push(p[i].x);\n        s.push(p[i].y);\n      }\n      return s.join(\" \");\n    },\n    update: function() {\n      // one-time compute derivative coordinates\n      this.dpoints = [];\n      for(var p=this.points, d=p.length, c=d-1; d>1; d--, c--) {\n        var list = [];\n        for(var j=0, dpt; j<c; j++) {\n          dpt = {\n            x: c * (p[j+1].x - p[j].x),\n            y: c * (p[j+1].y - p[j].y)\n          };\n          if(this._3d) {\n            dpt.z = c * (p[j+1].z - p[j].z);\n          }\n          list.push(dpt);\n        }\n        this.dpoints.push(list);\n        p = list;\n      };\n      this.computedirection();\n    },\n    computedirection: function() {\n      var points = this.points;\n      var angle = utils.angle(points[0], points[this.order], points[1]);\n      this.clockwise = angle > 0;\n    },\n    length: function() {\n      return utils.length(this.derivative.bind(this));\n    },\n    _lut: [],\n    getLUT: function(steps) {\n      steps = steps || 100;\n      if (this._lut.length === steps) { return this._lut; }\n      this._lut = [];\n      for(var t=0; t<=steps; t++) {\n        this._lut.push(this.compute(t/steps));\n      }\n      return this._lut;\n    },\n    on: function(point, error) {\n      error = error || 5;\n      var lut = this.getLUT(), hits = [], c, t=0;\n      for(var i=0; i<lut.length; i++) {\n        c = lut[i];\n        if (utils.dist(c,point) < error) {\n          hits.push(c)\n          t += i / lut.length;\n        }\n      }\n      if(!hits.length) return false;\n      return t /= hits.length;\n    },\n    project: function(point) {\n      // step 1: coarse check\n      var LUT = this.getLUT(), l = LUT.length-1,\n          closest = utils.closest(LUT, point),\n          mdist = closest.mdist,\n          mpos = closest.mpos;\n      if (mpos===0 || mpos===l) {\n        var t = mpos/l, pt = this.compute(t);\n        pt.t = t;\n        pt.d = mdist;\n        return pt;\n      }\n\n      // step 2: fine check\n      var ft, t, p, d,\n          t1 = (mpos-1)/l,\n          t2 = (mpos+1)/l,\n          step = 0.1/l;\n      mdist += 1;\n      for(t=t1,ft=t; t<t2+step; t+=step) {\n        p = this.compute(t);\n        d = utils.dist(point, p);\n        if (d<mdist) {\n          mdist = d;\n          ft = t;\n        }\n      }\n      p = this.compute(ft);\n      p.t = ft;\n      p.d = mdist;\n      return p;\n    },\n    get: function(t) {\n      return this.compute(t);\n    },\n    point: function(idx) {\n      return this.points[idx];\n    },\n    compute: function(t) {\n      // shortcuts\n      if(t===0) { return this.points[0]; }\n      if(t===1) { return this.points[this.order]; }\n\n      var p = this.points;\n      var mt = 1-t;\n\n      // linear?\n      if(this.order===1) {\n        ret = {\n          x: mt*p[0].x + t*p[1].x,\n          y: mt*p[0].y + t*p[1].y\n        };\n        if (this._3d) { ret.z = mt*p[0].z + t*p[1].z; }\n        return ret;\n      }\n\n      // quadratic/cubic curve?\n      if(this.order<4) {\n        var mt2 = mt*mt,\n            t2 = t*t,\n            a,b,c,d = 0;\n        if(this.order===2) {\n          p = [p[0], p[1], p[2], ZERO];\n          a = mt2;\n          b = mt*t*2;\n          c = t2;\n        }\n        else if(this.order===3) {\n          a = mt2*mt;\n          b = mt2*t*3;\n          c = mt*t2*3;\n          d = t*t2;\n        }\n        var ret = {\n          x: a*p[0].x + b*p[1].x + c*p[2].x + d*p[3].x,\n          y: a*p[0].y + b*p[1].y + c*p[2].y + d*p[3].y\n        };\n        if(this._3d) {\n          ret.z = a*p[0].z + b*p[1].z + c*p[2].z + d*p[3].z;\n        }\n        return ret;\n      }\n\n      // higher order curves: use de Casteljau's computation\n      var dCpts = JSON.parse(JSON.stringify(this.points));\n      while(dCpts.length > 1) {\n        for (var i=0; i<dCpts.length-1; i++) {\n          dCpts[i] = {\n            x: dCpts[i].x + (dCpts[i+1].x - dCpts[i].x) * t,\n            y: dCpts[i].y + (dCpts[i+1].y - dCpts[i].y) * t\n          };\n          if (typeof dCpts[i].z !== \"undefined\") {\n            dCpts[i] = dCpts[i].z + (dCpts[i+1].z - dCpts[i].z) * t\n          }\n        }\n        dCpts.splice(dCpts.length-1, 1);\n      }\n      return dCpts[0];\n    },\n    raise: function() {\n      var p = this.points, np = [p[0]], i, k=p.length, pi, pim;\n      for (var i=1; i<k; i++) {\n        pi = p[i];\n        pim = p[i-1];\n        np[i] = {\n          x: (k-i)/k * pi.x + i/k * pim.x,\n          y: (k-i)/k * pi.y + i/k * pim.y\n        };\n      }\n      np[k] = p[k-1];\n      return new Bezier(np);\n    },\n    derivative: function(t) {\n      var mt = 1-t,\n          a,b,c=0,\n          p = this.dpoints[0];\n      if(this.order===2) { p = [p[0], p[1], ZERO]; a = mt; b = t; }\n      if(this.order===3) { a = mt*mt; b = mt*t*2; c = t*t; }\n      var ret = {\n        x: a*p[0].x + b*p[1].x + c*p[2].x,\n        y: a*p[0].y + b*p[1].y + c*p[2].y\n      };\n      if(this._3d) {\n        ret.z = a*p[0].z + b*p[1].z + c*p[2].z;\n      }\n      return ret;\n    },\n    inflections: function() {\n      return utils.inflections(this.points);\n    },\n    normal: function(t) {\n      return this._3d ? this.__normal3(t) : this.__normal2(t);\n    },\n    __normal2: function(t) {\n      var d = this.derivative(t);\n      var q = sqrt(d.x*d.x + d.y*d.y)\n      return { x: -d.y/q, y: d.x/q };\n    },\n    __normal3: function(t) {\n      // see http://stackoverflow.com/questions/25453159\n      var r1 = this.derivative(t),\n          r2 = this.derivative(t+0.01),\n          q1 = sqrt(r1.x*r1.x + r1.y*r1.y + r1.z*r1.z),\n          q2 = sqrt(r2.x*r2.x + r2.y*r2.y + r2.z*r2.z);\n      r1.x /= q1; r1.y /= q1; r1.z /= q1;\n      r2.x /= q2; r2.y /= q2; r2.z /= q2;\n      // cross product\n      var c = {\n        x: r2.y*r1.z - r2.z*r1.y,\n        y: r2.z*r1.x - r2.x*r1.z,\n        z: r2.x*r1.y - r2.y*r1.x\n      };\n      var m = sqrt(c.x*c.x + c.y*c.y + c.z*c.z);\n      c.x /= m; c.y /= m; c.z /= m;\n      // rotation matrix\n      var R = [   c.x*c.x,   c.x*c.y-c.z, c.x*c.z+c.y,\n                c.x*c.y+c.z,   c.y*c.y,   c.y*c.z-c.x,\n                c.x*c.z-c.y, c.y*c.z+c.x,   c.z*c.z    ];\n      // normal vector:\n      var n = {\n        x: R[0] * r1.x + R[1] * r1.y + R[2] * r1.z,\n        y: R[3] * r1.x + R[4] * r1.y + R[5] * r1.z,\n        z: R[6] * r1.x + R[7] * r1.y + R[8] * r1.z\n      };\n      return n;\n    },\n    hull: function(t) {\n      var p = this.points,\n          _p = [],\n          pt,\n          q = [],\n          idx = 0,\n          i=0,\n          l=0;\n      q[idx++] = p[0];\n      q[idx++] = p[1];\n      q[idx++] = p[2];\n      if(this.order === 3) { q[idx++] = p[3]; }\n      // we lerp between all points at each iteration, until we have 1 point left.\n      while(p.length>1) {\n        _p = [];\n        for(i=0, l=p.length-1; i<l; i++) {\n          pt = utils.lerp(t,p[i],p[i+1]);\n          q[idx++] = pt;\n          _p.push(pt);\n        }\n        p = _p;\n      }\n      return q;\n    },\n    split: function(t1, t2) {\n      // shortcuts\n      if(t1===0 && !!t2) { return this.split(t2).left; }\n      if(t2===1) { return this.split(t1).right; }\n\n      // no shortcut: use \"de Casteljau\" iteration.\n      var q = this.hull(t1);\n      var result = {\n        left: this.order === 2 ? new Bezier([q[0],q[3],q[5]]) : new Bezier([q[0],q[4],q[7],q[9]]),\n        right: this.order === 2 ? new Bezier([q[5],q[4],q[2]]) : new Bezier([q[9],q[8],q[6],q[3]]),\n        span: q\n      };\n\n      // make sure we bind _t1/_t2 information!\n      result.left._t1  = utils.map(0,  0,1, this._t1,this._t2);\n      result.left._t2  = utils.map(t1, 0,1, this._t1,this._t2);\n      result.right._t1 = utils.map(t1, 0,1, this._t1,this._t2);\n      result.right._t2 = utils.map(1,  0,1, this._t1,this._t2);\n\n      // if we have no t2, we're done\n      if(!t2) { return result; }\n\n      // if we have a t2, split again:\n      t2 = utils.map(t2,t1,1,0,1);\n      var subsplit = result.right.split(t2);\n      return subsplit.left;\n    },\n    extrema: function() {\n      var dims = this.dims,\n          result={},\n          roots=[],\n          p, mfn;\n      dims.forEach(function(dim) {\n        mfn = function(v) { return v[dim]; };\n        p = this.dpoints[0].map(mfn);\n        result[dim] = utils.droots(p);\n        if(this.order === 3) {\n          p = this.dpoints[1].map(mfn);\n          result[dim] = result[dim].concat(utils.droots(p));\n        }\n        result[dim] = result[dim].filter(function(t) { return (t>=0 && t<=1); });\n        roots = roots.concat(result[dim].sort());\n      }.bind(this));\n      roots = roots.sort().filter(function(v,idx) { return (roots.indexOf(v) === idx); });\n      result.values = roots;\n      return result;\n    },\n    bbox: function() {\n      var extrema = this.extrema(), result = {};\n      this.dims.forEach(function(d) {\n        result[d] = utils.getminmax(this, d, extrema[d]);\n      }.bind(this));\n      return result;\n    },\n    overlaps: function(curve) {\n      var lbbox = this.bbox(),\n          tbbox = curve.bbox();\n      return utils.bboxoverlap(lbbox,tbbox);\n    },\n    offset: function(t, d) {\n      if(typeof d !== \"undefined\") {\n        var c = this.get(t);\n        var n = this.normal(t);\n        var ret = {\n          c: c,\n          n: n,\n          x: c.x + n.x * d,\n          y: c.y + n.y * d\n        };\n        if(this._3d) {\n          ret.z = c.z + n.z * d;\n        };\n        return ret;\n      }\n      if(this._linear) {\n        var nv = this.normal(0);\n        var coords = this.points.map(function(p) {\n          var ret = {\n            x: p.x + t * nv.x,\n            y: p.y + t * nv.y\n          };\n          if(p.z && n.z) { ret.z = p.z + t * nv.z; }\n          return ret;\n        });\n        return [new Bezier(coords)];\n      }\n      var reduced = this.reduce();\n      return reduced.map(function(s) {\n        return s.scale(t);\n      });\n    },\n    simple: function() {\n      if(this.order===3) {\n        var a1 = utils.angle(this.points[0], this.points[3], this.points[1]);\n        var a2 = utils.angle(this.points[0], this.points[3], this.points[2]);\n        if(a1>0 && a2<0 || a1<0 && a2>0) return false;\n      }\n      var n1 = this.normal(0);\n      var n2 = this.normal(1);\n      var s = n1.x*n2.x + n1.y*n2.y;\n      if(this._3d) { s += n1.z*n2.z; }\n      var angle = abs(acos(s));\n      return angle < pi/3;\n    },\n    reduce: function() {\n      var i, t1=0, t2=0, step=0.01, segment, pass1=[], pass2=[];\n      // first pass: split on extrema\n      var extrema = this.extrema().values;\n      if(extrema.indexOf(0)===-1) { extrema = [0].concat(extrema); }\n      if(extrema.indexOf(1)===-1) { extrema.push(1); }\n\n      for(t1=extrema[0], i=1; i<extrema.length; i++) {\n        t2 = extrema[i];\n        segment = this.split(t1,t2);\n        segment._t1 = t1;\n        segment._t2 = t2;\n        pass1.push(segment);\n        t1 = t2;\n      }\n\n      // second pass: further reduce these segments to simple segments\n      pass1.forEach(function(p1) {\n        t1=0;\n        t2=0;\n        while(t2 <= 1) {\n          for(t2=t1+step; t2<=1+step; t2+=step) {\n            segment = p1.split(t1,t2);\n            if(!segment.simple()) {\n              t2 -= step;\n              if(abs(t1-t2)<step) {\n                // we can never form a reduction\n                return [];\n              }\n              segment = p1.split(t1,t2);\n              segment._t1 = utils.map(t1,0,1,p1._t1,p1._t2);\n              segment._t2 = utils.map(t2,0,1,p1._t1,p1._t2);\n              pass2.push(segment);\n              t1 = t2;\n              break;\n            }\n          }\n        }\n        if(t1<1) {\n          segment = p1.split(t1,1);\n          segment._t1 = utils.map(t1,0,1,p1._t1,p1._t2);\n          segment._t2 = p1._t2;\n          pass2.push(segment);\n        }\n      });\n      return pass2;\n    },\n    scale: function(d) {\n      var order = this.order;\n      var distanceFn = false\n      if(typeof d === \"function\") { distanceFn = d; }\n      if(distanceFn && order === 2) { return this.raise().scale(distanceFn); }\n\n      // TODO: add special handling for degenerate (=linear) curves.\n      var clockwise = this.clockwise;\n      var r1 = distanceFn ? distanceFn(0) : d;\n      var r2 = distanceFn ? distanceFn(1) : d;\n      var v = [ this.offset(0,10), this.offset(1,10) ];\n      var o = utils.lli4(v[0], v[0].c, v[1], v[1].c);\n      if(!o) { throw new Error(\"cannot scale this curve. Try reducing it first.\"); }\n      // move all points by distance 'd' wrt the origin 'o'\n      var points=this.points, np=[];\n\n      // move end points by fixed distance along normal.\n      [0,1].forEach(function(t) {\n        var p = np[t*order] = utils.copy(points[t*order]);\n        p.x += (t?r2:r1) * v[t].n.x;\n        p.y += (t?r2:r1) * v[t].n.y;\n      }.bind(this));\n\n      if (!distanceFn) {\n        // move control points to lie on the intersection of the offset\n        // derivative vector, and the origin-through-control vector\n        [0,1].forEach(function(t) {\n          if(this.order===2 && !!t) return;\n          var p = np[t*order];\n          var d = this.derivative(t);\n          var p2 = { x: p.x + d.x, y: p.y + d.y };\n          np[t+1] = utils.lli4(p, p2, o, points[t+1]);\n        }.bind(this));\n        return new Bezier(np);\n      }\n\n      // move control points by \"however much necessary to\n      // ensure the correct tangent to endpoint\".\n      [0,1].forEach(function(t) {\n        if(this.order===2 && !!t) return;\n        var p = points[t+1];\n        var ov = {\n          x: p.x - o.x,\n          y: p.y - o.y\n        };\n        var rc = distanceFn ? distanceFn((t+1)/order) : d;\n        if(distanceFn && !clockwise) rc = -rc;\n        var m = sqrt(ov.x*ov.x + ov.y*ov.y);\n        ov.x /= m;\n        ov.y /= m;\n        np[t+1] = {\n          x: p.x + rc*ov.x,\n          y: p.y + rc*ov.y\n        }\n      }.bind(this));\n      return new Bezier(np);\n    },\n    outline: function(d1, d2, d3, d4) {\n      d2 = (typeof d2 === \"undefined\") ? d1 : d2;\n      var reduced = this.reduce(),\n          len = reduced.length,\n          fcurves = [],\n          bcurves = [],\n          p,\n          alen = 0,\n          tlen = this.length();\n\n      var graduated = (typeof d3 !== \"undefined\" && typeof d4 !== \"undefined\");\n\n      function linearDistanceFunction(s,e, tlen,alen,slen) {\n        return function (v) {\n          var f1 = alen/tlen, f2 = (alen+slen)/tlen, d = e-s;\n          return utils.map(v, 0,1, s+f1*d, s+f2*d);\n        };\n      };\n\n      // form curve oulines\n      reduced.forEach(function(segment) {\n        slen = segment.length();\n        if (graduated) {\n          fcurves.push(segment.scale(  linearDistanceFunction( d1, d3, tlen,alen,slen)  ));\n          bcurves.push(segment.scale(  linearDistanceFunction(-d2,-d4, tlen,alen,slen)  ));\n        } else {\n          fcurves.push(segment.scale( d1));\n          bcurves.push(segment.scale(-d2));\n        }\n        alen += slen;\n      });\n\n      // reverse the \"return\" outline\n      bcurves = bcurves.map(function(s) {\n        p = s.points;\n        if(p[3]) { s.points = [p[3],p[2],p[1],p[0]]; }\n        else { s.points = [p[2],p[1],p[0]]; }\n        return s;\n      }).reverse();\n\n      // form the endcaps as lines\n      var fs = fcurves[0].points[0],\n          fe = fcurves[len-1].points[fcurves[len-1].points.length-1],\n          bs = bcurves[len-1].points[bcurves[len-1].points.length-1],\n          be = bcurves[0].points[0],\n          ls = utils.makeline(bs,fs),\n          le = utils.makeline(fe,be),\n          segments = [ls].concat(fcurves).concat([le]).concat(bcurves),\n          slen = segments.length;\n\n      return new PolyBezier(segments);\n    },\n    outlineshapes: function(d1, d2, curveIntersectionThreshold) {\n      d2 = d2 || d1;\n      var outline = this.outline(d1,d2).curves;\n      var shapes = [];\n      for(var i=1, len=outline.length; i < len/2; i++) {\n        var shape = utils.makeshape(outline[i], outline[len-i], curveIntersectionThreshold);\n        shape.startcap.virtual = (i > 1);\n        shape.endcap.virtual = (i < len/2-1);\n        shapes.push(shape);\n      }\n      return shapes;\n    },\n    intersects: function(curve, curveIntersectionThreshold) {\n      if(!curve) return this.selfintersects(curveIntersectionThreshold);\n      if(curve.p1 && curve.p2) {\n        return this.lineIntersects(curve);\n      }\n      if(curve instanceof Bezier) { curve = curve.reduce(); }\n      return this.curveintersects(this.reduce(), curve, curveIntersectionThreshold);\n    },\n    lineIntersects: function(line) {\n      var mx = min(line.p1.x, line.p2.x),\n          my = min(line.p1.y, line.p2.y),\n          MX = max(line.p1.x, line.p2.x),\n          MY = max(line.p1.y, line.p2.y),\n          self=this;\n      return utils.roots(this.points, line).filter(function(t) {\n        var p = self.get(t);\n        return utils.between(p.x, mx, MX) && utils.between(p.y, my, MY);\n      });\n    },\n    selfintersects: function(curveIntersectionThreshold) {\n      var reduced = this.reduce();\n      // \"simple\" curves cannot intersect with their direct\n      // neighbour, so for each segment X we check whether\n      // it intersects [0:x-2][x+2:last].\n      var i,len=reduced.length-2,results=[],result,left,right;\n      for(i=0; i<len; i++) {\n        left = reduced.slice(i,i+1);\n        right = reduced.slice(i+2);\n        result = this.curveintersects(left, right, curveIntersectionThreshold);\n        results = results.concat( result );\n      }\n      return results;\n    },\n    curveintersects: function(c1, c2, curveIntersectionThreshold) {\n      var pairs = [];\n      // step 1: pair off any overlapping segments\n      c1.forEach(function(l) {\n        c2.forEach(function(r) {\n          if(l.overlaps(r)) {\n            pairs.push({ left: l, right: r });\n          }\n        });\n      });\n      // step 2: for each pairing, run through the convergence algorithm.\n      var intersections = [];\n      pairs.forEach(function(pair) {\n        var result = utils.pairiteration(pair.left, pair.right, curveIntersectionThreshold);\n        if(result.length > 0) {\n          intersections = intersections.concat(result);\n        }\n      });\n      return intersections;\n    },\n    arcs: function(errorThreshold) {\n      errorThreshold = errorThreshold || 0.5;\n      var circles = [];\n      return this._iterate(errorThreshold, circles);\n    },\n    _error: function(pc, np1, s, e) {\n      var q = (e - s) / 4,\n          c1 = this.get(s + q),\n          c2 = this.get(e - q),\n          ref = utils.dist(pc, np1),\n          d1  = utils.dist(pc, c1),\n          d2  = utils.dist(pc, c2);\n      return abs(d1-ref) + abs(d2-ref);\n    },\n    _iterate: function(errorThreshold, circles) {\n      var s = 0, e = 1, safety;\n      // we do a binary search to find the \"good `t` closest to no-longer-good\"\n      do {\n        safety=0;\n\n        // step 1: start with the maximum possible arc\n        e = 1;\n\n        // points:\n        var np1 = this.get(s), np2, np3, arc, prev_arc;\n\n        // booleans:\n        var curr_good = false, prev_good = false, done;\n\n        // numbers:\n        var m = e, prev_e = 1, step = 0;\n\n        // step 2: find the best possible arc\n        do {\n          prev_good = curr_good;\n          prev_arc = arc;\n          m = (s + e)/2;\n          step++;\n\n          np2 = this.get(m);\n          np3 = this.get(e);\n\n          arc = utils.getccenter(np1, np2, np3);\n\n          //also save the t values\n          arc.interval = {\n            start: s,\n            end: e\n          };\n\n          var error = this._error(arc, np1, s, e);\n          curr_good = (error <= errorThreshold);\n\n          done = prev_good && !curr_good;\n          if(!done) prev_e = e;\n\n          // this arc is fine: we can move 'e' up to see if we can find a wider arc\n          if(curr_good) {\n\n            // if e is already at max, then we're done for this arc.\n            if (e >= 1) {\n              arc.interval.end = prev_e = 1;\n              prev_arc = arc;\n              break;\n            }\n            // if not, move it up by half the iteration distance\n            e = e + (e-s)/2;\n          }\n\n          // this is a bad arc: we need to move 'e' down to find a good arc\n          else {\n            e = m;\n          }\n        }\n        while(!done && safety++<100);\n\n        if(safety>=100) {\n          break;\n        }\n\n        // console.log(\"L835: [F] arc found\", s, prev_e, prev_arc.x, prev_arc.y, prev_arc.s, prev_arc.e);\n\n        prev_arc = (prev_arc ? prev_arc : arc);\n        circles.push(prev_arc);\n        s = prev_e;\n      }\n      while(e < 1);\n      return circles;\n    }\n  };\n\n  module.exports = Bezier;\n\n}());\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/bezier-js/lib/bezier.js\n// module id = 44\n// module chunks = 0","(function() {\n  \"use strict\";\n\n  // math-inlining.\n  var abs = Math.abs,\n      cos = Math.cos,\n      sin = Math.sin,\n      acos = Math.acos,\n      atan2 = Math.atan2,\n      sqrt = Math.sqrt,\n      pow = Math.pow,\n      // cube root function yielding real roots\n      crt = function(v) { return (v<0) ? -pow(-v,1/3) : pow(v,1/3); },\n      // trig constants\n      pi = Math.PI,\n      tau = 2*pi,\n      quart = pi/2,\n      // float precision significant decimal\n      epsilon = 0.000001,\n      // extremas used in bbox calculation and similar algorithms\n      nMax = Number.MAX_SAFE_INTEGER,\n      nMin = Number.MIN_SAFE_INTEGER;\n\n  // Bezier utility functions\n  var utils = {\n    // Legendre-Gauss abscissae with n=24 (x_i values, defined at i=n as the roots of the nth order Legendre polynomial Pn(x))\n    Tvalues: [\n      -0.0640568928626056260850430826247450385909,\n       0.0640568928626056260850430826247450385909,\n      -0.1911188674736163091586398207570696318404,\n       0.1911188674736163091586398207570696318404,\n      -0.3150426796961633743867932913198102407864,\n       0.3150426796961633743867932913198102407864,\n      -0.4337935076260451384870842319133497124524,\n       0.4337935076260451384870842319133497124524,\n      -0.5454214713888395356583756172183723700107,\n       0.5454214713888395356583756172183723700107,\n      -0.6480936519369755692524957869107476266696,\n       0.6480936519369755692524957869107476266696,\n      -0.7401241915785543642438281030999784255232,\n       0.7401241915785543642438281030999784255232,\n      -0.8200019859739029219539498726697452080761,\n       0.8200019859739029219539498726697452080761,\n      -0.8864155270044010342131543419821967550873,\n       0.8864155270044010342131543419821967550873,\n      -0.9382745520027327585236490017087214496548,\n       0.9382745520027327585236490017087214496548,\n      -0.9747285559713094981983919930081690617411,\n       0.9747285559713094981983919930081690617411,\n      -0.9951872199970213601799974097007368118745,\n       0.9951872199970213601799974097007368118745\n    ],\n\n    // Legendre-Gauss weights with n=24 (w_i values, defined by a function linked to in the Bezier primer article)\n    Cvalues: [\n      0.1279381953467521569740561652246953718517,\n      0.1279381953467521569740561652246953718517,\n      0.1258374563468282961213753825111836887264,\n      0.1258374563468282961213753825111836887264,\n      0.1216704729278033912044631534762624256070,\n      0.1216704729278033912044631534762624256070,\n      0.1155056680537256013533444839067835598622,\n      0.1155056680537256013533444839067835598622,\n      0.1074442701159656347825773424466062227946,\n      0.1074442701159656347825773424466062227946,\n      0.0976186521041138882698806644642471544279,\n      0.0976186521041138882698806644642471544279,\n      0.0861901615319532759171852029837426671850,\n      0.0861901615319532759171852029837426671850,\n      0.0733464814110803057340336152531165181193,\n      0.0733464814110803057340336152531165181193,\n      0.0592985849154367807463677585001085845412,\n      0.0592985849154367807463677585001085845412,\n      0.0442774388174198061686027482113382288593,\n      0.0442774388174198061686027482113382288593,\n      0.0285313886289336631813078159518782864491,\n      0.0285313886289336631813078159518782864491,\n      0.0123412297999871995468056670700372915759,\n      0.0123412297999871995468056670700372915759\n    ],\n\n    arcfn: function(t, derivativeFn) {\n      var d = derivativeFn(t);\n      var l = d.x*d.x + d.y*d.y;\n      if(typeof d.z !== \"undefined\") {\n        l += d.z*d.z;\n      }\n      return sqrt(l);\n    },\n\n    between: function(v, m, M) {\n      return (m <= v && v <= M) || utils.approximately(v, m) || utils.approximately(v, M);\n    },\n\n    approximately: function(a,b,precision) {\n      return abs(a-b) <= (precision || epsilon);\n    },\n\n    length: function(derivativeFn) {\n      var z=0.5,sum=0,len=utils.Tvalues.length,i,t;\n      for(i=0; i<len; i++) {\n        t = z * utils.Tvalues[i] + z;\n        sum += utils.Cvalues[i] * utils.arcfn(t,derivativeFn);\n      }\n      return z * sum;\n    },\n\n    map: function(v, ds,de, ts,te) {\n      var d1 = de-ds, d2 = te-ts, v2 =  v-ds, r = v2/d1;\n      return ts + d2*r;\n    },\n\n    lerp: function(r, v1, v2) {\n      var ret = {\n        x: v1.x + r*(v2.x-v1.x),\n        y: v1.y + r*(v2.y-v1.y)\n      };\n      if(!!v1.z && !!v2.z) {\n        ret.z =  v1.z + r*(v2.z-v1.z);\n      }\n      return ret;\n    },\n\n    pointToString: function(p) {\n      var s = p.x+\"/\"+p.y;\n      if(typeof p.z !== \"undefined\") {\n        s += \"/\"+p.z;\n      }\n      return s;\n    },\n\n    pointsToString: function(points) {\n      return \"[\" + points.map(utils.pointToString).join(\", \") + \"]\";\n    },\n\n    copy: function(obj) {\n      return JSON.parse(JSON.stringify(obj));\n    },\n\n    angle: function(o,v1,v2) {\n      var dx1 = v1.x - o.x,\n          dy1 = v1.y - o.y,\n          dx2 = v2.x - o.x,\n          dy2 = v2.y - o.y,\n          cross = dx1*dy2 - dy1*dx2,\n          dot = dx1*dx2 + dy1*dy2;\n      return atan2(cross, dot);\n    },\n\n    // round as string, to avoid rounding errors\n    round: function(v, d) {\n      var s = '' + v;\n      var pos = s.indexOf(\".\");\n      return parseFloat(s.substring(0,pos+1+d));\n    },\n\n    dist: function(p1, p2) {\n      var dx = p1.x - p2.x,\n          dy = p1.y - p2.y;\n      return sqrt(dx*dx+dy*dy);\n    },\n\n    closest: function(LUT, point) {\n      var mdist = pow(2,63), mpos, d;\n      LUT.forEach(function(p, idx) {\n        d = utils.dist(point, p);\n        if (d<mdist) {\n          mdist = d;\n          mpos = idx;\n        }\n      });\n      return { mdist:mdist, mpos:mpos };\n    },\n\n    abcratio: function(t, n) {\n      // see ratio(t) note on http://pomax.github.io/bezierinfo/#abc\n      if (n!==2 && n!==3) {\n        return false;\n      }\n      if (typeof t === \"undefined\") {\n        t = 0.5;\n      } else if (t===0 || t===1) {\n        return t;\n      }\n      var bottom = pow(t,n) + pow(1-t,n), top = bottom - 1;\n      return abs(top/bottom);\n    },\n\n    projectionratio: function(t, n) {\n      // see u(t) note on http://pomax.github.io/bezierinfo/#abc\n      if (n!==2 && n!==3) {\n        return false;\n      }\n      if (typeof t === \"undefined\") {\n        t = 0.5;\n      } else if (t===0 || t===1) {\n        return t;\n      }\n      var top = pow(1-t, n), bottom = pow(t,n) + top;\n      return top/bottom;\n    },\n\n    lli8: function(x1,y1,x2,y2,x3,y3,x4,y4) {\n      var nx=(x1*y2-y1*x2)*(x3-x4)-(x1-x2)*(x3*y4-y3*x4),\n          ny=(x1*y2-y1*x2)*(y3-y4)-(y1-y2)*(x3*y4-y3*x4),\n          d=(x1-x2)*(y3-y4)-(y1-y2)*(x3-x4);\n      if(d==0) { return false; }\n      return { x: nx/d, y: ny/d };\n    },\n\n    lli4: function(p1,p2,p3,p4) {\n      var x1 = p1.x, y1 = p1.y,\n          x2 = p2.x, y2 = p2.y,\n          x3 = p3.x, y3 = p3.y,\n          x4 = p4.x, y4 = p4.y;\n      return utils.lli8(x1,y1,x2,y2,x3,y3,x4,y4);\n    },\n\n    lli: function(v1, v2) {\n      return utils.lli4(v1,v1.c,v2,v2.c);\n    },\n\n    makeline: function(p1,p2) {\n      var Bezier = require('./bezier');\n      var x1 = p1.x, y1 = p1.y, x2 = p2.x, y2 = p2.y, dx = (x2-x1)/3, dy = (y2-y1)/3;\n      return new Bezier(x1, y1, x1+dx, y1+dy, x1+2*dx, y1+2*dy, x2, y2);\n    },\n\n    findbbox: function(sections) {\n      var mx=nMax,my=nMax,MX=nMin,MY=nMin;\n      sections.forEach(function(s) {\n        var bbox = s.bbox();\n        if(mx > bbox.x.min) mx = bbox.x.min;\n        if(my > bbox.y.min) my = bbox.y.min;\n        if(MX < bbox.x.max) MX = bbox.x.max;\n        if(MY < bbox.y.max) MY = bbox.y.max;\n      });\n      return {\n        x: { min: mx, mid:(mx+MX)/2, max: MX, size:MX-mx },\n        y: { min: my, mid:(my+MY)/2, max: MY, size:MY-my }\n      }\n    },\n\n    shapeintersections: function(s1, bbox1, s2, bbox2, curveIntersectionThreshold) {\n      if(!utils.bboxoverlap(bbox1, bbox2)) return [];\n      var intersections = [];\n      var a1 = [s1.startcap, s1.forward, s1.back, s1.endcap];\n      var a2 = [s2.startcap, s2.forward, s2.back, s2.endcap];\n      a1.forEach(function(l1) {\n        if(l1.virtual) return;\n        a2.forEach(function(l2) {\n          if(l2.virtual) return;\n          var iss = l1.intersects(l2, curveIntersectionThreshold);\n          if(iss.length>0) {\n            iss.c1 = l1;\n            iss.c2 = l2;\n            iss.s1 = s1;\n            iss.s2 = s2;\n            intersections.push(iss);\n          }\n        });\n      });\n      return intersections;\n    },\n\n    makeshape: function(forward, back, curveIntersectionThreshold) {\n      var bpl = back.points.length;\n      var fpl = forward.points.length;\n      var start  = utils.makeline(back.points[bpl-1], forward.points[0]);\n      var end    = utils.makeline(forward.points[fpl-1], back.points[0]);\n      var shape  = {\n        startcap: start,\n        forward: forward,\n        back: back,\n        endcap: end,\n        bbox: utils.findbbox([start, forward, back, end])\n      };\n      var self = utils;\n      shape.intersections = function(s2) {\n        return self.shapeintersections(shape,shape.bbox,s2,s2.bbox, curveIntersectionThreshold);\n      };\n      return shape;\n    },\n\n    getminmax: function(curve, d, list) {\n      if(!list) return { min:0, max:0 };\n      var min=nMax, max=nMin,t,c;\n      if(list.indexOf(0)===-1) { list = [0].concat(list); }\n      if(list.indexOf(1)===-1) { list.push(1); }\n      for(var i=0,len=list.length; i<len; i++) {\n        t = list[i];\n        c = curve.get(t);\n        if(c[d] < min) { min = c[d]; }\n        if(c[d] > max) { max = c[d]; }\n      }\n      return { min:min, mid:(min+max)/2, max:max, size:max-min };\n    },\n\n    align: function(points, line) {\n      var tx = line.p1.x,\n          ty = line.p1.y,\n          a = -atan2(line.p2.y-ty, line.p2.x-tx),\n          d = function(v) {\n            return {\n              x: (v.x-tx)*cos(a) - (v.y-ty)*sin(a),\n              y: (v.x-tx)*sin(a) + (v.y-ty)*cos(a)\n            };\n          };\n      return points.map(d);\n    },\n\n    roots: function(points, line) {\n      line = line || {p1:{x:0,y:0},p2:{x:1,y:0}};\n      var order = points.length - 1;\n      var p = utils.align(points, line);\n      var reduce = function(t) { return 0<=t && t <=1; };\n\n      if (order === 2) {\n        var a = p[0].y,\n            b = p[1].y,\n            c = p[2].y,\n            d = a - 2*b + c;\n        if(d!==0) {\n          var m1 = -sqrt(b*b-a*c),\n              m2 = -a+b,\n              v1 = -( m1+m2)/d,\n              v2 = -(-m1+m2)/d;\n          return [v1, v2].filter(reduce);\n        }\n        else if(b!==c && d===0) {\n          return [ (2*b-c)/2*(b-c) ].filter(reduce);\n        }\n        return [];\n      }\n\n      // see http://www.trans4mind.com/personal_development/mathematics/polynomials/cubicAlgebra.htm\n      var pa = p[0].y,\n          pb = p[1].y,\n          pc = p[2].y,\n          pd = p[3].y,\n          d = (-pa + 3*pb - 3*pc + pd),\n          a = (3*pa - 6*pb + 3*pc) / d,\n          b = (-3*pa + 3*pb) / d,\n          c = pa / d,\n          p = (3*b - a*a)/3,\n          p3 = p/3,\n          q = (2*a*a*a - 9*a*b + 27*c)/27,\n          q2 = q/2,\n          discriminant = q2*q2 + p3*p3*p3,\n          u1,v1,x1,x2,x3;\n       if (discriminant < 0) {\n        var mp3 = -p/3,\n            mp33 = mp3*mp3*mp3,\n            r = sqrt( mp33 ),\n            t = -q/(2*r),\n            cosphi = t<-1 ? -1 : t>1 ? 1 : t,\n            phi = acos(cosphi),\n            crtr = crt(r),\n            t1 = 2*crtr;\n        x1 = t1 * cos(phi/3) - a/3;\n        x2 = t1 * cos((phi+tau)/3) - a/3;\n        x3 = t1 * cos((phi+2*tau)/3) - a/3;\n        return [x1, x2, x3].filter(reduce);\n      } else if(discriminant === 0) {\n        u1 = q2 < 0 ? crt(-q2) : -crt(q2);\n        x1 = 2*u1-a/3;\n        x2 = -u1 - a/3;\n        return [x1,x2].filter(reduce);\n      } else {\n        var sd = sqrt(discriminant);\n        u1 = crt(-q2+sd);\n        v1 = crt(q2+sd);\n        return [u1-v1-a/3].filter(reduce);;\n      }\n    },\n\n    droots: function(p) {\n      // quadratic roots are easy\n      if(p.length === 3) {\n        var a = p[0],\n            b = p[1],\n            c = p[2],\n            d = a - 2*b + c;\n        if(d!==0) {\n          var m1 = -sqrt(b*b-a*c),\n              m2 = -a+b,\n              v1 = -( m1+m2)/d,\n              v2 = -(-m1+m2)/d;\n          return [v1, v2];\n        }\n        else if(b!==c && d===0) {\n          return [(2*b-c)/(2*(b-c))];\n        }\n        return [];\n      }\n\n      // linear roots are even easier\n      if(p.length === 2) {\n        var a = p[0], b = p[1];\n        if(a!==b) {\n          return [a/(a-b)];\n        }\n        return [];\n      }\n    },\n\n    inflections: function(points) {\n      if (points.length<4) return [];\n\n      // FIXME: TODO: add in inflection abstraction for quartic+ curves?\n\n      var p = utils.align(points, { p1: points[0], p2: points.slice(-1)[0] }),\n          a = p[2].x * p[1].y,\n          b = p[3].x * p[1].y,\n          c = p[1].x * p[2].y,\n          d = p[3].x * p[2].y,\n          v1 = 18 * (-3*a + 2*b + 3*c - d),\n          v2 = 18 * (3*a - b - 3*c),\n          v3 = 18 * (c - a);\n\n      if (utils.approximately(v1,0)){\n        if(!utils.approximately(v2,0)){\n          var t = -v3/v2;\n          if (0 <= t && t <= 1)\n             return [t];\n        }\n        return [];\n      }\n\n      var trm = v2*v2 - 4*v1*v3,\n          sq = Math.sqrt(trm),\n          d = 2 * v1;\n\n      if (utils.approximately(d,0)) return [];\n\n      return [(sq-v2)/d, -(v2+sq)/d].filter(function(r) {\n        return (0 <= r && r <= 1);\n      });\n    },\n\n    bboxoverlap: function(b1,b2) {\n      var dims=['x','y'],len=dims.length,i,dim,l,t,d\n      for(i=0; i<len; i++) {\n        dim = dims[i];\n        l = b1[dim].mid;\n        t = b2[dim].mid;\n        d = (b1[dim].size + b2[dim].size)/2;\n        if(abs(l-t) >= d) return false;\n      }\n      return true;\n    },\n\n    expandbox: function(bbox, _bbox) {\n      if(_bbox.x.min < bbox.x.min) { bbox.x.min = _bbox.x.min; }\n      if(_bbox.y.min < bbox.y.min) { bbox.y.min = _bbox.y.min; }\n      if(_bbox.z && _bbox.z.min < bbox.z.min) { bbox.z.min = _bbox.z.min; }\n      if(_bbox.x.max > bbox.x.max) { bbox.x.max = _bbox.x.max; }\n      if(_bbox.y.max > bbox.y.max) { bbox.y.max = _bbox.y.max; }\n      if(_bbox.z && _bbox.z.max > bbox.z.max) { bbox.z.max = _bbox.z.max; }\n      bbox.x.mid = (bbox.x.min + bbox.x.max)/2;\n      bbox.y.mid = (bbox.y.min + bbox.y.max)/2;\n      if(bbox.z) { bbox.z.mid = (bbox.z.min + bbox.z.max)/2; }\n      bbox.x.size = bbox.x.max - bbox.x.min;\n      bbox.y.size = bbox.y.max - bbox.y.min;\n      if(bbox.z) { bbox.z.size = bbox.z.max - bbox.z.min; }\n    },\n\n    pairiteration: function(c1, c2, curveIntersectionThreshold) {\n      var c1b = c1.bbox(),\n          c2b = c2.bbox(),\n          r = 100000,\n          threshold = curveIntersectionThreshold || 0.5;\n      if(c1b.x.size + c1b.y.size < threshold && c2b.x.size + c2b.y.size < threshold) {\n        return [ ((r * (c1._t1+c1._t2)/2)|0)/r + \"/\" + ((r * (c2._t1+c2._t2)/2)|0)/r ];\n      }\n      var cc1 = c1.split(0.5),\n          cc2 = c2.split(0.5),\n          pairs = [\n            {left: cc1.left, right: cc2.left },\n            {left: cc1.left, right: cc2.right },\n            {left: cc1.right, right: cc2.right },\n            {left: cc1.right, right: cc2.left }];\n      pairs = pairs.filter(function(pair) {\n        return utils.bboxoverlap(pair.left.bbox(),pair.right.bbox());\n      });\n      var results = [];\n      if(pairs.length === 0) return results;\n      pairs.forEach(function(pair) {\n        results = results.concat(\n          utils.pairiteration(pair.left, pair.right, threshold)\n        );\n      })\n      results = results.filter(function(v,i) {\n        return results.indexOf(v) === i;\n      });\n      return results;\n    },\n\n    getccenter: function(p1,p2,p3) {\n      var dx1 = (p2.x - p1.x),\n          dy1 = (p2.y - p1.y),\n          dx2 = (p3.x - p2.x),\n          dy2 = (p3.y - p2.y);\n      var dx1p = dx1 * cos(quart) - dy1 * sin(quart),\n          dy1p = dx1 * sin(quart) + dy1 * cos(quart),\n          dx2p = dx2 * cos(quart) - dy2 * sin(quart),\n          dy2p = dx2 * sin(quart) + dy2 * cos(quart);\n      // chord midpoints\n      var mx1 = (p1.x + p2.x)/2,\n          my1 = (p1.y + p2.y)/2,\n          mx2 = (p2.x + p3.x)/2,\n          my2 = (p2.y + p3.y)/2;\n      // midpoint offsets\n      var mx1n = mx1 + dx1p,\n          my1n = my1 + dy1p,\n          mx2n = mx2 + dx2p,\n          my2n = my2 + dy2p;\n      // intersection of these lines:\n      var arc = utils.lli8(mx1,my1,mx1n,my1n, mx2,my2,mx2n,my2n),\n          r = utils.dist(arc,p1),\n          // arc start/end values, over mid point:\n          s = atan2(p1.y - arc.y, p1.x - arc.x),\n          m = atan2(p2.y - arc.y, p2.x - arc.x),\n          e = atan2(p3.y - arc.y, p3.x - arc.x),\n          _;\n      // determine arc direction (cw/ccw correction)\n      if (s<e) {\n        // if s<m<e, arc(s, e)\n        // if m<s<e, arc(e, s + tau)\n        // if s<e<m, arc(e, s + tau)\n        if (s>m || m>e) { s += tau; }\n        if (s>e) { _=e; e=s; s=_; }\n      } else {\n        // if e<m<s, arc(e, s)\n        // if m<e<s, arc(s, e + tau)\n        // if e<s<m, arc(s, e + tau)\n        if (e<m && m<s) { _=e; e=s; s=_; } else { e += tau; }\n      }\n      // assign and done.\n      arc.s = s;\n      arc.e = e;\n      arc.r = r;\n      return arc;\n    }\n  };\n\n  module.exports = utils;\n}());\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/bezier-js/lib/utils.js\n// module id = 45\n// module chunks = 0","import Obj from 'webgl-obj-loader';\n\nexport default function(data) {\n  const mesh = new Obj.Mesh(data);\n  return {\n    vertices: new Float32Array(mesh.vertices),\n    normals: new Float32Array(mesh.vertexNormals),\n    indices: new Uint16Array(mesh.indices),\n    uvs: new Float32Array(mesh.textures)\n  };\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/utils/ObjParser.ts","declare global {\n  interface Window {\n    WebGL2RenderingContext: any;\n  }\n}\n\n// Polyfill\nif (window.WebGL2RenderingContext === undefined) {\n  window.WebGL2RenderingContext = function WebGL2RenderingContext() {\n    return this;\n  };\n}\n\n// Core\nimport * as Capabilities from './core/Capabilities';\nexport { Capabilities };\n\nimport * as Constants from './core/Constants';\nexport { Constants };\n\nimport * as GL from './core/GL';\nexport { GL };\n\nimport Mesh from './core/Mesh';\nexport { Mesh };\n\nimport Object3D from './core/Object3D';\nexport { Object3D };\n\nimport Camera from './cameras/Camera';\nexport { Camera };\n\nimport OrthographicCamera from './cameras/OrthographicCamera';\nexport { OrthographicCamera };\n\nimport PerspectiveCamera from './cameras/PerspectiveCamera';\nexport { PerspectiveCamera };\n\nimport RayCaster from './core/Raycaster';\nexport { RayCaster };\n\nimport Renderer from './core/Renderer';\nexport { Renderer };\n\nimport RenderTarget from './core/RenderTarget';\nexport { RenderTarget };\n\nimport Scene from './core/Scene';\nexport { Scene };\n\nimport Material from './core/Material';\nexport { Material };\n\nimport Texture from './core/Texture';\nexport { Texture };\n\nimport Texture3d from './core/Texture3d';\nexport { Texture3d };\n\nimport TextureCube from './core/TextureCube';\nexport { TextureCube };\n\nimport TextureVideo from './core/TextureVideo';\nexport { TextureVideo };\n\nimport UniformBuffer from './core/UniformBuffer';\nexport { UniformBuffer };\n\nimport * as UniformBuffers from './core/UniformBuffers';\nexport { UniformBuffers };\n\nimport Vao from './core/Vao';\nexport { Vao };\n\n// Geometry\nimport BoxGeometry from './geometry/BoxGeometry';\nexport { BoxGeometry };\n\nimport BufferAttribute from './geometry/BufferAttribute';\nexport { BufferAttribute };\n\nimport Geometry from './geometry/Geometry';\nexport { Geometry };\n\nimport LineGeometry from './geometry/LineGeometry';\nexport { LineGeometry };\n\nimport PlaneGeometry from './geometry/PlaneGeometry';\nexport { PlaneGeometry };\n\nimport SphereGeometry from './geometry/SphereGeometry';\nexport { SphereGeometry };\n\n// Helpers\nimport AxisHelper from './helpers/AxisHelper';\nexport { AxisHelper };\n\nimport CameraHelper from './helpers/CameraHelper';\nexport { CameraHelper };\n\nimport GridHelper from './helpers/GridHelper';\nexport { GridHelper };\n\nimport NormalsHelper from './helpers/NormalsHelper';\nexport { NormalsHelper };\n\nimport VerticesHelper from './helpers/VerticesHelper';\nexport { VerticesHelper };\n\n// Lights\nimport Lights from './lights/Lights';\nexport { Lights };\n\nimport AmbientLight from './lights/AmbientLight';\nexport { AmbientLight };\n\nimport DirectionalLight from './lights/DirectionalLight';\nexport { DirectionalLight };\n\nimport PointLight from './lights/PointLight';\nexport { PointLight };\n\n// Math\nimport Color from './math/Color';\nexport { Color };\n\nimport Vector3 from './math/Vector3';\nexport { Vector3 };\n\nimport Vector2 from './math/Vector2';\nexport { Vector2 };\n\nimport Ray from './math/Ray';\nexport { Ray };\n\nimport Sphere from './math/Sphere';\nexport { Sphere };\n\nimport * as MathUtils from './math/Utils';\nexport { MathUtils };\n\n// Shaders\nimport ShaderChunks from './shaders/chunks/index';\nexport { ShaderChunks };\n\n// Utils\nimport * as ArrayUtils from './utils/Array';\nexport { ArrayUtils };\n\nimport CameraDolly from './utils/CameraDolly';\nexport { CameraDolly };\n\nimport Clock from './utils/Clock';\nexport { Clock };\n\nimport Detect from './utils/Detect';\nexport { Detect };\n\nimport ObjParser from './utils/ObjParser';\nexport { ObjParser };\n\n// Controls\nimport OrbitControls from './controls/OrbitControls';\nexport { OrbitControls };\n\n// Loaders\nimport FileLoader from './loaders/FileLoader';\nexport { FileLoader };\n\nimport HdrLoader from './loaders/HdrLoader';\nexport { HdrLoader };\n\nimport ImageLoader from './loaders/ImageLoader';\nexport { ImageLoader };\n\nimport JsonLoader from './loaders/JsonLoader';\nexport { JsonLoader };\n\nimport ObjLoader from './loaders/ObjLoader';\nexport { ObjLoader };\n\n\n\n// WEBPACK FOOTER //\n// ./src/index.ts","import * as glMatrix from \"./common.js\"\n\n/**\n * 2x2 Matrix\n * @module mat2\n */\n\n/**\n * Creates a new identity mat2\n *\n * @returns {mat2} a new 2x2 matrix\n */\nexport function create() {\n  let out = new glMatrix.ARRAY_TYPE(4);\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 1;\n  return out;\n}\n\n/**\n * Creates a new mat2 initialized with values from an existing matrix\n *\n * @param {mat2} a matrix to clone\n * @returns {mat2} a new 2x2 matrix\n */\nexport function clone(a) {\n  let out = new glMatrix.ARRAY_TYPE(4);\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  return out;\n}\n\n/**\n * Copy the values from one mat2 to another\n *\n * @param {mat2} out the receiving matrix\n * @param {mat2} a the source matrix\n * @returns {mat2} out\n */\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  return out;\n}\n\n/**\n * Set a mat2 to the identity matrix\n *\n * @param {mat2} out the receiving matrix\n * @returns {mat2} out\n */\nexport function identity(out) {\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 1;\n  return out;\n}\n\n/**\n * Create a new mat2 with the given values\n *\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\n * @param {Number} m10 Component in column 1, row 0 position (index 2)\n * @param {Number} m11 Component in column 1, row 1 position (index 3)\n * @returns {mat2} out A new 2x2 matrix\n */\nexport function fromValues(m00, m01, m10, m11) {\n  let out = new glMatrix.ARRAY_TYPE(4);\n  out[0] = m00;\n  out[1] = m01;\n  out[2] = m10;\n  out[3] = m11;\n  return out;\n}\n\n/**\n * Set the components of a mat2 to the given values\n *\n * @param {mat2} out the receiving matrix\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\n * @param {Number} m10 Component in column 1, row 0 position (index 2)\n * @param {Number} m11 Component in column 1, row 1 position (index 3)\n * @returns {mat2} out\n */\nexport function set(out, m00, m01, m10, m11) {\n  out[0] = m00;\n  out[1] = m01;\n  out[2] = m10;\n  out[3] = m11;\n  return out;\n}\n\n/**\n * Transpose the values of a mat2\n *\n * @param {mat2} out the receiving matrix\n * @param {mat2} a the source matrix\n * @returns {mat2} out\n */\nexport function transpose(out, a) {\n  // If we are transposing ourselves we can skip a few steps but have to cache\n  // some values\n  if (out === a) {\n    let a1 = a[1];\n    out[1] = a[2];\n    out[2] = a1;\n  } else {\n    out[0] = a[0];\n    out[1] = a[2];\n    out[2] = a[1];\n    out[3] = a[3];\n  }\n\n  return out;\n}\n\n/**\n * Inverts a mat2\n *\n * @param {mat2} out the receiving matrix\n * @param {mat2} a the source matrix\n * @returns {mat2} out\n */\nexport function invert(out, a) {\n  let a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3];\n\n  // Calculate the determinant\n  let det = a0 * a3 - a2 * a1;\n\n  if (!det) {\n    return null;\n  }\n  det = 1.0 / det;\n\n  out[0] =  a3 * det;\n  out[1] = -a1 * det;\n  out[2] = -a2 * det;\n  out[3] =  a0 * det;\n\n  return out;\n}\n\n/**\n * Calculates the adjugate of a mat2\n *\n * @param {mat2} out the receiving matrix\n * @param {mat2} a the source matrix\n * @returns {mat2} out\n */\nexport function adjoint(out, a) {\n  // Caching this value is nessecary if out == a\n  let a0 = a[0];\n  out[0] =  a[3];\n  out[1] = -a[1];\n  out[2] = -a[2];\n  out[3] =  a0;\n\n  return out;\n}\n\n/**\n * Calculates the determinant of a mat2\n *\n * @param {mat2} a the source matrix\n * @returns {Number} determinant of a\n */\nexport function determinant(a) {\n  return a[0] * a[3] - a[2] * a[1];\n}\n\n/**\n * Multiplies two mat2's\n *\n * @param {mat2} out the receiving matrix\n * @param {mat2} a the first operand\n * @param {mat2} b the second operand\n * @returns {mat2} out\n */\nexport function multiply(out, a, b) {\n  let a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3];\n  let b0 = b[0], b1 = b[1], b2 = b[2], b3 = b[3];\n  out[0] = a0 * b0 + a2 * b1;\n  out[1] = a1 * b0 + a3 * b1;\n  out[2] = a0 * b2 + a2 * b3;\n  out[3] = a1 * b2 + a3 * b3;\n  return out;\n}\n\n/**\n * Rotates a mat2 by the given angle\n *\n * @param {mat2} out the receiving matrix\n * @param {mat2} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat2} out\n */\nexport function rotate(out, a, rad) {\n  let a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3];\n  let s = Math.sin(rad);\n  let c = Math.cos(rad);\n  out[0] = a0 *  c + a2 * s;\n  out[1] = a1 *  c + a3 * s;\n  out[2] = a0 * -s + a2 * c;\n  out[3] = a1 * -s + a3 * c;\n  return out;\n}\n\n/**\n * Scales the mat2 by the dimensions in the given vec2\n *\n * @param {mat2} out the receiving matrix\n * @param {mat2} a the matrix to rotate\n * @param {vec2} v the vec2 to scale the matrix by\n * @returns {mat2} out\n **/\nexport function scale(out, a, v) {\n  let a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3];\n  let v0 = v[0], v1 = v[1];\n  out[0] = a0 * v0;\n  out[1] = a1 * v0;\n  out[2] = a2 * v1;\n  out[3] = a3 * v1;\n  return out;\n}\n\n/**\n * Creates a matrix from a given angle\n * This is equivalent to (but much faster than):\n *\n *     mat2.identity(dest);\n *     mat2.rotate(dest, dest, rad);\n *\n * @param {mat2} out mat2 receiving operation result\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat2} out\n */\nexport function fromRotation(out, rad) {\n  let s = Math.sin(rad);\n  let c = Math.cos(rad);\n  out[0] = c;\n  out[1] = s;\n  out[2] = -s;\n  out[3] = c;\n  return out;\n}\n\n/**\n * Creates a matrix from a vector scaling\n * This is equivalent to (but much faster than):\n *\n *     mat2.identity(dest);\n *     mat2.scale(dest, dest, vec);\n *\n * @param {mat2} out mat2 receiving operation result\n * @param {vec2} v Scaling vector\n * @returns {mat2} out\n */\nexport function fromScaling(out, v) {\n  out[0] = v[0];\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = v[1];\n  return out;\n}\n\n/**\n * Returns a string representation of a mat2\n *\n * @param {mat2} a matrix to represent as a string\n * @returns {String} string representation of the matrix\n */\nexport function str(a) {\n  return 'mat2(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' + a[3] + ')';\n}\n\n/**\n * Returns Frobenius norm of a mat2\n *\n * @param {mat2} a the matrix to calculate Frobenius norm of\n * @returns {Number} Frobenius norm\n */\nexport function frob(a) {\n  return(Math.sqrt(Math.pow(a[0], 2) + Math.pow(a[1], 2) + Math.pow(a[2], 2) + Math.pow(a[3], 2)))\n}\n\n/**\n * Returns L, D and U matrices (Lower triangular, Diagonal and Upper triangular) by factorizing the input matrix\n * @param {mat2} L the lower triangular matrix\n * @param {mat2} D the diagonal matrix\n * @param {mat2} U the upper triangular matrix\n * @param {mat2} a the input matrix to factorize\n */\n\nexport function LDU(L, D, U, a) {\n  L[2] = a[2]/a[0];\n  U[0] = a[0];\n  U[1] = a[1];\n  U[3] = a[3] - L[2] * U[1];\n  return [L, D, U];\n}\n\n/**\n * Adds two mat2's\n *\n * @param {mat2} out the receiving matrix\n * @param {mat2} a the first operand\n * @param {mat2} b the second operand\n * @returns {mat2} out\n */\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  out[3] = a[3] + b[3];\n  return out;\n}\n\n/**\n * Subtracts matrix b from matrix a\n *\n * @param {mat2} out the receiving matrix\n * @param {mat2} a the first operand\n * @param {mat2} b the second operand\n * @returns {mat2} out\n */\nexport function subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  out[2] = a[2] - b[2];\n  out[3] = a[3] - b[3];\n  return out;\n}\n\n/**\n * Returns whether or not the matrices have exactly the same elements in the same position (when compared with ===)\n *\n * @param {mat2} a The first matrix.\n * @param {mat2} b The second matrix.\n * @returns {Boolean} True if the matrices are equal, false otherwise.\n */\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3];\n}\n\n/**\n * Returns whether or not the matrices have approximately the same elements in the same position.\n *\n * @param {mat2} a The first matrix.\n * @param {mat2} b The second matrix.\n * @returns {Boolean} True if the matrices are equal, false otherwise.\n */\nexport function equals(a, b) {\n  let a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3];\n  let b0 = b[0], b1 = b[1], b2 = b[2], b3 = b[3];\n  return (Math.abs(a0 - b0) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a0), Math.abs(b0)) &&\n          Math.abs(a1 - b1) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a1), Math.abs(b1)) &&\n          Math.abs(a2 - b2) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a2), Math.abs(b2)) &&\n          Math.abs(a3 - b3) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a3), Math.abs(b3)));\n}\n\n/**\n * Multiply each element of the matrix by a scalar.\n *\n * @param {mat2} out the receiving matrix\n * @param {mat2} a the matrix to scale\n * @param {Number} b amount to scale the matrix's elements by\n * @returns {mat2} out\n */\nexport function multiplyScalar(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  out[3] = a[3] * b;\n  return out;\n}\n\n/**\n * Adds two mat2's after multiplying each element of the second operand by a scalar value.\n *\n * @param {mat2} out the receiving vector\n * @param {mat2} a the first operand\n * @param {mat2} b the second operand\n * @param {Number} scale the amount to scale b's elements by before adding\n * @returns {mat2} out\n */\nexport function multiplyScalarAndAdd(out, a, b, scale) {\n  out[0] = a[0] + (b[0] * scale);\n  out[1] = a[1] + (b[1] * scale);\n  out[2] = a[2] + (b[2] * scale);\n  out[3] = a[3] + (b[3] * scale);\n  return out;\n}\n\n/**\n * Alias for {@link mat2.multiply}\n * @function\n */\nexport const mul = multiply;\n\n/**\n * Alias for {@link mat2.subtract}\n * @function\n */\nexport const sub = subtract;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/gl-matrix/src/gl-matrix/mat2.js\n// module id = 48\n// module chunks = 0","import * as glMatrix from \"./common.js\";\n\n/**\n * 2x3 Matrix\n * @module mat2d\n *\n * @description\n * A mat2d contains six elements defined as:\n * <pre>\n * [a, c, tx,\n *  b, d, ty]\n * </pre>\n * This is a short form for the 3x3 matrix:\n * <pre>\n * [a, c, tx,\n *  b, d, ty,\n *  0, 0, 1]\n * </pre>\n * The last row is ignored so the array is shorter and operations are faster.\n */\n\n/**\n * Creates a new identity mat2d\n *\n * @returns {mat2d} a new 2x3 matrix\n */\nexport function create() {\n  let out = new glMatrix.ARRAY_TYPE(6);\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 1;\n  out[4] = 0;\n  out[5] = 0;\n  return out;\n}\n\n/**\n * Creates a new mat2d initialized with values from an existing matrix\n *\n * @param {mat2d} a matrix to clone\n * @returns {mat2d} a new 2x3 matrix\n */\nexport function clone(a) {\n  let out = new glMatrix.ARRAY_TYPE(6);\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  out[4] = a[4];\n  out[5] = a[5];\n  return out;\n}\n\n/**\n * Copy the values from one mat2d to another\n *\n * @param {mat2d} out the receiving matrix\n * @param {mat2d} a the source matrix\n * @returns {mat2d} out\n */\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  out[4] = a[4];\n  out[5] = a[5];\n  return out;\n}\n\n/**\n * Set a mat2d to the identity matrix\n *\n * @param {mat2d} out the receiving matrix\n * @returns {mat2d} out\n */\nexport function identity(out) {\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 1;\n  out[4] = 0;\n  out[5] = 0;\n  return out;\n}\n\n/**\n * Create a new mat2d with the given values\n *\n * @param {Number} a Component A (index 0)\n * @param {Number} b Component B (index 1)\n * @param {Number} c Component C (index 2)\n * @param {Number} d Component D (index 3)\n * @param {Number} tx Component TX (index 4)\n * @param {Number} ty Component TY (index 5)\n * @returns {mat2d} A new mat2d\n */\nexport function fromValues(a, b, c, d, tx, ty) {\n  let out = new glMatrix.ARRAY_TYPE(6);\n  out[0] = a;\n  out[1] = b;\n  out[2] = c;\n  out[3] = d;\n  out[4] = tx;\n  out[5] = ty;\n  return out;\n}\n\n/**\n * Set the components of a mat2d to the given values\n *\n * @param {mat2d} out the receiving matrix\n * @param {Number} a Component A (index 0)\n * @param {Number} b Component B (index 1)\n * @param {Number} c Component C (index 2)\n * @param {Number} d Component D (index 3)\n * @param {Number} tx Component TX (index 4)\n * @param {Number} ty Component TY (index 5)\n * @returns {mat2d} out\n */\nexport function set(out, a, b, c, d, tx, ty) {\n  out[0] = a;\n  out[1] = b;\n  out[2] = c;\n  out[3] = d;\n  out[4] = tx;\n  out[5] = ty;\n  return out;\n}\n\n/**\n * Inverts a mat2d\n *\n * @param {mat2d} out the receiving matrix\n * @param {mat2d} a the source matrix\n * @returns {mat2d} out\n */\nexport function invert(out, a) {\n  let aa = a[0], ab = a[1], ac = a[2], ad = a[3];\n  let atx = a[4], aty = a[5];\n\n  let det = aa * ad - ab * ac;\n  if(!det){\n    return null;\n  }\n  det = 1.0 / det;\n\n  out[0] = ad * det;\n  out[1] = -ab * det;\n  out[2] = -ac * det;\n  out[3] = aa * det;\n  out[4] = (ac * aty - ad * atx) * det;\n  out[5] = (ab * atx - aa * aty) * det;\n  return out;\n}\n\n/**\n * Calculates the determinant of a mat2d\n *\n * @param {mat2d} a the source matrix\n * @returns {Number} determinant of a\n */\nexport function determinant(a) {\n  return a[0] * a[3] - a[1] * a[2];\n}\n\n/**\n * Multiplies two mat2d's\n *\n * @param {mat2d} out the receiving matrix\n * @param {mat2d} a the first operand\n * @param {mat2d} b the second operand\n * @returns {mat2d} out\n */\nexport function multiply(out, a, b) {\n  let a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3], a4 = a[4], a5 = a[5];\n  let b0 = b[0], b1 = b[1], b2 = b[2], b3 = b[3], b4 = b[4], b5 = b[5];\n  out[0] = a0 * b0 + a2 * b1;\n  out[1] = a1 * b0 + a3 * b1;\n  out[2] = a0 * b2 + a2 * b3;\n  out[3] = a1 * b2 + a3 * b3;\n  out[4] = a0 * b4 + a2 * b5 + a4;\n  out[5] = a1 * b4 + a3 * b5 + a5;\n  return out;\n}\n\n/**\n * Rotates a mat2d by the given angle\n *\n * @param {mat2d} out the receiving matrix\n * @param {mat2d} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat2d} out\n */\nexport function rotate(out, a, rad) {\n  let a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3], a4 = a[4], a5 = a[5];\n  let s = Math.sin(rad);\n  let c = Math.cos(rad);\n  out[0] = a0 *  c + a2 * s;\n  out[1] = a1 *  c + a3 * s;\n  out[2] = a0 * -s + a2 * c;\n  out[3] = a1 * -s + a3 * c;\n  out[4] = a4;\n  out[5] = a5;\n  return out;\n}\n\n/**\n * Scales the mat2d by the dimensions in the given vec2\n *\n * @param {mat2d} out the receiving matrix\n * @param {mat2d} a the matrix to translate\n * @param {vec2} v the vec2 to scale the matrix by\n * @returns {mat2d} out\n **/\nexport function scale(out, a, v) {\n  let a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3], a4 = a[4], a5 = a[5];\n  let v0 = v[0], v1 = v[1];\n  out[0] = a0 * v0;\n  out[1] = a1 * v0;\n  out[2] = a2 * v1;\n  out[3] = a3 * v1;\n  out[4] = a4;\n  out[5] = a5;\n  return out;\n}\n\n/**\n * Translates the mat2d by the dimensions in the given vec2\n *\n * @param {mat2d} out the receiving matrix\n * @param {mat2d} a the matrix to translate\n * @param {vec2} v the vec2 to translate the matrix by\n * @returns {mat2d} out\n **/\nexport function translate(out, a, v) {\n  let a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3], a4 = a[4], a5 = a[5];\n  let v0 = v[0], v1 = v[1];\n  out[0] = a0;\n  out[1] = a1;\n  out[2] = a2;\n  out[3] = a3;\n  out[4] = a0 * v0 + a2 * v1 + a4;\n  out[5] = a1 * v0 + a3 * v1 + a5;\n  return out;\n}\n\n/**\n * Creates a matrix from a given angle\n * This is equivalent to (but much faster than):\n *\n *     mat2d.identity(dest);\n *     mat2d.rotate(dest, dest, rad);\n *\n * @param {mat2d} out mat2d receiving operation result\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat2d} out\n */\nexport function fromRotation(out, rad) {\n  let s = Math.sin(rad), c = Math.cos(rad);\n  out[0] = c;\n  out[1] = s;\n  out[2] = -s;\n  out[3] = c;\n  out[4] = 0;\n  out[5] = 0;\n  return out;\n}\n\n/**\n * Creates a matrix from a vector scaling\n * This is equivalent to (but much faster than):\n *\n *     mat2d.identity(dest);\n *     mat2d.scale(dest, dest, vec);\n *\n * @param {mat2d} out mat2d receiving operation result\n * @param {vec2} v Scaling vector\n * @returns {mat2d} out\n */\nexport function fromScaling(out, v) {\n  out[0] = v[0];\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = v[1];\n  out[4] = 0;\n  out[5] = 0;\n  return out;\n}\n\n/**\n * Creates a matrix from a vector translation\n * This is equivalent to (but much faster than):\n *\n *     mat2d.identity(dest);\n *     mat2d.translate(dest, dest, vec);\n *\n * @param {mat2d} out mat2d receiving operation result\n * @param {vec2} v Translation vector\n * @returns {mat2d} out\n */\nexport function fromTranslation(out, v) {\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 1;\n  out[4] = v[0];\n  out[5] = v[1];\n  return out;\n}\n\n/**\n * Returns a string representation of a mat2d\n *\n * @param {mat2d} a matrix to represent as a string\n * @returns {String} string representation of the matrix\n */\nexport function str(a) {\n  return 'mat2d(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' +\n          a[3] + ', ' + a[4] + ', ' + a[5] + ')';\n}\n\n/**\n * Returns Frobenius norm of a mat2d\n *\n * @param {mat2d} a the matrix to calculate Frobenius norm of\n * @returns {Number} Frobenius norm\n */\nexport function frob(a) {\n  return(Math.sqrt(Math.pow(a[0], 2) + Math.pow(a[1], 2) + Math.pow(a[2], 2) + Math.pow(a[3], 2) + Math.pow(a[4], 2) + Math.pow(a[5], 2) + 1))\n}\n\n/**\n * Adds two mat2d's\n *\n * @param {mat2d} out the receiving matrix\n * @param {mat2d} a the first operand\n * @param {mat2d} b the second operand\n * @returns {mat2d} out\n */\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  out[3] = a[3] + b[3];\n  out[4] = a[4] + b[4];\n  out[5] = a[5] + b[5];\n  return out;\n}\n\n/**\n * Subtracts matrix b from matrix a\n *\n * @param {mat2d} out the receiving matrix\n * @param {mat2d} a the first operand\n * @param {mat2d} b the second operand\n * @returns {mat2d} out\n */\nexport function subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  out[2] = a[2] - b[2];\n  out[3] = a[3] - b[3];\n  out[4] = a[4] - b[4];\n  out[5] = a[5] - b[5];\n  return out;\n}\n\n/**\n * Multiply each element of the matrix by a scalar.\n *\n * @param {mat2d} out the receiving matrix\n * @param {mat2d} a the matrix to scale\n * @param {Number} b amount to scale the matrix's elements by\n * @returns {mat2d} out\n */\nexport function multiplyScalar(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  out[3] = a[3] * b;\n  out[4] = a[4] * b;\n  out[5] = a[5] * b;\n  return out;\n}\n\n/**\n * Adds two mat2d's after multiplying each element of the second operand by a scalar value.\n *\n * @param {mat2d} out the receiving vector\n * @param {mat2d} a the first operand\n * @param {mat2d} b the second operand\n * @param {Number} scale the amount to scale b's elements by before adding\n * @returns {mat2d} out\n */\nexport function multiplyScalarAndAdd(out, a, b, scale) {\n  out[0] = a[0] + (b[0] * scale);\n  out[1] = a[1] + (b[1] * scale);\n  out[2] = a[2] + (b[2] * scale);\n  out[3] = a[3] + (b[3] * scale);\n  out[4] = a[4] + (b[4] * scale);\n  out[5] = a[5] + (b[5] * scale);\n  return out;\n}\n\n/**\n * Returns whether or not the matrices have exactly the same elements in the same position (when compared with ===)\n *\n * @param {mat2d} a The first matrix.\n * @param {mat2d} b The second matrix.\n * @returns {Boolean} True if the matrices are equal, false otherwise.\n */\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3] && a[4] === b[4] && a[5] === b[5];\n}\n\n/**\n * Returns whether or not the matrices have approximately the same elements in the same position.\n *\n * @param {mat2d} a The first matrix.\n * @param {mat2d} b The second matrix.\n * @returns {Boolean} True if the matrices are equal, false otherwise.\n */\nexport function equals(a, b) {\n  let a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3], a4 = a[4], a5 = a[5];\n  let b0 = b[0], b1 = b[1], b2 = b[2], b3 = b[3], b4 = b[4], b5 = b[5];\n  return (Math.abs(a0 - b0) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a0), Math.abs(b0)) &&\n          Math.abs(a1 - b1) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a1), Math.abs(b1)) &&\n          Math.abs(a2 - b2) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a2), Math.abs(b2)) &&\n          Math.abs(a3 - b3) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a3), Math.abs(b3)) &&\n          Math.abs(a4 - b4) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a4), Math.abs(b4)) &&\n          Math.abs(a5 - b5) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a5), Math.abs(b5)));\n}\n\n/**\n * Alias for {@link mat2d.multiply}\n * @function\n */\nexport const mul = multiply;\n\n/**\n * Alias for {@link mat2d.subtract}\n * @function\n */\nexport const sub = subtract;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/gl-matrix/src/gl-matrix/mat2d.js\n// module id = 49\n// module chunks = 0","import * as glMatrix from \"./common.js\";\nimport * as quat from \"./quat.js\";\nimport * as mat4 from \"./mat4.js\";\n\n/**\n * Dual Quaternion<br>\n * Format: [real, dual]<br>\n * Quaternion format: XYZW<br>\n * Make sure to have normalized dual quaternions, otherwise the functions may not work as intended.<br>\n * @module quat2\n */\n\n\n/**\n * Creates a new identity dual quat\n *\n * @returns {quat2} a new dual quaternion [real -> rotation, dual -> translation]\n */\nexport function create() {\n  let dq = new glMatrix.ARRAY_TYPE(8);\n  dq[0] = 0;\n  dq[1] = 0;\n  dq[2] = 0;\n  dq[3] = 1;\n  dq[4] = 0;\n  dq[5] = 0;\n  dq[6] = 0;\n  dq[7] = 0;\n  return dq;\n}\n\n/**\n * Creates a new quat initialized with values from an existing quaternion\n *\n * @param {quat2} a dual quaternion to clone\n * @returns {quat2} new dual quaternion\n * @function\n */\nexport function clone(a) {\n  let dq = new glMatrix.ARRAY_TYPE(8);\n  dq[0] = a[0];\n  dq[1] = a[1];\n  dq[2] = a[2];\n  dq[3] = a[3];\n  dq[4] = a[4];\n  dq[5] = a[5];\n  dq[6] = a[6];\n  dq[7] = a[7];\n  return dq;\n}\n\n/**\n * Creates a new dual quat initialized with the given values\n *\n * @param {Number} x1 X component\n * @param {Number} y1 Y component\n * @param {Number} z1 Z component\n * @param {Number} w1 W component\n * @param {Number} x2 X component\n * @param {Number} y2 Y component\n * @param {Number} z2 Z component\n * @param {Number} w2 W component\n * @returns {quat2} new dual quaternion\n * @function\n */\nexport function fromValues(x1, y1, z1, w1, x2, y2, z2, w2) {\n  let dq = new glMatrix.ARRAY_TYPE(8);\n  dq[0] = x1;\n  dq[1] = y1;\n  dq[2] = z1;\n  dq[3] = w1;\n  dq[4] = x2;\n  dq[5] = y2;\n  dq[6] = z2;\n  dq[7] = w2;\n  return dq;\n}\n\n/**\n * Creates a new dual quat from the given values (quat and translation)\n *\n * @param {Number} x1 X component\n * @param {Number} y1 Y component\n * @param {Number} z1 Z component\n * @param {Number} w1 W component\n * @param {Number} x2 X component (translation)\n * @param {Number} y2 Y component (translation)\n * @param {Number} z2 Z component (translation)\n * @returns {quat2} new dual quaternion\n * @function\n */\nexport function fromRotationTranslationValues(x1, y1, z1, w1, x2, y2, z2) {\n  let dq = new glMatrix.ARRAY_TYPE(8);\n  dq[0] = x1;\n  dq[1] = y1;\n  dq[2] = z1;\n  dq[3] = w1;\n  let ax = x2 * 0.5,\n    ay = y2 * 0.5,\n    az = z2 * 0.5;\n  dq[4] = ax * w1 + ay * z1 - az * y1;\n  dq[5] = ay * w1 + az * x1 - ax * z1;\n  dq[6] = az * w1 + ax * y1 - ay * x1;\n  dq[7] = -ax * x1 - ay * y1 - az * z1;\n  return dq;\n}\n\n/**\n * Creates a dual quat from a quaternion and a translation\n *\n * @param {quat2} dual quaternion receiving operation result\n * @param {quat} q quaternion\n * @param {vec3} t tranlation vector\n * @returns {quat2} dual quaternion receiving operation result\n * @function\n */\nexport function fromRotationTranslation(out, q, t) {\n  let ax = t[0] * 0.5,\n    ay = t[1] * 0.5,\n    az = t[2] * 0.5,\n    bx = q[0],\n    by = q[1],\n    bz = q[2],\n    bw = q[3];\n  out[0] = bx;\n  out[1] = by;\n  out[2] = bz;\n  out[3] = bw;\n  out[4] = ax * bw + ay * bz - az * by;\n  out[5] = ay * bw + az * bx - ax * bz;\n  out[6] = az * bw + ax * by - ay * bx;\n  out[7] = -ax * bx - ay * by - az * bz;\n  return out;\n}\n\n/**\n * Creates a dual quat from a translation\n *\n * @param {quat2} dual quaternion receiving operation result\n * @param {vec3} t translation vector\n * @returns {quat2} dual quaternion receiving operation result\n * @function\n */\nexport function fromTranslation(out, t) {\n  out[0] = 0;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 1;\n  out[4] = t[0] * 0.5;\n  out[5] = t[1] * 0.5;\n  out[6] = t[2] * 0.5;\n  out[7] = 0;\n  return out;\n}\n\n/**\n * Creates a dual quat from a quaternion\n *\n * @param {quat2} dual quaternion receiving operation result\n * @param {quat} q the quaternion\n * @returns {quat2} dual quaternion receiving operation result\n * @function\n */\nexport function fromRotation(out, q) {\n  out[0] = q[0];\n  out[1] = q[1];\n  out[2] = q[2];\n  out[3] = q[3];\n  out[4] = 0;\n  out[5] = 0;\n  out[6] = 0;\n  out[7] = 0;\n  return out;\n}\n\n/**\n * Creates a new dual quat from a matrix (4x4)\n *\n * @param {quat2} out the dual quaternion\n * @param {mat4} a the matrix\n * @returns {quat2} dual quat receiving operation result\n * @function\n */\nexport function fromMat4(out, a) {\n  //TODO Optimize this\n  let outer = quat.create();\n  mat4.getRotation(outer, a);\n  let t = new glMatrix.ARRAY_TYPE(3);\n  mat4.getTranslation(t, a);\n  fromRotationTranslation(out, outer, t);\n  return out;\n}\n\n/**\n * Copy the values from one dual quat to another\n *\n * @param {quat2} out the receiving dual quaternion\n * @param {quat2} a the source dual quaternion\n * @returns {quat2} out\n * @function\n */\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  out[4] = a[4];\n  out[5] = a[5];\n  out[6] = a[6];\n  out[7] = a[7];\n  return out;\n}\n\n/**\n * Set a dual quat to the identity dual quaternion\n *\n * @param {quat2} out the receiving quaternion\n * @returns {quat2} out\n */\nexport function identity(out) {\n  out[0] = 0;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 1;\n  out[4] = 0;\n  out[5] = 0;\n  out[6] = 0;\n  out[7] = 0;\n  return out;\n}\n\n/**\n * Set the components of a dual quat to the given values\n *\n * @param {quat2} out the receiving quaternion\n * @param {Number} x1 X component\n * @param {Number} y1 Y component\n * @param {Number} z1 Z component\n * @param {Number} w1 W component\n * @param {Number} x2 X component\n * @param {Number} y2 Y component\n * @param {Number} z2 Z component\n * @param {Number} w2 W component\n * @returns {quat2} out\n * @function\n */\nexport function set(out, x1, y1, z1, w1, x2, y2, z2, w2) {\n  out[0] = x1;\n  out[1] = y1;\n  out[2] = z1;\n  out[3] = w1;\n\n  out[4] = x2;\n  out[5] = y2;\n  out[6] = z2;\n  out[7] = w2;\n  return out;\n}\n\n/**\n * Gets the real part of a dual quat\n * @param  {quat} out real part\n * @param  {quat2} a Dual Quaternion\n * @return {quat} real part\n */\nexport const getReal = quat.copy;\n\n/**\n * Gets the dual part of a dual quat\n * @param  {quat} out dual part\n * @param  {quat2} a Dual Quaternion\n * @return {quat} dual part\n */\nexport function getDual(out, a) {\n  out[0] = a[4];\n  out[1] = a[5];\n  out[2] = a[6];\n  out[3] = a[7];\n  return out;\n}\n\n/**\n * Set the real component of a dual quat to the given quaternion\n *\n * @param {quat2} out the receiving quaternion\n * @param {quat} q a quaternion representing the real part\n * @returns {quat2} out\n * @function\n */\nexport const setReal = quat.copy;\n\n/**\n * Set the dual component of a dual quat to the given quaternion\n *\n * @param {quat2} out the receiving quaternion\n * @param {quat} q a quaternion representing the dual part\n * @returns {quat2} out\n * @function\n */\nexport function setDual(out, q) {\n  out[4] = q[0];\n  out[5] = q[1];\n  out[6] = q[2];\n  out[7] = q[3];\n  return out;\n}\n\n/**\n * Gets the translation of a normalized dual quat\n * @param  {vec3} out translation\n * @param  {quat2} a Dual Quaternion to be decomposed\n * @return {vec3} translation\n */\nexport function getTranslation(out, a) {\n  let ax = a[4],\n    ay = a[5],\n    az = a[6],\n    aw = a[7],\n    bx = -a[0],\n    by = -a[1],\n    bz = -a[2],\n    bw = a[3];\n  out[0] = (ax * bw + aw * bx + ay * bz - az * by) * 2;\n  out[1] = (ay * bw + aw * by + az * bx - ax * bz) * 2;\n  out[2] = (az * bw + aw * bz + ax * by - ay * bx) * 2;\n  return out;\n}\n\n/**\n * Translates a dual quat by the given vector\n *\n * @param {quat2} out the receiving dual quaternion\n * @param {quat2} a the dual quaternion to translate\n * @param {vec3} v vector to translate by\n * @returns {quat2} out\n */\nexport function translate(out, a, v) {\n  let ax1 = a[0],\n    ay1 = a[1],\n    az1 = a[2],\n    aw1 = a[3],\n    bx1 = v[0] * 0.5,\n    by1 = v[1] * 0.5,\n    bz1 = v[2] * 0.5,\n    ax2 = a[4],\n    ay2 = a[5],\n    az2 = a[6],\n    aw2 = a[7];\n  out[0] = ax1;\n  out[1] = ay1;\n  out[2] = az1;\n  out[3] = aw1;\n  out[4] = aw1 * bx1 + ay1 * bz1 - az1 * by1 + ax2;\n  out[5] = aw1 * by1 + az1 * bx1 - ax1 * bz1 + ay2;\n  out[6] = aw1 * bz1 + ax1 * by1 - ay1 * bx1 + az2;\n  out[7] = -ax1 * bx1 - ay1 * by1 - az1 * bz1 + aw2;\n  return out;\n}\n\n/**\n * Rotates a dual quat around the X axis\n *\n * @param {quat2} out the receiving dual quaternion\n * @param {quat2} a the dual quaternion to rotate\n * @param {number} rad how far should the rotation be\n * @returns {quat2} out\n */\nexport function rotateX(out, a, rad) {\n  let bx = -a[0],\n    by = -a[1],\n    bz = -a[2],\n    bw = a[3],\n    ax = a[4],\n    ay = a[5],\n    az = a[6],\n    aw = a[7],\n    ax1 = ax * bw + aw * bx + ay * bz - az * by,\n    ay1 = ay * bw + aw * by + az * bx - ax * bz,\n    az1 = az * bw + aw * bz + ax * by - ay * bx,\n    aw1 = aw * bw - ax * bx - ay * by - az * bz;\n  quat.rotateX(out, a, rad);\n  bx = out[0];\n  by = out[1];\n  bz = out[2];\n  bw = out[3];\n  out[4] = ax1 * bw + aw1 * bx + ay1 * bz - az1 * by;\n  out[5] = ay1 * bw + aw1 * by + az1 * bx - ax1 * bz;\n  out[6] = az1 * bw + aw1 * bz + ax1 * by - ay1 * bx;\n  out[7] = aw1 * bw - ax1 * bx - ay1 * by - az1 * bz;\n  return out;\n}\n\n/**\n * Rotates a dual quat around the Y axis\n *\n * @param {quat2} out the receiving dual quaternion\n * @param {quat2} a the dual quaternion to rotate\n * @param {number} rad how far should the rotation be\n * @returns {quat2} out\n */\nexport function rotateY(out, a, rad) {\n  let bx = -a[0],\n    by = -a[1],\n    bz = -a[2],\n    bw = a[3],\n    ax = a[4],\n    ay = a[5],\n    az = a[6],\n    aw = a[7],\n    ax1 = ax * bw + aw * bx + ay * bz - az * by,\n    ay1 = ay * bw + aw * by + az * bx - ax * bz,\n    az1 = az * bw + aw * bz + ax * by - ay * bx,\n    aw1 = aw * bw - ax * bx - ay * by - az * bz;\n  quat.rotateY(out, a, rad);\n  bx = out[0];\n  by = out[1];\n  bz = out[2];\n  bw = out[3];\n  out[4] = ax1 * bw + aw1 * bx + ay1 * bz - az1 * by;\n  out[5] = ay1 * bw + aw1 * by + az1 * bx - ax1 * bz;\n  out[6] = az1 * bw + aw1 * bz + ax1 * by - ay1 * bx;\n  out[7] = aw1 * bw - ax1 * bx - ay1 * by - az1 * bz;\n  return out;\n}\n\n/**\n * Rotates a dual quat around the Z axis\n *\n * @param {quat2} out the receiving dual quaternion\n * @param {quat2} a the dual quaternion to rotate\n * @param {number} rad how far should the rotation be\n * @returns {quat2} out\n */\nexport function rotateZ(out, a, rad) {\n  let bx = -a[0],\n    by = -a[1],\n    bz = -a[2],\n    bw = a[3],\n    ax = a[4],\n    ay = a[5],\n    az = a[6],\n    aw = a[7],\n    ax1 = ax * bw + aw * bx + ay * bz - az * by,\n    ay1 = ay * bw + aw * by + az * bx - ax * bz,\n    az1 = az * bw + aw * bz + ax * by - ay * bx,\n    aw1 = aw * bw - ax * bx - ay * by - az * bz;\n  quat.rotateZ(out, a, rad);\n  bx = out[0];\n  by = out[1];\n  bz = out[2];\n  bw = out[3];\n  out[4] = ax1 * bw + aw1 * bx + ay1 * bz - az1 * by;\n  out[5] = ay1 * bw + aw1 * by + az1 * bx - ax1 * bz;\n  out[6] = az1 * bw + aw1 * bz + ax1 * by - ay1 * bx;\n  out[7] = aw1 * bw - ax1 * bx - ay1 * by - az1 * bz;\n  return out;\n}\n\n/**\n * Rotates a dual quat by a given quaternion (a * q)\n *\n * @param {quat2} out the receiving dual quaternion\n * @param {quat2} a the dual quaternion to rotate\n * @param {quat} q quaternion to rotate by\n * @returns {quat2} out\n */\nexport function rotateByQuatAppend(out, a, q) {\n  let qx = q[0],\n    qy = q[1],\n    qz = q[2],\n    qw = q[3],\n    ax = a[0],\n    ay = a[1],\n    az = a[2],\n    aw = a[3];\n\n  out[0] = ax * qw + aw * qx + ay * qz - az * qy;\n  out[1] = ay * qw + aw * qy + az * qx - ax * qz;\n  out[2] = az * qw + aw * qz + ax * qy - ay * qx;\n  out[3] = aw * qw - ax * qx - ay * qy - az * qz;\n  ax = a[4];\n  ay = a[5];\n  az = a[6];\n  aw = a[7];\n  out[4] = ax * qw + aw * qx + ay * qz - az * qy;\n  out[5] = ay * qw + aw * qy + az * qx - ax * qz;\n  out[6] = az * qw + aw * qz + ax * qy - ay * qx;\n  out[7] = aw * qw - ax * qx - ay * qy - az * qz;\n  return out;\n}\n\n/**\n * Rotates a dual quat by a given quaternion (q * a)\n *\n * @param {quat2} out the receiving dual quaternion\n * @param {quat} q quaternion to rotate by\n * @param {quat2} a the dual quaternion to rotate\n * @returns {quat2} out\n */\nexport function rotateByQuatPrepend(out, q, a) {\n  let qx = q[0],\n    qy = q[1],\n    qz = q[2],\n    qw = q[3],\n    bx = a[0],\n    by = a[1],\n    bz = a[2],\n    bw = a[3];\n\n  out[0] = qx * bw + qw * bx + qy * bz - qz * by;\n  out[1] = qy * bw + qw * by + qz * bx - qx * bz;\n  out[2] = qz * bw + qw * bz + qx * by - qy * bx;\n  out[3] = qw * bw - qx * bx - qy * by - qz * bz;\n  bx = a[4];\n  by = a[5];\n  bz = a[6];\n  bw = a[7];\n  out[4] = qx * bw + qw * bx + qy * bz - qz * by;\n  out[5] = qy * bw + qw * by + qz * bx - qx * bz;\n  out[6] = qz * bw + qw * bz + qx * by - qy * bx;\n  out[7] = qw * bw - qx * bx - qy * by - qz * bz;\n  return out;\n}\n\n/**\n * Rotates a dual quat around a given axis. Does the normalisation automatically\n *\n * @param {quat2} out the receiving dual quaternion\n * @param {quat2} a the dual quaternion to rotate\n * @param {vec3} axis the axis to rotate around\n * @param {Number} rad how far the rotation should be\n * @returns {quat2} out\n */\nexport function rotateAroundAxis(out, a, axis, rad) {\n  //Special case for rad = 0\n  if (Math.abs(rad) < glMatrix.EPSILON) {\n    return copy(out, a);\n  }\n  let axisLength = Math.sqrt(axis[0] * axis[0] + axis[1] * axis[1] + axis[2] * axis[2]);\n\n  rad = rad * 0.5;\n  let s = Math.sin(rad);\n  let bx = s * axis[0] / axisLength;\n  let by = s * axis[1] / axisLength;\n  let bz = s * axis[2] / axisLength;\n  let bw = Math.cos(rad);\n\n  let ax1 = a[0],\n    ay1 = a[1],\n    az1 = a[2],\n    aw1 = a[3];\n  out[0] = ax1 * bw + aw1 * bx + ay1 * bz - az1 * by;\n  out[1] = ay1 * bw + aw1 * by + az1 * bx - ax1 * bz;\n  out[2] = az1 * bw + aw1 * bz + ax1 * by - ay1 * bx;\n  out[3] = aw1 * bw - ax1 * bx - ay1 * by - az1 * bz;\n\n  let ax = a[4],\n    ay = a[5],\n    az = a[6],\n    aw = a[7];\n  out[4] = ax * bw + aw * bx + ay * bz - az * by;\n  out[5] = ay * bw + aw * by + az * bx - ax * bz;\n  out[6] = az * bw + aw * bz + ax * by - ay * bx;\n  out[7] = aw * bw - ax * bx - ay * by - az * bz;\n\n  return out;\n}\n\n/**\n * Adds two dual quat's\n *\n * @param {quat2} out the receiving dual quaternion\n * @param {quat2} a the first operand\n * @param {quat2} b the second operand\n * @returns {quat2} out\n * @function\n */\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  out[3] = a[3] + b[3];\n  out[4] = a[4] + b[4];\n  out[5] = a[5] + b[5];\n  out[6] = a[6] + b[6];\n  out[7] = a[7] + b[7];\n  return out;\n}\n\n/**\n * Multiplies two dual quat's\n *\n * @param {quat2} out the receiving dual quaternion\n * @param {quat2} a the first operand\n * @param {quat2} b the second operand\n * @returns {quat2} out\n */\nexport function multiply(out, a, b) {\n  let ax0 = a[0],\n    ay0 = a[1],\n    az0 = a[2],\n    aw0 = a[3],\n    bx1 = b[4],\n    by1 = b[5],\n    bz1 = b[6],\n    bw1 = b[7],\n    ax1 = a[4],\n    ay1 = a[5],\n    az1 = a[6],\n    aw1 = a[7],\n    bx0 = b[0],\n    by0 = b[1],\n    bz0 = b[2],\n    bw0 = b[3];\n  out[0] = ax0 * bw0 + aw0 * bx0 + ay0 * bz0 - az0 * by0;\n  out[1] = ay0 * bw0 + aw0 * by0 + az0 * bx0 - ax0 * bz0;\n  out[2] = az0 * bw0 + aw0 * bz0 + ax0 * by0 - ay0 * bx0;\n  out[3] = aw0 * bw0 - ax0 * bx0 - ay0 * by0 - az0 * bz0;\n  out[4] = ax0 * bw1 + aw0 * bx1 + ay0 * bz1 - az0 * by1 + ax1 * bw0 + aw1 * bx0 + ay1 * bz0 - az1 * by0;\n  out[5] = ay0 * bw1 + aw0 * by1 + az0 * bx1 - ax0 * bz1 + ay1 * bw0 + aw1 * by0 + az1 * bx0 - ax1 * bz0;\n  out[6] = az0 * bw1 + aw0 * bz1 + ax0 * by1 - ay0 * bx1 + az1 * bw0 + aw1 * bz0 + ax1 * by0 - ay1 * bx0;\n  out[7] = aw0 * bw1 - ax0 * bx1 - ay0 * by1 - az0 * bz1 + aw1 * bw0 - ax1 * bx0 - ay1 * by0 - az1 * bz0;\n  return out;\n}\n\n/**\n * Alias for {@link quat2.multiply}\n * @function\n */\nexport const mul = multiply;\n\n/**\n * Scales a dual quat by a scalar number\n *\n * @param {quat2} out the receiving dual quat\n * @param {quat2} a the dual quat to scale\n * @param {Number} b amount to scale the dual quat by\n * @returns {quat2} out\n * @function\n */\nexport function scale(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  out[3] = a[3] * b;\n  out[4] = a[4] * b;\n  out[5] = a[5] * b;\n  out[6] = a[6] * b;\n  out[7] = a[7] * b;\n  return out;\n}\n\n/**\n * Calculates the dot product of two dual quat's (The dot product of the real parts)\n *\n * @param {quat2} a the first operand\n * @param {quat2} b the second operand\n * @returns {Number} dot product of a and b\n * @function\n */\nexport const dot = quat.dot;\n\n/**\n * Performs a linear interpolation between two dual quats's\n * NOTE: The resulting dual quaternions won't always be normalized (The error is most noticeable when t = 0.5)\n *\n * @param {quat2} out the receiving dual quat\n * @param {quat2} a the first operand\n * @param {quat2} b the second operand\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\n * @returns {quat2} out\n */\nexport function lerp(out, a, b, t) {\n  let mt = 1 - t;\n  if (dot(a, b) < 0) t = -t;\n\n  out[0] = a[0] * mt + b[0] * t;\n  out[1] = a[1] * mt + b[1] * t;\n  out[2] = a[2] * mt + b[2] * t;\n  out[3] = a[3] * mt + b[3] * t;\n  out[4] = a[4] * mt + b[4] * t;\n  out[5] = a[5] * mt + b[5] * t;\n  out[6] = a[6] * mt + b[6] * t;\n  out[7] = a[7] * mt + b[7] * t;\n\n  return out;\n}\n\n/**\n * Calculates the inverse of a dual quat. If they are normalized, conjugate is cheaper\n *\n * @param {quat2} out the receiving dual quaternion\n * @param {quat2} a dual quat to calculate inverse of\n * @returns {quat2} out\n */\nexport function invert(out, a) {\n  let sqlen = squaredLength(a);\n  out[0] = -a[0] / sqlen;\n  out[1] = -a[1] / sqlen;\n  out[2] = -a[2] / sqlen;\n  out[3] = a[3] / sqlen;\n  out[4] = -a[4] / sqlen;\n  out[5] = -a[5] / sqlen;\n  out[6] = -a[6] / sqlen;\n  out[7] = a[7] / sqlen;\n  return out;\n}\n\n/**\n * Calculates the conjugate of a dual quat\n * If the dual quaternion is normalized, this function is faster than quat2.inverse and produces the same result.\n *\n * @param {quat2} out the receiving quaternion\n * @param {quat2} a quat to calculate conjugate of\n * @returns {quat2} out\n */\nexport function conjugate(out, a) {\n  out[0] = -a[0];\n  out[1] = -a[1];\n  out[2] = -a[2];\n  out[3] = a[3];\n  out[4] = -a[4];\n  out[5] = -a[5];\n  out[6] = -a[6];\n  out[7] = a[7];\n  return out;\n}\n\n/**\n * Calculates the length of a dual quat\n *\n * @param {quat2} a dual quat to calculate length of\n * @returns {Number} length of a\n * @function\n */\nexport const length = quat.length;\n\n/**\n * Alias for {@link quat2.length}\n * @function\n */\nexport const len = length;\n\n/**\n * Calculates the squared length of a dual quat\n *\n * @param {quat2} a dual quat to calculate squared length of\n * @returns {Number} squared length of a\n * @function\n */\nexport const squaredLength = quat.squaredLength;\n\n/**\n * Alias for {@link quat2.squaredLength}\n * @function\n */\nexport const sqrLen = squaredLength;\n\n/**\n * Normalize a dual quat\n *\n * @param {quat2} out the receiving dual quaternion\n * @param {quat2} a dual quaternion to normalize\n * @returns {quat2} out\n * @function\n */\nexport function normalize(out, a) {\n  let magnitude = squaredLength(a);\n  if (magnitude > 0) {\n    magnitude = Math.sqrt(magnitude);\n    out[0] = a[0] / magnitude;\n    out[1] = a[1] / magnitude;\n    out[2] = a[2] / magnitude;\n    out[3] = a[3] / magnitude;\n    out[4] = a[4] / magnitude;\n    out[5] = a[5] / magnitude;\n    out[6] = a[6] / magnitude;\n    out[7] = a[7] / magnitude;\n  }\n  return out;\n}\n\n/**\n * Returns a string representation of a dual quatenion\n *\n * @param {quat2} a dual quaternion to represent as a string\n * @returns {String} string representation of the dual quat\n */\nexport function str(a) {\n  return 'quat2(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' + a[3] + ', ' +\n    a[4] + ', ' + a[5] + ', ' + a[6] + ', ' + a[7] + ')';\n}\n\n/**\n * Returns whether or not the dual quaternions have exactly the same elements in the same position (when compared with ===)\n *\n * @param {quat2} a the first dual quaternion.\n * @param {quat2} b the second dual quaternion.\n * @returns {Boolean} true if the dual quaternions are equal, false otherwise.\n */\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3] &&\n    a[4] === b[4] && a[5] === b[5] && a[6] === b[6] && a[7] === b[7];\n}\n\n/**\n * Returns whether or not the dual quaternions have approximately the same elements in the same position.\n *\n * @param {quat2} a the first dual quat.\n * @param {quat2} b the second dual quat.\n * @returns {Boolean} true if the dual quats are equal, false otherwise.\n */\nexport function equals(a, b) {\n  let a0 = a[0],\n    a1 = a[1],\n    a2 = a[2],\n    a3 = a[3],\n    a4 = a[4],\n    a5 = a[5],\n    a6 = a[6],\n    a7 = a[7];\n  let b0 = b[0],\n    b1 = b[1],\n    b2 = b[2],\n    b3 = b[3],\n    b4 = b[4],\n    b5 = b[5],\n    b6 = b[6],\n    b7 = b[7];\n  return (Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) &&\n    Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) &&\n    Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2)) &&\n    Math.abs(a3 - b3) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a3), Math.abs(b3)) &&\n    Math.abs(a4 - b4) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a4), Math.abs(b4)) &&\n    Math.abs(a5 - b5) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a5), Math.abs(b5)) &&\n    Math.abs(a6 - b6) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a6), Math.abs(b6)) &&\n    Math.abs(a7 - b7) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a7), Math.abs(b7)));\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/gl-matrix/src/gl-matrix/quat2.js\n// module id = 50\n// module chunks = 0","import * as glMatrix from \"./common.js\";\n\n/**\n * 2 Dimensional Vector\n * @module vec2\n */\n\n/**\n * Creates a new, empty vec2\n *\n * @returns {vec2} a new 2D vector\n */\nexport function create() {\n  let out = new glMatrix.ARRAY_TYPE(2);\n  out[0] = 0;\n  out[1] = 0;\n  return out;\n}\n\n/**\n * Creates a new vec2 initialized with values from an existing vector\n *\n * @param {vec2} a vector to clone\n * @returns {vec2} a new 2D vector\n */\nexport function clone(a) {\n  let out = new glMatrix.ARRAY_TYPE(2);\n  out[0] = a[0];\n  out[1] = a[1];\n  return out;\n}\n\n/**\n * Creates a new vec2 initialized with the given values\n *\n * @param {Number} x X component\n * @param {Number} y Y component\n * @returns {vec2} a new 2D vector\n */\nexport function fromValues(x, y) {\n  let out = new glMatrix.ARRAY_TYPE(2);\n  out[0] = x;\n  out[1] = y;\n  return out;\n}\n\n/**\n * Copy the values from one vec2 to another\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the source vector\n * @returns {vec2} out\n */\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  return out;\n}\n\n/**\n * Set the components of a vec2 to the given values\n *\n * @param {vec2} out the receiving vector\n * @param {Number} x X component\n * @param {Number} y Y component\n * @returns {vec2} out\n */\nexport function set(out, x, y) {\n  out[0] = x;\n  out[1] = y;\n  return out;\n}\n\n/**\n * Adds two vec2's\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the first operand\n * @param {vec2} b the second operand\n * @returns {vec2} out\n */\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  return out;\n}\n\n/**\n * Subtracts vector b from vector a\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the first operand\n * @param {vec2} b the second operand\n * @returns {vec2} out\n */\nexport function subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  return out;\n}\n\n/**\n * Multiplies two vec2's\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the first operand\n * @param {vec2} b the second operand\n * @returns {vec2} out\n */\nexport function multiply(out, a, b) {\n  out[0] = a[0] * b[0];\n  out[1] = a[1] * b[1];\n  return out;\n}\n\n/**\n * Divides two vec2's\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the first operand\n * @param {vec2} b the second operand\n * @returns {vec2} out\n */\nexport function divide(out, a, b) {\n  out[0] = a[0] / b[0];\n  out[1] = a[1] / b[1];\n  return out;\n}\n\n/**\n * Math.ceil the components of a vec2\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a vector to ceil\n * @returns {vec2} out\n */\nexport function ceil(out, a) {\n  out[0] = Math.ceil(a[0]);\n  out[1] = Math.ceil(a[1]);\n  return out;\n}\n\n/**\n * Math.floor the components of a vec2\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a vector to floor\n * @returns {vec2} out\n */\nexport function floor(out, a) {\n  out[0] = Math.floor(a[0]);\n  out[1] = Math.floor(a[1]);\n  return out;\n}\n\n/**\n * Returns the minimum of two vec2's\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the first operand\n * @param {vec2} b the second operand\n * @returns {vec2} out\n */\nexport function min(out, a, b) {\n  out[0] = Math.min(a[0], b[0]);\n  out[1] = Math.min(a[1], b[1]);\n  return out;\n}\n\n/**\n * Returns the maximum of two vec2's\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the first operand\n * @param {vec2} b the second operand\n * @returns {vec2} out\n */\nexport function max(out, a, b) {\n  out[0] = Math.max(a[0], b[0]);\n  out[1] = Math.max(a[1], b[1]);\n  return out;\n}\n\n/**\n * Math.round the components of a vec2\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a vector to round\n * @returns {vec2} out\n */\nexport function round (out, a) {\n  out[0] = Math.round(a[0]);\n  out[1] = Math.round(a[1]);\n  return out;\n}\n\n/**\n * Scales a vec2 by a scalar number\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the vector to scale\n * @param {Number} b amount to scale the vector by\n * @returns {vec2} out\n */\nexport function scale(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  return out;\n}\n\n/**\n * Adds two vec2's after scaling the second operand by a scalar value\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the first operand\n * @param {vec2} b the second operand\n * @param {Number} scale the amount to scale b by before adding\n * @returns {vec2} out\n */\nexport function scaleAndAdd(out, a, b, scale) {\n  out[0] = a[0] + (b[0] * scale);\n  out[1] = a[1] + (b[1] * scale);\n  return out;\n}\n\n/**\n * Calculates the euclidian distance between two vec2's\n *\n * @param {vec2} a the first operand\n * @param {vec2} b the second operand\n * @returns {Number} distance between a and b\n */\nexport function distance(a, b) {\n  var x = b[0] - a[0],\n    y = b[1] - a[1];\n  return Math.sqrt(x*x + y*y);\n}\n\n/**\n * Calculates the squared euclidian distance between two vec2's\n *\n * @param {vec2} a the first operand\n * @param {vec2} b the second operand\n * @returns {Number} squared distance between a and b\n */\nexport function squaredDistance(a, b) {\n  var x = b[0] - a[0],\n    y = b[1] - a[1];\n  return x*x + y*y;\n}\n\n/**\n * Calculates the length of a vec2\n *\n * @param {vec2} a vector to calculate length of\n * @returns {Number} length of a\n */\nexport function length(a) {\n  var x = a[0],\n    y = a[1];\n  return Math.sqrt(x*x + y*y);\n}\n\n/**\n * Calculates the squared length of a vec2\n *\n * @param {vec2} a vector to calculate squared length of\n * @returns {Number} squared length of a\n */\nexport function squaredLength (a) {\n  var x = a[0],\n    y = a[1];\n  return x*x + y*y;\n}\n\n/**\n * Negates the components of a vec2\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a vector to negate\n * @returns {vec2} out\n */\nexport function negate(out, a) {\n  out[0] = -a[0];\n  out[1] = -a[1];\n  return out;\n}\n\n/**\n * Returns the inverse of the components of a vec2\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a vector to invert\n * @returns {vec2} out\n */\nexport function inverse(out, a) {\n  out[0] = 1.0 / a[0];\n  out[1] = 1.0 / a[1];\n  return out;\n}\n\n/**\n * Normalize a vec2\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a vector to normalize\n * @returns {vec2} out\n */\nexport function normalize(out, a) {\n  var x = a[0],\n    y = a[1];\n  var len = x*x + y*y;\n  if (len > 0) {\n    //TODO: evaluate use of glm_invsqrt here?\n    len = 1 / Math.sqrt(len);\n    out[0] = a[0] * len;\n    out[1] = a[1] * len;\n  }\n  return out;\n}\n\n/**\n * Calculates the dot product of two vec2's\n *\n * @param {vec2} a the first operand\n * @param {vec2} b the second operand\n * @returns {Number} dot product of a and b\n */\nexport function dot(a, b) {\n  return a[0] * b[0] + a[1] * b[1];\n}\n\n/**\n * Computes the cross product of two vec2's\n * Note that the cross product must by definition produce a 3D vector\n *\n * @param {vec3} out the receiving vector\n * @param {vec2} a the first operand\n * @param {vec2} b the second operand\n * @returns {vec3} out\n */\nexport function cross(out, a, b) {\n  var z = a[0] * b[1] - a[1] * b[0];\n  out[0] = out[1] = 0;\n  out[2] = z;\n  return out;\n}\n\n/**\n * Performs a linear interpolation between two vec2's\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the first operand\n * @param {vec2} b the second operand\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\n * @returns {vec2} out\n */\nexport function lerp(out, a, b, t) {\n  var ax = a[0],\n    ay = a[1];\n  out[0] = ax + t * (b[0] - ax);\n  out[1] = ay + t * (b[1] - ay);\n  return out;\n}\n\n/**\n * Generates a random vector with the given scale\n *\n * @param {vec2} out the receiving vector\n * @param {Number} [scale] Length of the resulting vector. If ommitted, a unit vector will be returned\n * @returns {vec2} out\n */\nexport function random(out, scale) {\n  scale = scale || 1.0;\n  var r = glMatrix.RANDOM() * 2.0 * Math.PI;\n  out[0] = Math.cos(r) * scale;\n  out[1] = Math.sin(r) * scale;\n  return out;\n}\n\n/**\n * Transforms the vec2 with a mat2\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the vector to transform\n * @param {mat2} m matrix to transform with\n * @returns {vec2} out\n */\nexport function transformMat2(out, a, m) {\n  var x = a[0],\n    y = a[1];\n  out[0] = m[0] * x + m[2] * y;\n  out[1] = m[1] * x + m[3] * y;\n  return out;\n}\n\n/**\n * Transforms the vec2 with a mat2d\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the vector to transform\n * @param {mat2d} m matrix to transform with\n * @returns {vec2} out\n */\nexport function transformMat2d(out, a, m) {\n  var x = a[0],\n    y = a[1];\n  out[0] = m[0] * x + m[2] * y + m[4];\n  out[1] = m[1] * x + m[3] * y + m[5];\n  return out;\n}\n\n/**\n * Transforms the vec2 with a mat3\n * 3rd vector component is implicitly '1'\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the vector to transform\n * @param {mat3} m matrix to transform with\n * @returns {vec2} out\n */\nexport function transformMat3(out, a, m) {\n  var x = a[0],\n    y = a[1];\n  out[0] = m[0] * x + m[3] * y + m[6];\n  out[1] = m[1] * x + m[4] * y + m[7];\n  return out;\n}\n\n/**\n * Transforms the vec2 with a mat4\n * 3rd vector component is implicitly '0'\n * 4th vector component is implicitly '1'\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the vector to transform\n * @param {mat4} m matrix to transform with\n * @returns {vec2} out\n */\nexport function transformMat4(out, a, m) {\n  let x = a[0];\n  let y = a[1];\n  out[0] = m[0] * x + m[4] * y + m[12];\n  out[1] = m[1] * x + m[5] * y + m[13];\n  return out;\n}\n\n/**\n * Rotate a 2D vector\n * @param {vec2} out The receiving vec2\n * @param {vec2} a The vec2 point to rotate\n * @param {vec2} b The origin of the rotation\n * @param {Number} c The angle of rotation\n * @returns {vec2} out\n */\nexport function rotate(out, a, b, c) {\n  //Translate point to the origin\n  let p0 = a[0] - b[0],\n  p1 = a[1] - b[1],\n  sinC = Math.sin(c),\n  cosC = Math.cos(c);\n  \n  //perform rotation and translate to correct position\n  out[0] = p0*cosC - p1*sinC + b[0];\n  out[1] = p0*sinC + p1*cosC + b[1];\n\n  return out;\n}\n\n/**\n * Get the angle between two 2D vectors\n * @param {vec2} a The first operand\n * @param {vec2} b The second operand\n * @returns {Number} The angle in radians\n */\nexport function angle(a, b) {\n  let x1 = a[0],\n    y1 = a[1],\n    x2 = b[0],\n    y2 = b[1];\n  \n  let len1 = x1*x1 + y1*y1;\n  if (len1 > 0) {\n    //TODO: evaluate use of glm_invsqrt here?\n    len1 = 1 / Math.sqrt(len1);\n  }\n  \n  let len2 = x2*x2 + y2*y2;\n  if (len2 > 0) {\n    //TODO: evaluate use of glm_invsqrt here?\n    len2 = 1 / Math.sqrt(len2);\n  }\n  \n  let cosine = (x1 * x2 + y1 * y2) * len1 * len2;\n  \n  \n  if(cosine > 1.0) {\n    return 0;\n  }\n  else if(cosine < -1.0) {\n    return Math.PI;\n  } else {\n    return Math.acos(cosine);\n  }\n}\n\n/**\n * Returns a string representation of a vector\n *\n * @param {vec2} a vector to represent as a string\n * @returns {String} string representation of the vector\n */\nexport function str(a) {\n  return 'vec2(' + a[0] + ', ' + a[1] + ')';\n}\n\n/**\n * Returns whether or not the vectors exactly have the same elements in the same position (when compared with ===)\n *\n * @param {vec2} a The first vector.\n * @param {vec2} b The second vector.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1];\n}\n\n/**\n * Returns whether or not the vectors have approximately the same elements in the same position.\n *\n * @param {vec2} a The first vector.\n * @param {vec2} b The second vector.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\nexport function equals(a, b) {\n  let a0 = a[0], a1 = a[1];\n  let b0 = b[0], b1 = b[1];\n  return (Math.abs(a0 - b0) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a0), Math.abs(b0)) &&\n          Math.abs(a1 - b1) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a1), Math.abs(b1)));\n}\n\n/**\n * Alias for {@link vec2.length}\n * @function\n */\nexport const len = length;\n\n/**\n * Alias for {@link vec2.subtract}\n * @function\n */\nexport const sub = subtract;\n\n/**\n * Alias for {@link vec2.multiply}\n * @function\n */\nexport const mul = multiply;\n\n/**\n * Alias for {@link vec2.divide}\n * @function\n */\nexport const div = divide;\n\n/**\n * Alias for {@link vec2.distance}\n * @function\n */\nexport const dist = distance;\n\n/**\n * Alias for {@link vec2.squaredDistance}\n * @function\n */\nexport const sqrDist = squaredDistance;\n\n/**\n * Alias for {@link vec2.squaredLength}\n * @function\n */\nexport const sqrLen = squaredLength;\n\n/**\n * Perform some operation over an array of vec2s.\n *\n * @param {Array} a the array of vectors to iterate over\n * @param {Number} stride Number of elements between the start of each vec2. If 0 assumes tightly packed\n * @param {Number} offset Number of elements to skip at the beginning of the array\n * @param {Number} count Number of vec2s to iterate over. If 0 iterates over entire array\n * @param {Function} fn Function to call for each vector in the array\n * @param {Object} [arg] additional argument to pass to fn\n * @returns {Array} a\n * @function\n */\nexport const forEach = (function() {\n  let vec = create();\n\n  return function(a, stride, offset, count, fn, arg) {\n    let i, l;\n    if(!stride) {\n      stride = 2;\n    }\n\n    if(!offset) {\n      offset = 0;\n    }\n\n    if(count) {\n      l = Math.min((count * stride) + offset, a.length);\n    } else {\n      l = a.length;\n    }\n\n    for(i = offset; i < l; i += stride) {\n      vec[0] = a[i]; vec[1] = a[i+1];\n      fn(vec, vec, arg);\n      a[i] = vec[0]; a[i+1] = vec[1];\n    }\n\n    return a;\n  };\n})();\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/gl-matrix/src/gl-matrix/vec2.js\n// module id = 51\n// module chunks = 0","import { mat4 } from 'gl-matrix';\nimport Vector3 from '../math/Vector3';\nimport Camera from './Camera';\n\ninterface Options {\n  left?: number;\n  right?: number;\n  bottom?: number;\n  top?: number;\n  near?: number;\n  far?: number;\n  fov?: number;\n  position?: Vector3;\n  target?: Vector3;\n  up?: Vector3;\n}\n\nexport default class OrthographicCamera extends Camera {\n  public left: number;\n  public right: number;\n  public bottom: number;\n  public top: number;\n  constructor(options: Options = {}) {\n    super(options);\n    this.left = options.left || -1;\n    this.right = options.right || 1;\n    this.bottom = options.bottom || -1;\n    this.top = options.top || 1;\n    this.isOrthographicCamera = true;\n  }\n\n  public updateProjectionMatrix() {\n    mat4.ortho(\n      this.projectionMatrix,\n      this.left,\n      this.right,\n      this.bottom,\n      this.top,\n      this.near,\n      this.far\n    );\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/cameras/OrthographicCamera.ts","import { mat4 } from 'gl-matrix';\nimport { RENDERER_DEFAULT_RATIO } from '../core/Constants';\nimport Vector3 from '../math/Vector3';\nimport Camera from './Camera';\n\ninterface Options {\n  near?: number;\n  far?: number;\n  fov?: number;\n  position?: Vector3;\n  target?: Vector3;\n  up?: Vector3;\n}\n\nexport default class PerspectiveCamera extends Camera {\n  constructor(options: Options) {\n    super(options);\n    this.isPespectiveCamera = true;\n  }\n\n  public updateProjectionMatrix() {\n    mat4.perspective(\n      this.projectionMatrix,\n      this.fov,\n      this.aspect,\n      this.near,\n      this.far\n    );\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/cameras/PerspectiveCamera.ts","import { mat4, vec2, vec3 } from 'gl-matrix';\nimport PerspectiveCamera from '../cameras/PerspectiveCamera';\nimport Face from '../geometry/Face';\nimport Ray from '../math/Ray';\nimport Sphere from '../math/Sphere';\nimport { barycoordFromPoint } from '../math/Utils';\nimport Vector2 from '../math/Vector2';\nimport Vector3 from '../math/Vector3';\nimport Mesh from './Mesh';\nimport Scene from './Scene';\n\nconst inversedProjectionViewMatrix: mat4 = mat4.create();\nconst cameraDirection: vec3 = vec3.create();\nconst directionVector = new Vector3();\n\nlet barycoord: Vector3;\nconst fvA = new Vector3();\nconst fvB = new Vector3();\nconst fvC = new Vector3();\nconst uvA = new Vector2();\nconst uvB = new Vector2();\nconst uvC = new Vector2();\nconst sphere = new Sphere();\n\nexport default class RayCaster {\n  public ray: Ray;\n  public near: number;\n  public far: number;\n\n  constructor(origin: Vector3, direction: Vector3, near: number, far: number) {\n    this.ray = new Ray();\n    this.near = near || 0;\n    this.far = far || Infinity;\n  }\n\n  public setFromCamera(\n    coords: Vector2,\n    scene: Scene,\n    camera: PerspectiveCamera,\n    object: Mesh\n  ) {\n    if (camera && camera.isPespectiveCamera) {\n      this.ray.origin.copy(camera.position);\n\n      vec3.copy(cameraDirection, [coords.x, coords.y, 0.5]);\n\n      mat4.multiply(\n        inversedProjectionViewMatrix,\n        camera.projectionMatrix,\n        camera.worldInverseMatrix\n      );\n      mat4.invert(inversedProjectionViewMatrix, inversedProjectionViewMatrix);\n\n      vec3.transformMat4(\n        cameraDirection,\n        cameraDirection,\n        inversedProjectionViewMatrix\n      );\n\n      vec3.sub(cameraDirection, cameraDirection, camera.position.v);\n      vec3.normalize(cameraDirection, cameraDirection);\n\n      directionVector.set(\n        cameraDirection[0],\n        cameraDirection[1],\n        cameraDirection[2]\n      );\n\n      this.ray.direction.copy(directionVector);\n    }\n  }\n\n  public uvIntersection(point: Vector3, v0: Vector3, v1: Vector3, v2: Vector3) {\n    barycoord = barycoordFromPoint(point.v, v0.v, v1.v, v2.v);\n    uvA.scale(barycoord.x);\n    uvB.scale(barycoord.y);\n    uvC.scale(barycoord.z);\n    uvA.add(uvB).add(uvC);\n    return uvA.clone();\n  }\n\n  public intersectObject(object: Mesh) {\n    if (!object.visible) return;\n    let intersect;\n    let uv;\n    let face;\n\n    // Check sphere\n    if (object.boundingSphere === undefined) object.computeBoundingSphere();\n    sphere.copy(object.boundingSphere);\n    // Apply object modelMatrix, incase object has been transformed\n    sphere.applyMatrix(object.modelMatrix);\n\n    // Exit if the ray doesn't intersect the sphere\n    if (!this.ray.intersectsSphere(sphere)) {\n      return;\n    }\n\n    for (const f of object.geometry.faces) {\n      vec3.copy(fvA.v, f.vertices[0].v);\n      vec3.copy(fvB.v, f.vertices[1].v);\n      vec3.copy(fvC.v, f.vertices[2].v);\n\n      // Multiply vertices by object matrix\n      vec3.transformMat4(fvA.v, fvA.v, object.modelMatrix);\n      vec3.transformMat4(fvB.v, fvB.v, object.modelMatrix);\n      vec3.transformMat4(fvC.v, fvC.v, object.modelMatrix);\n\n      intersect = this.ray.intersectTriangle(fvA, fvB, fvC);\n\n      if (intersect) {\n        // Get uv intersection\n        vec2.copy(uvA.v, object.geometry.uvs[f.uvs[0]].v);\n        vec2.copy(uvB.v, object.geometry.uvs[f.uvs[1]].v);\n        vec2.copy(uvC.v, object.geometry.uvs[f.uvs[2]].v);\n        face = f;\n        uv = this.uvIntersection(intersect, fvA, fvB, fvC);\n        break;\n      }\n    }\n\n    return intersect ? { point: intersect, uv, face } : null;\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/core/Raycaster.ts","import { mat4 } from 'gl-matrix';\nimport Camera from '../cameras/Camera';\nimport OrthorgraphicCamera from '../cameras/OrthographicCamera';\nimport PerspectiveCamera from '../cameras/PerspectiveCamera';\nimport Scene from '../core/Scene';\nimport { log, warn } from '../utils/Console';\nimport Detect from '../utils/Detect';\nimport * as Capabilities from './Capabilities';\nimport {\n  RENDERER_DEFAULT_CONTEXT,\n  RENDERER_DEFAULT_HEIGHT,\n  RENDERER_DEFAULT_WIDTH,\n  WEBGL2_CONTEXT,\n  WEBGL_CONTEXT\n} from './Constants';\nimport * as GL from './GL';\nimport * as UniformBuffers from './UniformBuffers';\nconst config = require('../../package.json');\n\nlet gl: WebGL2RenderingContext | WebGLRenderingContext;\n\ninterface Options {\n  width?: number;\n  height?: number;\n  ratio?: number;\n  preserveDrawingBuffer?: boolean;\n  pixelRatio?: number;\n  prefferedContext?: string;\n}\n\ninterface Viewport {\n  x: number;\n  y: number;\n  width: number;\n  height: number;\n}\n\ninterface ClearColor {\n  r: number;\n  g: number;\n  b: number;\n  a: number;\n}\n\nexport default class Renderer {\n  public width: number;\n  public height: number;\n  public ratio: number;\n  public preserveDrawingBuffer: boolean;\n  public pixelRatio: number;\n  public prefferedContext: string;\n  public canvas: HTMLCanvasElement;\n  public viewport: Viewport;\n  public autoClear: boolean;\n  public clearColor: ClearColor;\n\n  constructor(options?: Options) {\n    // Default renderer settings\n    this.width = RENDERER_DEFAULT_WIDTH;\n    this.height = RENDERER_DEFAULT_HEIGHT;\n    this.ratio = RENDERER_DEFAULT_WIDTH / RENDERER_DEFAULT_HEIGHT;\n    this.preserveDrawingBuffer = false;\n    this.pixelRatio = 1;\n    this.prefferedContext = RENDERER_DEFAULT_CONTEXT;\n    this.autoClear = true;\n    this.clearColor = { r: 0, g: 0, b: 0, a: 1 };\n\n    // Apply defaults\n    Object.assign(this, options);\n\n    // Create canvas\n    this.canvas = document.createElement('canvas');\n    this.canvas.width = this.width;\n    this.canvas.height = this.height;\n\n    // Try initialising gl\n    const attributes = {\n      preserveDrawingBuffer: this.preserveDrawingBuffer\n    };\n\n    const detect = Detect();\n\n    if (detect) {\n      let contextType;\n      if (detect.webgl2 && this.prefferedContext === WEBGL2_CONTEXT) {\n        contextType = WEBGL2_CONTEXT;\n        const _gl = this.canvas.getContext(\n          'webgl2',\n          attributes\n        ) as WebGL2RenderingContext;\n        GL.set(_gl, contextType);\n      } else {\n        contextType = WEBGL_CONTEXT;\n        const _gl =\n          (this.canvas.getContext(\n            'webgl',\n            attributes\n          ) as WebGLRenderingContext) ||\n          (this.canvas.getContext(\n            'experimental-webgl',\n            attributes\n          ) as WebGLRenderingContext);\n        GL.set(_gl, contextType);\n      }\n    } else {\n      warn('Webgl not supported');\n      return;\n    }\n\n    log(\n      `%c${config.name} ${config.version} webgl${GL.webgl2 ? 2 : ''}`,\n      'padding: 1px; background: #222; color: #ff00ff'\n    );\n\n    gl = GL.get();\n\n    // Log Capabilities of gpu\n    Capabilities.set(gl);\n\n    // Setup global uniform buffers\n    if (GL.webgl2) {\n      UniformBuffers.setup();\n    }\n\n    // log(\"capabilities\", Capabilities.capabilities);\n    // log(\"extensions\", Capabilities.extensions);\n\n    this.viewport = {\n      x: 0,\n      y: 0,\n      width: gl.drawingBufferWidth,\n      height: gl.drawingBufferHeight\n    };\n\n    this.setClearColor();\n    gl.enable(gl.DEPTH_TEST);\n  }\n\n  public setClearColor(r = 0, g = 0, b = 0, a = 1) {\n    this.clearColor.r = r;\n    this.clearColor.g = g;\n    this.clearColor.b = b;\n    this.clearColor.a = a;\n  }\n\n  public setSize(width: number, height: number) {\n    const newWidth = width * this.pixelRatio;\n    const newHeight = height * this.pixelRatio;\n\n    if (newWidth !== this.width || newHeight !== this.height) {\n      this.width = width * this.pixelRatio;\n      this.height = height * this.pixelRatio;\n      this.ratio = this.width / this.height;\n\n      this.canvas.width = this.width;\n      this.canvas.height = this.height;\n\n      this.canvas.style.width = `${width}px`;\n      this.canvas.style.height = `${height}px`;\n\n      this.setViewport(0, 0, width, height);\n    }\n  }\n\n  public setDevicePixelRatio(ratio = 1) {\n    this.pixelRatio = ratio || 1;\n    this.setSize(this.width, this.height);\n  }\n\n  public setSissorTest(enable = false) {\n    gl = GL.get();\n    if (enable) {\n      gl.enable(gl.SCISSOR_TEST);\n    } else {\n      gl.disable(gl.SCISSOR_TEST);\n    }\n  }\n\n  public setSissor(x: number, y: number, width: number, height: number) {\n    gl = GL.get();\n    gl.scissor(\n      x * this.pixelRatio,\n      y * this.pixelRatio,\n      width * this.pixelRatio,\n      height * this.pixelRatio\n    );\n  }\n\n  public setViewport(x: number, y: number, width: number, height: number) {\n    this.viewport.x = x * this.pixelRatio;\n    this.viewport.y = y * this.pixelRatio;\n    this.viewport.width = width * this.pixelRatio;\n    this.viewport.height = height * this.pixelRatio;\n  }\n\n  public render(\n    scene: Scene,\n    camera: Camera | PerspectiveCamera | OrthorgraphicCamera\n  ) {\n    gl = GL.get();\n\n    gl.viewport(\n      this.viewport.x,\n      this.viewport.y,\n      this.viewport.width,\n      this.viewport.height\n    );\n\n    gl.clearColor(\n      this.clearColor.r,\n      this.clearColor.g,\n      this.clearColor.b,\n      this.clearColor.a\n    );\n\n    if (this.autoClear) {\n      gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);\n    }\n\n    // Update the scene\n    scene.update();\n\n    // Draw the scene objects\n    if (gl instanceof WebGL2RenderingContext) {\n      // Update global uniform buffers\n      UniformBuffers.updateProjectionView(gl, camera.projectionMatrix);\n    }\n\n    // Render the scene objects\n    scene.objects.forEach(child => {\n      if (child.isInstanced) {\n        child.drawInstance(camera);\n      } else {\n        child.draw(camera);\n      }\n    });\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/core/Renderer.ts","module.exports = {\"name\":\"ixviii.medium\",\"version\":\"0.4.3\",\"description\":\"Progressive WebGL toolkit for art.\",\"main\":\"lib/ixviii.medium.js\",\"scripts\":{\"start\":\"concurrently 'npm run server' 'npm run examples:js' 'npm run examples:html'\",\"server\":\"live-server ./examples --quiet --port=3000 --watch='js/*,assets/**/*,*.html' --ignore='src'\",\"examples:js\":\"webpack --config webpack.config.examples.js --colors --watch\",\"examples:html\":\"node ./pug.config.js\",\"examples:build\":\"NODE_ENV=production webpack --config webpack.config.examples.js --colors; node ./pug.config.js\",\"build\":\"NODE_ENV=production npm run lint; webpack --config webpack.config.build.js --colors; NODE_ENV=production webpack --config webpack.config.build.js --colors\",\"prepublish\":\"npm run build\",\"formatting\":\"prettier --write --single-quote --print-width 80 './src/**/*.ts'\",\"formatting:examples\":\"prettier --write --single-quote --print-width 80 './examples/src/js/**/*.js'\",\"lint:src\":\"tslint --fix ./src/**/*.ts\",\"lint:examples\":\"eslint --fix --ext .js ./examples/src ./internals --cache\",\"lint\":\"npm run lint:src; npm run lint:examples;\",\"precommit\":\"npm run lint\"},\"repository\":{\"type\":\"git\",\"url\":\"https://github.com/amelierosser/medium.git\"},\"author\":\"Amelie Rosser <amelierosser1986@gmail.com> (https://www.ixviii.io)\",\"license\":\"MIT\",\"bugs\":{\"url\":\"https://github.com/amelierosser/medium/issues\"},\"homepage\":\"https://github.com/amelierosser/medium\",\"devDependencies\":{\"@types/gl-matrix\":\"^2.3.0\",\"@types/node\":\"^10.5.2\",\"@types/webgl2\":\"^0.0.2\",\"babel-cli\":\"^6.26.0\",\"babel-eslint\":\"^8.0.0\",\"babel-loader\":\"^7.1.2\",\"babel-plugin-module-resolver\":\"^2.7.1\",\"babel-plugin-transform-class-properties\":\"^6.24.1\",\"babel-preset-env\":\"^1.6.0\",\"babel-preset-minify\":\"^0.2.0\",\"babili-webpack-plugin\":\"^0.1.2\",\"concurrently\":\"^3.5.0\",\"eslint\":\"^4.6.1\",\"eslint-config-airbnb\":\"^15.1.0\",\"eslint-config-airbnb-base\":\"^12.0.0\",\"eslint-config-prettier\":\"^2.4.0\",\"eslint-plugin-import\":\"^2.7.0\",\"eslint-plugin-prettier\":\"^2.2.0\",\"husky\":\"^0.14.3\",\"install\":\"^0.10.1\",\"json-loader\":\"^0.5.7\",\"live-server\":\"^1.2.0\",\"prettier\":\"^1.6.1\",\"pug-cli\":\"^1.0.0-alpha6\",\"stats-js\":\"^1.0.0-alpha1\",\"ts-loader\":\"^2.3.7\",\"tslint\":\"^5.7.0\",\"tslint-config-prettier\":\"^1.5.0\",\"typescript\":\"^2.5.2\",\"webpack\":\"^3.5.6\"},\"dependencies\":{\"@types/dat-gui\":\"^0.6.3\",\"bezier-js\":\"^2.2.3\",\"dat-gui\":\"^0.5.0\",\"file-name\":\"^0.1.0\",\"gl-matrix\":\"^2.4.0\",\"parse-hdr\":\"^1.0.0\",\"query-string\":\"^5.0.0\",\"shelljs\":\"^0.7.8\",\"simplex-noise\":\"^2.3.0\",\"uuid\":\"^3.1.0\",\"webgl-obj-loader\":\"^0.1.1\"}}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./package.json\n// module id = 56\n// module chunks = 0","import { mat4 } from 'gl-matrix';\nimport Camera from '../cameras/Camera';\nimport OrthographicCamera from '../cameras/OrthographicCamera';\nimport PerspectiveCamera from '../cameras/PerspectiveCamera';\nimport * as GL from './GL';\nimport Scene from './Scene';\nimport * as UniformBuffers from './UniformBuffers';\n\nlet gl: WebGL2RenderingContext | WebGLRenderingContext;\n\ninterface Options {\n  width?: number;\n  height?: number;\n  ratio?: number;\n  pixelRatio?: number;\n}\n\ninterface Viewport {\n  x: number;\n  y: number;\n  width: number;\n  height: number;\n}\n\ninterface ClearColor {\n  r: number;\n  g: number;\n  b: number;\n  a: number;\n}\n\nexport default class RenderTarget {\n  public width: number;\n  public height: number;\n  public ratio: number;\n  public pixelRatio: number;\n  public frameBuffer: WebGLFramebuffer;\n  public renderBuffer: WebGLRenderbuffer;\n  public texture: WebGLTexture;\n  public viewport: Viewport;\n  public autoClear: boolean;\n  public clearColor: ClearColor;\n\n  constructor(options: Options) {\n    this.pixelRatio = options.pixelRatio || 1;\n    this.width = options.width * this.pixelRatio;\n    this.height = options.height * this.pixelRatio;\n    this.ratio = this.width / this.height;\n    this.viewport = {\n      x: 0,\n      y: 0,\n      width: this.width,\n      height: this.height\n    };\n    this.autoClear = true;\n    this.clearColor = { r: 0, g: 0, b: 0, a: 1 };\n\n    gl = GL.get();\n    this.frameBuffer = gl.createFramebuffer();\n    gl.bindFramebuffer(gl.FRAMEBUFFER, this.frameBuffer);\n    this.texture = gl.createTexture();\n    gl.bindTexture(gl.TEXTURE_2D, this.texture);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.LINEAR);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);\n    gl.texImage2D(\n      gl.TEXTURE_2D,\n      0,\n      gl.RGBA,\n      this.width,\n      this.height,\n      0,\n      gl.RGBA,\n      gl.UNSIGNED_BYTE,\n      null\n    );\n    this.renderBuffer = gl.createRenderbuffer();\n    gl.bindRenderbuffer(gl.RENDERBUFFER, this.renderBuffer);\n    gl.renderbufferStorage(\n      gl.RENDERBUFFER,\n      gl.DEPTH_COMPONENT16,\n      this.width,\n      this.height\n    );\n    gl.framebufferTexture2D(\n      gl.FRAMEBUFFER,\n      gl.COLOR_ATTACHMENT0,\n      gl.TEXTURE_2D,\n      this.texture,\n      0\n    );\n    gl.framebufferRenderbuffer(\n      gl.FRAMEBUFFER,\n      gl.DEPTH_ATTACHMENT,\n      gl.RENDERBUFFER,\n      this.renderBuffer\n    );\n    gl.bindTexture(gl.TEXTURE_2D, null);\n    gl.bindRenderbuffer(gl.RENDERBUFFER, null);\n    gl.bindFramebuffer(gl.FRAMEBUFFER, null);\n  }\n\n  public setClearColor(r = 0, g = 0, b = 0, a = 1) {\n    this.clearColor.r = r;\n    this.clearColor.g = g;\n    this.clearColor.b = b;\n    this.clearColor.a = a;\n  }\n\n  public setSize(width: number, height: number) {\n    const newWidth = width * this.pixelRatio;\n    const newHeight = height * this.pixelRatio;\n\n    if (newWidth !== this.width || newHeight !== this.height) {\n      this.width = width * this.pixelRatio;\n      this.height = height * this.pixelRatio;\n      this.ratio = this.width / this.height;\n\n      gl.bindTexture(gl.TEXTURE_2D, this.texture);\n      gl.texImage2D(\n        gl.TEXTURE_2D,\n        0,\n        gl.RGBA,\n        this.width,\n        this.height,\n        0,\n        gl.RGBA,\n        gl.UNSIGNED_BYTE,\n        null\n      );\n      gl.bindTexture(gl.TEXTURE_2D, null);\n      gl.bindRenderbuffer(gl.RENDERBUFFER, this.renderBuffer);\n      gl.renderbufferStorage(\n        gl.RENDERBUFFER,\n        gl.DEPTH_COMPONENT16,\n        this.width,\n        this.height\n      );\n      gl.bindRenderbuffer(gl.RENDERBUFFER, null);\n\n      this.setViewport(0, 0, width, height);\n    }\n  }\n\n  public setSissorTest(enable = false) {\n    gl = GL.get();\n    if (enable) {\n      gl.enable(gl.SCISSOR_TEST);\n    } else {\n      gl.disable(gl.SCISSOR_TEST);\n    }\n  }\n\n  public setSissor(x: number, y: number, width: number, height: number) {\n    gl = GL.get();\n    gl.scissor(\n      x * this.pixelRatio,\n      y * this.pixelRatio,\n      width * this.pixelRatio,\n      height * this.pixelRatio\n    );\n  }\n\n  public setViewport(x: number, y: number, width: number, height: number) {\n    this.viewport.x = x * this.pixelRatio;\n    this.viewport.y = y * this.pixelRatio;\n    this.viewport.width = width * this.pixelRatio;\n    this.viewport.height = height * this.pixelRatio;\n  }\n\n  public render(scene: Scene, camera: PerspectiveCamera | OrthographicCamera) {\n    gl = GL.get();\n\n    gl.viewport(\n      this.viewport.x,\n      this.viewport.y,\n      this.viewport.width,\n      this.viewport.height\n    );\n\n    gl.bindFramebuffer(gl.FRAMEBUFFER, this.frameBuffer);\n\n    if (this.autoClear) {\n      gl.clearColor(\n        this.clearColor.r,\n        this.clearColor.g,\n        this.clearColor.b,\n        this.clearColor.a\n      );\n      gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);\n    }\n\n    // Update the scene\n    scene.update();\n\n    if (gl instanceof WebGL2RenderingContext) {\n      // Update global uniform buffers\n      UniformBuffers.updateProjectionView(gl, camera.projectionMatrix);\n    }\n\n    // Render the scene objects\n    scene.objects.forEach(child => {\n      if (child.isInstanced) {\n        child.drawInstance(camera);\n      } else {\n        child.draw(camera);\n      }\n    });\n\n    gl.bindTexture(gl.TEXTURE_2D, this.texture);\n    gl.bindTexture(gl.TEXTURE_2D, null);\n\n    // Reset\n    gl.bindFramebuffer(gl.FRAMEBUFFER, null);\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/core/RenderTarget.ts","import { mat4 } from 'gl-matrix';\nimport Mesh from '../core/Mesh';\nimport Lights from '../lights/Lights';\n\nexport default class Scene {\n  public objects: Mesh[];\n  public ambientLight: Lights;\n  public pointLights: Lights;\n  public directionalLights: Lights;\n\n  constructor() {\n    this.objects = [];\n    this.pointLights = undefined;\n    this.directionalLights = undefined;\n  }\n\n  public add(object: Mesh) {\n    this.objects.push(object);\n  }\n\n  public remove(object: Mesh, dispose = false) {\n    const objectIndex = this.objects.indexOf(object);\n    if (objectIndex !== -1) {\n      this.objects.splice(objectIndex, 1);\n      if (dispose) {\n        object.dispose();\n        object = undefined;\n      }\n    }\n  }\n\n  public update() {\n    if (this.ambientLight) {\n      this.ambientLight.update();\n      this.ambientLight.bind();\n    }\n    if (this.directionalLights) {\n      this.directionalLights.update();\n      this.directionalLights.bind();\n    }\n    if (this.pointLights) {\n      this.pointLights.update();\n      this.pointLights.bind();\n    }\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/core/Scene.ts","import EsVersion from './chunks/EsVersion.glsl';\n\nconst basicFragmentShaderEs300 = `${EsVersion}\n\t#HOOK_PRECISION\n\t#HOOK_DEFINES\n\n\tlayout(std140) uniform;\n\n\tin vec3 vDiffuse;\n\tin vec3 vPosition;\n\n\t#ifdef normals\n\tin vec3 vNormal;\n\t#endif\n\n\t#ifdef uv\n\tin vec2 vUv;\n\t#endif\n\n\tout vec4 outgoingColor;\n\n\t#HOOK_FRAGMENT_PRE\n\n\tvoid main(void){\n\n\t\tvec3 color = vDiffuse;\n\n\t\t#ifdef normals\n\t\tvec3 normal = normalize(vNormal);\n\t\t#endif\n\n\t\t#HOOK_FRAGMENT_MAIN\n\n\t\toutgoingColor = vec4(color.rgb, 1.0);\n\n\t\t#HOOK_FRAGMENT_END\n\t}\n`;\n\nconst basicFragmentShaderEs100 = `\n\t#HOOK_PRECISION\n\t#HOOK_DEFINES\n\n\tvarying vec3 vDiffuse;\n\tvarying vec3 vPosition;\n\n\t#ifdef normals\n\tvarying vec3 vNormal;\n\t#endif\n\n\t#ifdef uv\n\tvarying vec2 vUv;\n\t#endif\n\n\t#HOOK_FRAGMENT_PRE\n\n\tvoid main(void){\n\n\t\tvec3 color = vDiffuse;\n\n\t\t#ifdef normals\n\t\tvec3 normal = normalize(vNormal);\n\t\t#endif\n\n\t\t#HOOK_FRAGMENT_MAIN\n\n\t\tgl_FragColor = vec4(color.rgb, 1.0);\n\n\t\t#HOOK_FRAGMENT_END\n\t}\n`;\n\nexport { basicFragmentShaderEs300, basicFragmentShaderEs100 };\n\n\n\n// WEBPACK FOOTER //\n// ./src/shaders/Basic.glsl.ts","import {\n  ambientLightEs100,\n  ambientLightEs300\n} from './chunks/AmbientLight.glsl';\nimport {\n  directionalLightsEs100,\n  directionalLightsEs300\n} from './chunks/DirectionalLights.glsl';\nimport EsVersion from './chunks/EsVersion.glsl';\nimport { lambertEs100, lambertEs300 } from './chunks/Lambert.glsl';\n\nconst lambertFragmentShaderEs300 = `${EsVersion}\n\t#HOOK_PRECISION\n\t#HOOK_DEFINES\n\n\tlayout(std140) uniform;\n\n\tin vec3 vDiffuse;\n\tin vec3 vPosition;\n\n\t#ifdef normals\n\tin vec3 vNormal;\n\t#endif\n\n\t#ifdef uv\n\tin vec2 vUv;\n\t#endif\n\n\t#ifdef ambientLight\n\t${ambientLightEs300}\n\t#endif\n\n\t#ifdef directionalLights\n\t${directionalLightsEs300}\n\t${lambertEs300}\n\t#endif\n\n\tout vec4 outgoingColor;\n\n\n\t#HOOK_FRAGMENT_PRE\n\n\tvoid main(void){\n\n\t\tvec3 color = vec3(0.0);\n\n\t\t#ifdef normals\n\t\tvec3 normal = normalize(vNormal);\n\t\t#endif\n\n\t\t#HOOK_FRAGMENT_MAIN\n\n\t\t#ifdef directionalLights\n\t\tfor (int i = 0; i < #HOOK_DIRECTIONAL_LIGHTS; i++) {\n\t\t\tcolor += CalculateDirectionalLight(uDirectionalLights[i], normal);\n\t\t}\n\t\t#endif\n\n\t\toutgoingColor = vec4(color.rgb, 1.0);\n\n\t\t#HOOK_FRAGMENT_END\n\t}\n`;\n\nconst lambertFragmentShaderEs100 = `\n\t#HOOK_PRECISION\n\t#HOOK_DEFINES\n\n\tvarying vec3 vDiffuse;\n\tvarying vec3 vPosition;\n\n\t#ifdef normals\n\tvarying vec3 vNormal;\n\t#endif\n\n\t#ifdef uv\n\tvarying vec2 vUv;\n\t#endif\n\n\t#ifdef ambientLight\n\t${ambientLightEs100}\n\t#endif\n\n\t#ifdef directionalLights\n\t${directionalLightsEs100}\n\t${lambertEs100}\n\t#endif\n\n\t#HOOK_FRAGMENT_PRE\n\n\tvoid main(void){\n\n\t\tvec3 color = vec3(0.0);\n\n\t\t#ifdef normals\n\t\tvec3 normal = normalize(vNormal);\n\t\t#endif\n\n\t\t#HOOK_FRAGMENT_MAIN\n\n\t\t#ifdef directionalLights\n\t\tfor (int i = 0; i < #HOOK_DIRECTIONAL_LIGHTS; i++) {\n\t\t\tcolor += CalculateDirectionalLight(uDirectionalLights[i], normal);\n\t\t}\n\t\t#endif\n\n\t\tgl_FragColor = vec4(color.rgb, 1.0);\n\n\t\t#HOOK_FRAGMENT_END\n\t}\n`;\n\nexport { lambertFragmentShaderEs300, lambertFragmentShaderEs100 };\n\n\n\n// WEBPACK FOOTER //\n// ./src/shaders/Lambert.glsl.ts","import {\n  ambientLightEs100,\n  ambientLightEs300\n} from './chunks/AmbientLight.glsl';\nimport {\n  directionalLightsEs100,\n  directionalLightsEs300\n} from './chunks/DirectionalLights.glsl';\nimport EsVersion from './chunks/EsVersion.glsl';\nimport { lambertEs100, lambertEs300 } from './chunks/Lambert.glsl';\nimport { phongEs100, phongEs300 } from './chunks/Phong.glsl';\nimport { pointLightsEs100, pointLightsEs300 } from './chunks/PointLights.glsl';\n\nconst phongFragmentShaderEs300 = `${EsVersion}\n\t#HOOK_PRECISION\n\t#HOOK_DEFINES\n\n\tlayout(std140) uniform;\n\n\tin vec3 vDiffuse;\n\tin vec3 vPosition;\n\tin vec4 vWorldPosition;\n\n\tuniform vec3 uCameraPosition;\n\n\t#ifdef normals\n\tin vec3 vNormal;\n\t#endif\n\n\t#ifdef uv\n\tin vec2 vUv;\n\t#endif\n\n\t#ifdef ambientLight\n\t${ambientLightEs300}\n\t#endif\n\n\t#ifdef directionalLights\n\t${directionalLightsEs300}\n\t${lambertEs300}\n\t#endif\n\n\t#ifdef pointLights\n\t${pointLightsEs300}\n\t${phongEs300}\n\t#endif\n\n\tout vec4 outgoingColor;\n\n\t#HOOK_FRAGMENT_PRE\n\n\tvoid main(void){\n\n\t\tvec3 color = vec3(0.0);\n\n\t\t#ifdef normals\n\t\tvec3 normal = normalize(vNormal);\n\t\t#endif\n\n\t\t#HOOK_FRAGMENT_MAIN\n\n\t\t#ifdef directionalLights\n\t\tfor (int i = 0; i < #HOOK_DIRECTIONAL_LIGHTS; i++) {\n\t\t\tcolor += CalculateDirectionalLight(uDirectionalLights[i], normal);\n\t\t}\n\t\t#endif\n\n\t\t#ifdef pointLights\n\t\tfor (int i = 0; i < #HOOK_POINT_LIGHTS; i++) {\n\t\t\tcolor += CalculatePointLight(uPointLights[i], normal);\n\t\t}\n\t\t#endif\n\n\t\toutgoingColor = vec4(color.rgb, 1.0);\n\n\t\t#HOOK_FRAGMENT_END\n\t}\n`;\n\nconst phongFragmentShaderEs100 = `\n\t#HOOK_PRECISION\n\t#HOOK_DEFINES\n\n\tvarying vec3 vDiffuse;\n\tvarying vec3 vPosition;\n\tvarying vec4 vWorldPosition;\n\n\t#ifdef normals\n\tvarying vec3 vNormal;\n\t#endif\n\n\t#ifdef uv\n\tvarying vec2 vUv;\n\t#endif\n\n\t#ifdef ambientLight\n\t${ambientLightEs100}\n\t#endif\n\n\t#ifdef directionalLights\n\t${directionalLightsEs100}\n\t${lambertEs100}\n\t#endif\n\n\t#ifdef pointLights\n\t${pointLightsEs100}\n\t${phongEs100}\n\t#endif\n\n\t#HOOK_FRAGMENT_PRE\n\n\tvoid main(void){\n\n\t\tvec3 color = vec3(0.0);\n\n\t\t#ifdef normals\n\t\tvec3 normal = normalize(vNormal);\n\t\t#endif\n\n\t\t#HOOK_FRAGMENT_MAIN\n\n\t\t#ifdef directionalLights\n\t\tfor (int i = 0; i < #HOOK_DIRECTIONAL_LIGHTS; i++) {\n\t\t\tcolor += CalculateDirectionalLight(uDirectionalLights[i], normal);\n\t\t}\n\t\t#endif\n\n\t\t#ifdef pointLights\n\t\tfor (int i = 0; i < #HOOK_POINT_LIGHTS; i++) {\n\t\t\tcolor += CalculatePointLight(uPointLights[i], normal);\n\t\t}\n\t\t#endif\n\n\t\tgl_FragColor = vec4(color.rgb, 1.0);\n\n\t\t#HOOK_FRAGMENT_END\n\t}\n`;\n\nexport { phongFragmentShaderEs300, phongFragmentShaderEs100 };\n\n\n\n// WEBPACK FOOTER //\n// ./src/shaders/Phong.glsl.ts","// https://learnopengl.com/#!Lighting/Multiple-lights\n\nconst phongEs300 = `\n\tvec3 CalculatePointLight(PointLight light, vec3 normal) {\n\t\tvec3 lightDirection = normalize(light.position.xyz - vWorldPosition.xyz);\n\n\t\t// diffuse shading\n\t\tfloat diff = max(dot(normal, lightDirection), 0.0);\n\t\t// specular shading\n\t\tvec3 reflectDirection = reflect(-lightDirection, normal);\n\n\t\t// Fix the spec from showing on the backside by multiplying it by the lambert term\n\t\tfloat spec = diff * pow(max(dot(lightDirection, reflectDirection), 0.0), light.shininess.x);\n\t\t// attenuation\n\t\tfloat constant = 1.0;\n\t\tfloat linear = 0.09;\n\t\tfloat quadratic = 0.032;\n\n\t\tfloat dist = length(light.position.xyz);\n\t\tfloat attenuation = 1.0 / (constant + linear * dist + quadratic * (dist * dist));\n\n\t\tvec3 ambientColor = vec3(0.5);\n\t\tfloat ambientIntensity = 0.5;\n\n\t\t#ifdef ambientLight\n\t\tambientColor = uAmbientLight.color.rgb;\n\t\tambientIntensity = uAmbientLight.intensity.x;\n\t\t#endif\n\n\t\t// combine results\n\t\tvec3 ambient = (ambientColor * ambientIntensity) * vDiffuse;\n\t\tvec3 diffuse = diff * vDiffuse;\n\t\tvec3 specular = light.specularColor.rgb * spec * light.shininess.x;\n\t\tambient  *= attenuation;\n\t\tdiffuse  *= attenuation;\n\t\tspecular *= attenuation;\n\t\treturn (ambient + diffuse + specular);\n\t}\n`;\n\nconst phongEs100 = `\n\tvec3 CalculatePointLight(PointLight light, vec3 normal) {\n\t\tvec3 lightDirection = normalize(light.position - vWorldPosition.xyz);\n\n\t\t// diffuse shading\n\t\tfloat diff = max(dot(normal, lightDirection), 0.0);\n\t\t// specular shading\n\t\tvec3 reflectDirection = reflect(-lightDirection, normal);\n\n\t\t// Fix the spec from showing on the backside by multiplying it by the lambert term\n\t\tfloat spec = diff * pow(max(dot(lightDirection, reflectDirection), 0.0), light.shininess);\n\t\t// attenuation\n\t\tfloat constant = 1.0;\n\t\tfloat linear = 0.09;\n\t\tfloat quadratic = 0.032;\n\n\t\tfloat dist = length(light.position);\n\t\tfloat attenuation = 1.0 / (constant + linear * dist + quadratic * (dist * dist));\n\n\t\tvec3 ambientColor = vec3(0.5);\n\t\tfloat ambientIntensity = 0.5;\n\n\t\t#ifdef ambientLight\n\t\tambientColor = uAmbientLight.color;\n\t\tambientIntensity = uAmbientLight.intensity;\n\t\t#endif\n\n\t\t// combine results\n\t\tvec3 ambient = (ambientColor * ambientIntensity) * vDiffuse;\n\t\tvec3 diffuse = diff * vDiffuse;\n\t\tvec3 specular = light.specularColor * spec * light.shininess;\n\t\tambient  *= attenuation;\n\t\tdiffuse  *= attenuation;\n\t\tspecular *= attenuation;\n\t\treturn (ambient + diffuse + specular);\n\t}\n`;\n\nexport { phongEs300, phongEs100 };\n\n\n\n// WEBPACK FOOTER //\n// ./src/shaders/chunks/Phong.glsl.ts","import EsVersion from './chunks/EsVersion.glsl';\nimport { definePI, definePITwo } from './chunks/Math.glsl';\nimport ProjectionView from './chunks/ProjectionView.glsl';\n\nconst vertexShaderEs300 = `${EsVersion}\n\t${definePI}\n\t${definePITwo}\n\t#HOOK_DEFINES\n\n\tlayout(std140) uniform;\n\n\t${ProjectionView}\n\n\tuniform mat4 uProjectionMatrix;\n\tuniform mat4 uModelViewMatrix;\n\tuniform mat4 uModelMatrix;\n\tuniform mat3 uNormalMatrix;\n\n\tin vec3 aVertexPosition;\n\tout vec3 vPosition;\n\tout vec4 vWorldPosition;\n\n\t// Camera\n\tuniform vec3 uCameraPosition;\n\n\t#ifdef vertexColors\n\tin vec3 aVertexColor;\n\t#endif\n\n\t// Color\n\tuniform vec3 uDiffuse;\n\tout vec3 vDiffuse;\n\n\t// Normal\n\t#ifdef normals\n\tin vec3 aVertexNormal;\n\tout vec3 vNormal;\n\t#endif\n\n\t// Uv\n\t#ifdef uv\n\tin vec2 aUv;\n\tout vec2 vUv;\n\t#endif\n\n\t#HOOK_VERTEX_PRE\n\n\tvoid main(void){\n\n\t\tvDiffuse = uDiffuse;\n\n\t\t// Override for custom positioning\n\t\tvec3 transformed = vec3(0.0);\n\n\t\t#ifdef vertexColors\n\t\tvDiffuse = aVertexColor;\n\t\t#endif\n\n\t\t#ifdef uv\n\t\tvUv = aUv;\n\t\t#endif\n\n\t\t#HOOK_VERTEX_MAIN\n\n\t\t#ifdef normals\n\t\tvNormal = uNormalMatrix * aVertexNormal;\n\t\t#endif\n\n\t\t// Vertex position + offset\n\t\tvPosition = aVertexPosition + transformed;\n\n\t\t// Calculate world position of vertex with transformed\n\t\tvWorldPosition = uModelMatrix * vec4(aVertexPosition + transformed, 1.0);\n\n\t\tgl_Position = uProjectionView.projectionMatrix * uModelViewMatrix * vec4(vPosition, 1.0);\n\n\t\t#HOOK_VERTEX_END\n\t}\n`;\n\nconst vertexShaderEs100 = `\n\n\t${definePI}\n\t${definePITwo}\n\t#HOOK_DEFINES\n\n\t// Position\n\tuniform mat4 uProjectionMatrix;\n\tuniform mat4 uModelViewMatrix;\n\tuniform mat4 uModelMatrix;\n\tuniform mat3 uNormalMatrix;\n\tattribute vec3 aVertexPosition;\n\tvarying vec3 vPosition;\n\tvarying vec4 vWorldPosition;\n\n\t// Camera\n\tuniform vec3 uCameraPosition;\n\n\t#ifdef vertexColors\n\tattribute vec3 aVertexColor;\n\t#endif\n\n\t// Color\n\tuniform vec3 uDiffuse;\n\tvarying vec3 vDiffuse;\n\n\t// Normal\n\t#ifdef normals\n\tattribute vec3 aVertexNormal;\n\tvarying vec3 vNormal;\n\t#endif\n\n\t// Uv\n\t#ifdef uv\n\tattribute vec2 aUv;\n\tvarying vec2 vUv;\n\t#endif\n\n\t#HOOK_VERTEX_PRE\n\n\tvoid main(void){\n\n\t\tvDiffuse = uDiffuse;\n\n\t\t// Override for custom positioning\n\t\tvec3 transformed = vec3(0.0);\n\n\t\t#ifdef vertexColors\n\t\tvDiffuse = aVertexColor;\n\t\t#endif\n\n\t\t#ifdef uv\n\t\tvUv = aUv;\n\t\t#endif\n\n\t\t#HOOK_VERTEX_MAIN\n\n\t\t#ifdef normals\n\t\tvNormal = uNormalMatrix * aVertexNormal;\n\t\t#endif\n\n\t\t// Vertex position + offset\n\t\tvPosition = aVertexPosition + transformed;\n\n\t\t// Calculate world position of vertex with transformed\n\t\tvWorldPosition = uModelMatrix * vec4(aVertexPosition + transformed, 1.0);\n\n\t\tgl_Position = uProjectionMatrix * uModelViewMatrix * vec4(vPosition, 1.0);\n\n\t\t#HOOK_VERTEX_END\n\t}\n`;\n\nexport { vertexShaderEs300, vertexShaderEs100 };\n\n\n\n// WEBPACK FOOTER //\n// ./src/shaders/Vertex.glsl.ts","import * as GL from '../core/GL';\nimport EsVersion from '../shaders/chunks/EsVersion.glsl';\n\nconst WORD_REGX = word => new RegExp(`\\\\b${word}\\\\b`, 'gi');\n\nconst LINE_REGX = word => new RegExp(`${word}`, 'gi');\n\nconst VERTEX = [\n  {\n    match: WORD_REGX('in'),\n    replace: 'attribute'\n  },\n  {\n    match: WORD_REGX('out'),\n    replace: 'varying'\n  }\n];\nconst FRAGMENT = [\n  {\n    match: WORD_REGX('in'),\n    replace: 'varying'\n  },\n  {\n    match: LINE_REGX('out vec4 outgoingColor;'),\n    replace: ''\n  },\n  {\n    match: WORD_REGX('outgoingColor'),\n    replace: 'gl_FragColor'\n  },\n  {\n    match: WORD_REGX('textureProj'),\n    replace: 'texture2DProj'\n  },\n  {\n    match: WORD_REGX('texture'),\n    replace(shader: any): string {\n      // Find all texture defintions\n      const textureGlobalRegx = new RegExp('\\\\btexture\\\\b', 'gi');\n\n      // Find single texture definition\n      const textureSingleRegx = new RegExp('\\\\btexture\\\\b', 'i');\n\n      // Gets the texture call signature e.g texture(uTexture1, vUv);\n      const textureUniformNameRegx = new RegExp(/texture\\(([^)]+)\\)/, 'i');\n\n      // Get all matching occurances\n      const matches = shader.match(textureGlobalRegx);\n      let replacement = '';\n\n      // If nothing matches return\n      if (matches === null) return shader;\n\n      // Replace each occurance by it's uniform type\n      for (const i of matches) {\n        const match = shader.match(textureUniformNameRegx)[0];\n        if (match) {\n          // Extract the uniform name\n          const uniformName = match.replace('texture(', '').split(',')[0];\n          // Find the uniform definition\n          let uniformType = shader.match(`(.*?) ${uniformName}`, 'i')[1];\n          // Remove whitespace at the start\n          uniformType = uniformType.replace(/^\\s+/g, '');\n          // Get the sampler type\n          uniformType = uniformType.split(' ')[1];\n\n          switch (uniformType) {\n            case 'sampler2D': {\n              replacement = 'texture2D';\n              break;\n            }\n            case 'samplerCube': {\n              replacement = 'textureCube';\n              break;\n            }\n            default:\n          }\n        }\n        shader = shader.replace(textureSingleRegx, replacement);\n      }\n      return shader;\n    }\n  }\n];\nconst GENERIC = [\n  {\n    match: LINE_REGX(EsVersion),\n    replace: ''\n  }\n];\n\nconst VERTEX_RULES = [...GENERIC, ...VERTEX];\n\nconst FRAGMENT_RULES = [...GENERIC, ...FRAGMENT];\n\n/**\n * Replaces es300 syntax to es100\n */\nexport default function parse(shader: string, shaderType: string) {\n  if (GL.webgl2) {\n    return shader;\n  }\n\n  const rules = shaderType === 'vertex' ? VERTEX_RULES : FRAGMENT_RULES;\n\n  rules.forEach(rule => {\n    if (typeof rule.replace === 'function') {\n      shader = rule.replace(shader);\n    } else {\n      shader = shader.replace(rule.match, rule.replace);\n    }\n  });\n\n  // if (shaderType === 'vertex') {\n  // \tconsole.log(shader);\n  // }\n\n  // if (shaderType === 'fragment') {\n  // \tconsole.log(shader);\n  // }\n\n  return shader;\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/utils/ShaderParser.ts","import { addLineNumbers } from '../math/Utils';\nimport { log, warn } from '../utils/Console';\nimport * as GL from './GL';\n\nlet gl: WebGL2RenderingContext | WebGLRenderingContext;\n\nexport default class Program {\n  public program: WebGLProgram;\n  public created: boolean;\n  public uniformBlocks: object;\n  public attributeLocations: object;\n  public compiledVertexShader: string;\n  public compiledFragmentShader: string;\n\n  constructor() {\n    gl = GL.get();\n    this.program = gl.createProgram();\n    this.created = false;\n\n    // Uniform blocks\n    this.uniformBlocks = {};\n\n    // Cache all attribute locations\n    this.attributeLocations = {};\n  }\n\n  public link(\n    vertexShader: string,\n    fragmentShader: string,\n    transformFeedbackVaryings: string[]\n  ) {\n    this.compiledVertexShader = this.compile('vs', vertexShader);\n    this.compiledFragmentShader = this.compile('fs', fragmentShader);\n\n    // Don\"t attach a broken shader\n    // this will allow other objects to continue rendering\n    if (!this.compiledVertexShader || !this.compiledFragmentShader) {\n      return;\n    }\n\n    gl.attachShader(this.program, this.compiledVertexShader);\n    gl.attachShader(this.program, this.compiledFragmentShader);\n\n    if (\n      transformFeedbackVaryings instanceof Array &&\n      gl instanceof WebGL2RenderingContext\n    ) {\n      gl.transformFeedbackVaryings(\n        this.program,\n        transformFeedbackVaryings,\n        gl.SEPARATE_ATTRIBS\n      );\n    }\n\n    gl.linkProgram(this.program);\n    gl.validateProgram(this.program);\n\n    if (!gl.getProgramParameter(this.program, gl.LINK_STATUS)) {\n      const info = gl.getProgramInfoLog(this.program);\n      warn('Failed to initialise shaders', info);\n    }\n\n    this.created = true;\n  }\n\n  public compile(type: string, source: string) {\n    gl = GL.get();\n    let shader;\n\n    // console.log(source);\n\n    switch (type) {\n      case 'vs':\n        shader = gl.createShader(gl.VERTEX_SHADER);\n        break;\n      default:\n        shader = gl.createShader(gl.FRAGMENT_SHADER);\n    }\n\n    gl.shaderSource(shader, source);\n    gl.compileShader(shader);\n\n    if (!gl.getShaderParameter(shader, gl.COMPILE_STATUS)) {\n      warn(`Failed to compile '${type}' shader:`);\n      warn(gl.getShaderInfoLog(shader));\n      warn(addLineNumbers(source));\n      return false;\n    }\n\n    return shader;\n  }\n\n  public setAttributeLocation(attributeName: string) {\n    if (!this.created) return;\n    gl = GL.get();\n    this.attributeLocations[attributeName] = gl.getAttribLocation(\n      this.program,\n      attributeName\n    );\n    gl.enableVertexAttribArray(this.attributeLocations[attributeName]);\n  }\n\n  public setAttributePointer(attributeName: string, itemSize: number) {\n    gl = GL.get();\n    gl.vertexAttribPointer(\n      this.attributeLocations[attributeName],\n      itemSize,\n      gl.FLOAT,\n      false,\n      0,\n      0\n    );\n  }\n\n  public setAttributeInstancedPointer(attributeName: string, itemSize: number) {\n    gl = GL.get();\n    gl.vertexAttribPointer(\n      this.attributeLocations[attributeName],\n      itemSize,\n      gl.FLOAT,\n      false,\n      0,\n      0\n    );\n  }\n\n  public setUniformLocation(uniforms: object, uniformName: string) {\n    if (!this.created) return;\n    gl = GL.get();\n    uniforms[uniformName].location = gl.getUniformLocation(\n      this.program,\n      uniformName\n    );\n  }\n\n  public setUniformBlockLocation(\n    uniformName: string,\n    uniformBuffer: WebGLBuffer,\n    index: number\n  ) {\n    gl = GL.get();\n    if (gl instanceof WebGL2RenderingContext) {\n      this.uniformBlocks[uniformName] = gl.getUniformBlockIndex(\n        this.program,\n        uniformName\n      );\n      gl.uniformBlockBinding(\n        this.program,\n        this.uniformBlocks[uniformName],\n        index\n      );\n      gl.bindBufferBase(gl.UNIFORM_BUFFER, index, uniformBuffer);\n    }\n  }\n\n  public bind() {\n    gl = GL.get();\n    gl.useProgram(this.program);\n  }\n\n  public dispose() {\n    gl = GL.get();\n    let attributeLocation;\n\n    // Cleanup attribute locations\n    Object.keys(this.attributeLocations).forEach(attributeName => {\n      attributeLocation = this.attributeLocations[attributeName];\n      gl.disableVertexAttribArray(attributeLocation);\n    });\n\n    gl.detachShader(this.program, this.compiledVertexShader);\n    gl.detachShader(this.program, this.compiledFragmentShader);\n    gl.deleteProgram(this.program);\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/core/Program.ts","import EventDispatcher from '../core/EventDispatcher';\nimport HdrLoader from '../loaders/HdrLoader';\nimport ImageLoader from '../loaders/ImageLoader';\nimport { isPowerOf2, nearestPowerOf2 } from '../math/Utils';\nimport { createCanvas } from '../utils/Canvas';\nimport { warn } from '../utils/Console';\nimport * as GL from './GL';\nimport ImageData from './ImageData';\n\nlet gl: WebGL2RenderingContext | WebGLRenderingContext;\n\ninterface Options {\n  src?: number;\n  magFilter?: number;\n  minFilter?: number;\n  wrapS?: number;\n  wrapT?: number;\n  resizeToPow2?: number;\n}\n\nexport default class Texture extends EventDispatcher {\n  public src: string;\n  public magFilter: number;\n  public minFilter: number;\n  public wrapS: number;\n  public wrapT: number;\n  public resizeToPow2: boolean;\n  public texture: WebGLTexture;\n  public _isHdr: boolean;\n  public image: HTMLImageElement | HTMLCanvasElement | ImageData;\n\n  constructor(options: Options) {\n    super();\n    gl = GL.get();\n\n    this.src = null;\n    this.magFilter = gl.NEAREST;\n    this.minFilter = gl.NEAREST;\n    this.wrapS = gl.CLAMP_TO_EDGE;\n    this.wrapT = gl.CLAMP_TO_EDGE;\n    this.resizeToPow2 = false;\n\n    Object.assign(this, options);\n\n    const { canvas } = createCanvas(1, 1);\n\n    this.texture = gl.createTexture();\n    gl.bindTexture(gl.TEXTURE_2D, this.texture);\n    gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, canvas);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, this.magFilter);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, this.minFilter);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, this.wrapS);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, this.wrapT);\n    gl.bindTexture(gl.TEXTURE_2D, null);\n\n    if (this.src) {\n      this._isHdr = this.src.split('.').pop() === 'hdr';\n      this.load(this.src);\n    }\n  }\n\n  public load(src: string) {\n    if (this._isHdr) {\n      HdrLoader(src)\n        .then(this.onTextureLoaded)\n        .catch(this.onTextureError);\n    } else {\n      ImageLoader(src)\n        .then(this.onTextureLoaded)\n        .catch(this.onTextureError);\n    }\n  }\n\n  public onTextureLoaded = response => {\n    this.image = response;\n    this.update(this.image);\n    this.emit('loaded');\n  };\n\n  public onTextureError = (error: string) => {\n    warn(error);\n    this.emit('error', error);\n  };\n\n  public updateImage(src: string) {\n    this.src = src || this.src;\n    this.load(this.src);\n  }\n\n  public update(image: HTMLCanvasElement | HTMLImageElement | ImageData) {\n    gl = GL.get();\n\n    gl.bindTexture(gl.TEXTURE_2D, this.texture);\n    gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, true);\n    if (image instanceof ImageData && gl instanceof WebGL2RenderingContext) {\n      this.image = image;\n      // This is only for hdr data texture atm\n      gl.texImage2D(\n        gl.TEXTURE_2D,\n        0,\n        gl.RGBA16F,\n        image.width,\n        image.height,\n        0,\n        gl.RGBA,\n        gl.FLOAT,\n        image.data\n      );\n    } else if (\n      image instanceof HTMLCanvasElement ||\n      image instanceof HTMLImageElement\n    ) {\n      gl.texImage2D(\n        gl.TEXTURE_2D,\n        0,\n        gl.RGBA,\n        gl.RGBA,\n        gl.UNSIGNED_BYTE,\n        image\n      );\n    }\n    gl.bindTexture(gl.TEXTURE_2D, null);\n  }\n\n  public _resizeImage(image) {\n    if (!this.resizeToPow2 || image instanceof ImageData) return this.image;\n\n    // Return if the image size is already a power of 2\n    if (isPowerOf2(image.width) && isPowerOf2(image.height)) {\n      return image;\n    }\n\n    const size = nearestPowerOf2(Math.max(image.width, image.height));\n\n    const { canvas, ctx } = createCanvas(size, size);\n    ctx.drawImage(image, 0, 0, size, size);\n\n    return canvas;\n  }\n\n  public dispose() {\n    gl = GL.get();\n    gl.deleteTexture(this.texture);\n    this.texture = null;\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/core/Texture.ts","//Code ported by Marcin Ignac (2014)\n//Based on Java implementation from\n//https://code.google.com/r/cys12345-research/source/browse/hdr/image_processor/RGBE.java?r=7d84e9fd866b24079dbe61fa0a966ce8365f5726\nvar radiancePattern = \"#\\\\?RADIANCE\"\nvar commentPattern = \"#.*\"\nvar gammaPattern = \"GAMMA=\";\nvar exposurePattern = \"EXPOSURE=\\\\s*([0-9]*[.][0-9]*)\";\nvar formatPattern = \"FORMAT=32-bit_rle_rgbe\";\nvar widthHeightPattern = \"-Y ([0-9]+) \\\\+X ([0-9]+)\";\n\n//http://croquetweak.blogspot.co.uk/2014/08/deconstructing-floats-frexp-and-ldexp.html\nfunction ldexp(mantissa, exponent) {\n    return exponent > 1023 // avoid multiplying by infinity\n        ? mantissa * Math.pow(2, 1023) * Math.pow(2, exponent - 1023)\n        : exponent < -1074 // avoid multiplying by zero\n        ? mantissa * Math.pow(2, -1074) * Math.pow(2, exponent + 1074)\n        : mantissa * Math.pow(2, exponent);\n}\n\nfunction readPixelsRawRLE(buffer, data, offset, fileOffset, scanline_width, num_scanlines) {\n    var rgbe = new Array(4);\n    var scanline_buffer = null;\n    var ptr;\n    var ptr_end;\n    var count;\n    var buf = new Array(2);\n    var bufferLength = buffer.length;\n\n    function readBuf(buf) {\n      var bytesRead = 0;\n      do {\n        buf[bytesRead++] = buffer[fileOffset];\n      } while(++fileOffset < bufferLength && bytesRead < buf.length);\n      return bytesRead;\n    }\n\n    function readBufOffset(buf, offset, length) {\n      var bytesRead = 0;\n      do {\n        buf[offset + bytesRead++] = buffer[fileOffset];\n      } while(++fileOffset < bufferLength && bytesRead < length);\n      return bytesRead;\n    }\n\n    function readPixelsRaw(buffer, data, offset, numpixels) {\n        var numExpected = 4 * numpixels;\n        var numRead = readBufOffset(data, offset, numExpected);\n        if (numRead < numExpected) {\n            throw new Error('Error reading raw pixels: got ' + numRead + ' bytes, expected ' + numExpected);\n        }\n    }\n\n    while (num_scanlines > 0) {\n      if (readBuf(rgbe) < rgbe.length) {\n        throw new Error(\"Error reading bytes: expected \" + rgbe.length);\n      }\n\n      if ((rgbe[0] != 2)||(rgbe[1] != 2)||((rgbe[2] & 0x80) != 0)) {\n          //this file is not run length encoded\n          data[offset++] = rgbe[0];\n          data[offset++] = rgbe[1];\n          data[offset++] = rgbe[2];\n          data[offset++] = rgbe[3];\n          readPixelsRaw(buffer, data, offset, scanline_width*num_scanlines-1);\n          return;\n      }\n\n      if ((((rgbe[2] & 0xFF)<<8) | (rgbe[3] & 0xFF)) != scanline_width) {\n        throw new Error(\"Wrong scanline width \" + (((rgbe[2] & 0xFF)<<8) | (rgbe[3] & 0xFF)) + \", expected \" + scanline_width);\n      }\n\n      if (scanline_buffer == null) {\n        scanline_buffer = new Array(4*scanline_width);\n      }\n\n      ptr = 0;\n      /* read each of the four channels for the scanline into the buffer */\n      for (var i=0; i<4; i++) {\n        ptr_end = (i+1)*scanline_width;\n        while(ptr < ptr_end) {\n          if (readBuf(buf) < buf.length) {\n            throw new Error(\"Error reading 2-byte buffer\");\n          }\n          if ((buf[0] & 0xFF) > 128) {\n            /* a run of the same value */\n            count = (buf[0] & 0xFF) - 128;\n            if ((count == 0) || (count > ptr_end - ptr)) {\n              throw new Error(\"Bad scanline data\");\n            }\n            while(count-- > 0)\n              scanline_buffer[ptr++] = buf[1];\n          }\n          else {\n            /* a non-run */\n            count = buf[0] & 0xFF;\n            if ((count == 0) || (count > ptr_end - ptr)) {\n              throw new Error(\"Bad scanline data\");\n            }\n            scanline_buffer[ptr++] = buf[1];\n            if (--count > 0) {\n              if (readBufOffset(scanline_buffer, ptr, count) < count) {\n                throw new Error(\"Error reading non-run data\");\n              }\n              ptr += count;\n            }\n          }\n        }\n      }\n\n      /* copy byte data to output */\n      for(var i = 0; i < scanline_width; i++) {\n        data[offset + 0] = scanline_buffer[i];\n        data[offset + 1] = scanline_buffer[i+scanline_width];\n        data[offset + 2] = scanline_buffer[i+2*scanline_width];\n        data[offset + 3] = scanline_buffer[i+3*scanline_width];\n        offset += 4;\n      }\n\n      num_scanlines--;\n    }\n\n}\n\n//Returns data as floats and flipped along Y by default\nfunction parseHdr(buffer) {\n    if (buffer instanceof ArrayBuffer) {\n        buffer = new Uint8Array(buffer);\n    }\n\n    var fileOffset = 0;\n    var bufferLength = buffer.length;\n\n    var NEW_LINE = 10;\n\n    function readLine() {\n        var buf = \"\";\n        do {\n            var b = buffer[fileOffset];\n            if (b == NEW_LINE) {\n                ++fileOffset\n                break;\n            }\n            buf += String.fromCharCode(b);\n        } while(++fileOffset < bufferLength);\n        return buf;\n    }\n\n    var width = 0;\n    var height = 0;\n    var exposure = 1;\n    var gamma = 1;\n    var rle = false;\n\n    for(var i=0; i<20; i++) {\n        var line = readLine();\n        var match;\n        if (match = line.match(radiancePattern)) {\n        }\n        else if (match = line.match(formatPattern)) {\n            rle = true;\n        }\n        else if (match = line.match(exposurePattern)) {\n            exposure = Number(match[1]);\n        }\n        else if (match = line.match(commentPattern)) {\n        }\n        else if (match = line.match(widthHeightPattern)) {\n            height = Number(match[1]);\n            width = Number(match[2]);\n            break;\n        }\n    }\n\n    if (!rle) {\n        throw new Error(\"File is not run length encoded!\");\n    }\n\n    var data = new Uint8Array(width * height * 4);\n    var scanline_width = width;\n    var num_scanlines = height;\n\n    readPixelsRawRLE(buffer, data, 0, fileOffset, scanline_width, num_scanlines);\n\n    //TODO: Should be Float16\n    var floatData = new Float32Array(width * height * 4);\n    for(var offset=0; offset<data.length; offset += 4) {\n        var r = data[offset+0]/255;\n        var g = data[offset+1]/255;\n        var b = data[offset+2]/255;\n        var e = data[offset+3];\n        var f = Math.pow(2.0, e - 128.0)\n\n        r *= f;\n        g *= f;\n        b *= f;\n\n        var floatOffset = offset;\n\n        floatData[floatOffset+0] = r;\n        floatData[floatOffset+1] = g;\n        floatData[floatOffset+2] = b;\n        floatData[floatOffset+3] = 1.0;\n    }\n\n    return {\n        shape: [width, height],\n        exposure: exposure,\n        gamma: gamma,\n        data: floatData\n    }\n}\n\nmodule.exports = parseHdr;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/parse-hdr/index.js\n// module id = 67\n// module chunks = 0","import EventDispatcher from '../core/EventDispatcher';\nimport HdrLoader from '../loaders/HdrLoader';\nimport ImageLoader from '../loaders/ImageLoader';\nimport { warn } from '../utils/Console';\nimport * as GL from './GL';\nimport ImageData from './ImageData';\n\nlet gl: WebGL2RenderingContext | WebGLRenderingContext;\n\ninterface Options {\n  src: Uint8Array;\n  size: number;\n}\n\nexport default class Texture3d extends EventDispatcher {\n  public src: Uint8Array;\n  public size: number;\n  public texture: WebGLTexture;\n\n  constructor(options: Options) {\n    super();\n    gl = GL.get();\n\n    if (!(gl instanceof WebGL2RenderingContext)) {\n      return;\n    }\n\n    this.src = null;\n    this.size = null;\n    Object.assign(this, options);\n\n    this.texture = gl.createTexture();\n    gl.activeTexture(gl.TEXTURE0);\n    gl.bindTexture(gl.TEXTURE_3D, this.texture);\n    gl.texParameteri(gl.TEXTURE_3D, gl.TEXTURE_BASE_LEVEL, 0);\n    gl.texParameteri(gl.TEXTURE_3D, gl.TEXTURE_MAX_LEVEL, Math.log2(this.size));\n    gl.texParameteri(\n      gl.TEXTURE_3D,\n      gl.TEXTURE_MIN_FILTER,\n      gl.LINEAR_MIPMAP_LINEAR\n    );\n    gl.texParameteri(gl.TEXTURE_3D, gl.TEXTURE_MAG_FILTER, gl.LINEAR);\n\n    gl.texImage3D(\n      gl.TEXTURE_3D,\n      0,\n      gl.R8,\n      this.size,\n      this.size,\n      this.size,\n      0,\n      gl.RED,\n      gl.UNSIGNED_BYTE,\n      this.src\n    );\n    gl.generateMipmap(gl.TEXTURE_3D);\n  }\n\n  public dispose() {\n    gl = GL.get();\n    if (!(gl instanceof WebGL2RenderingContext)) {\n      return;\n    }\n    gl.deleteTexture(this.texture);\n    this.texture = null;\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/core/Texture3d.ts","import EventDispatcher from '../core/EventDispatcher';\nimport HdrLoader from '../loaders/HdrLoader';\nimport ImageLoader from '../loaders/ImageLoader';\nimport { isPowerOf2, nearestPowerOf2 } from '../math/Utils';\nimport { createCanvas } from '../utils/Canvas';\nimport { warn } from '../utils/Console';\nimport * as GL from './GL';\nimport ImageData from './ImageData';\n\nlet gl: WebGL2RenderingContext | WebGLRenderingContext;\n\ninterface Options {\n  src: string[];\n  magFilter: number;\n  minFilter: number;\n  wrapS: number;\n  wrapT: number;\n  resizeToPow2: boolean;\n}\n\nexport default class TextureCube extends EventDispatcher {\n  public src: string[];\n  public magFilter: number;\n  public minFilter: number;\n  public wrapS: number;\n  public wrapT: number;\n  public resizeToPow2: boolean;\n  public texture: WebGLTexture;\n  public _isHdr: boolean;\n  public loaders: any[];\n  public images: HTMLImageElement[];\n\n  constructor(options: Options) {\n    super();\n    gl = GL.get();\n\n    this.src = Array(6).fill('');\n    this.magFilter = gl.LINEAR;\n    this.minFilter = gl.LINEAR;\n    this.wrapS = gl.CLAMP_TO_EDGE;\n    this.wrapT = gl.CLAMP_TO_EDGE;\n    this.resizeToPow2 = false;\n\n    Object.assign(this, options);\n\n    this.texture = gl.createTexture();\n    this.images = [];\n    this.loaders = [];\n\n    const images = [];\n    const { canvas } = createCanvas(1, 1);\n    for (let i = 0; i < 6; i += 1) {\n      images.push(canvas);\n    }\n\n    this.update(images);\n\n    // Check media type\n    this._isHdr = this.src[0].split('.').pop() === 'hdr';\n\n    this.src.forEach((src, i) => {\n      this.loaders[i] = this.load(this.src[i]);\n    });\n\n    Promise.all(this.loaders)\n      .then(this.onTextureLoaded)\n      .catch(this.onTextureError);\n  }\n\n  public load(src: string) {\n    if (this._isHdr) {\n      return HdrLoader(src);\n    } else {\n      return ImageLoader(src);\n    }\n  }\n\n  public onTextureLoaded = response => {\n    this.images = response;\n    this.update(this.images);\n    this.emit('loaded');\n  };\n\n  public onTextureError = (error: string) => {\n    warn(error);\n    this.emit('error', error);\n  };\n\n  public update(\n    images: Array<HTMLCanvasElement | HTMLImageElement | ImageData>\n  ) {\n    gl = GL.get();\n\n    gl.bindTexture(gl.TEXTURE_CUBE_MAP, this.texture);\n\n    const targets = [\n      gl.TEXTURE_CUBE_MAP_POSITIVE_X,\n      gl.TEXTURE_CUBE_MAP_NEGATIVE_X,\n      gl.TEXTURE_CUBE_MAP_POSITIVE_Y,\n      gl.TEXTURE_CUBE_MAP_NEGATIVE_Y,\n      gl.TEXTURE_CUBE_MAP_POSITIVE_Z,\n      gl.TEXTURE_CUBE_MAP_NEGATIVE_Z\n    ];\n\n    for (let i = 0; i < 6; i += 1) {\n      const image = this._isHdr ? images[i] : this._resizeImage(images[i]);\n      gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, false);\n      if (image instanceof ImageData) {\n        if (gl instanceof WebGL2RenderingContext) {\n          gl.texImage2D(\n            targets[i],\n            0,\n            gl.RGBA16F,\n            image.width,\n            image.height,\n            0,\n            gl.RGBA,\n            gl.FLOAT,\n            image.data\n          );\n        } else {\n          // TODO\n        }\n      } else {\n        gl.texImage2D(targets[i], 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, image);\n      }\n      gl.texParameteri(\n        gl.TEXTURE_CUBE_MAP,\n        gl.TEXTURE_MAG_FILTER,\n        this.magFilter\n      );\n      gl.texParameteri(\n        gl.TEXTURE_CUBE_MAP,\n        gl.TEXTURE_MIN_FILTER,\n        this.minFilter\n      );\n      gl.texParameteri(gl.TEXTURE_CUBE_MAP, gl.TEXTURE_WRAP_S, this.wrapS);\n      gl.texParameteri(gl.TEXTURE_CUBE_MAP, gl.TEXTURE_WRAP_T, this.wrapT);\n    }\n    // gl.generateMipmap(gl.TEXTURE_CUBE_MAP);\n    gl.bindTexture(gl.TEXTURE_CUBE_MAP, null);\n  }\n\n  public _resizeImage(image: HTMLCanvasElement | HTMLImageElement | ImageData) {\n    if (!this.resizeToPow2 || image instanceof ImageData) return image;\n\n    // Return if the image size is already a power of 2\n    if (isPowerOf2(image.width) && isPowerOf2(image.height)) {\n      return image;\n    }\n\n    const size = nearestPowerOf2(Math.max(image.width, image.height));\n\n    const { canvas, ctx } = createCanvas(size, size);\n    ctx.drawImage(image, 0, 0, size, size);\n\n    return canvas;\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/core/TextureCube.ts","import EventDispatcher from '../core/EventDispatcher';\nimport { createCanvas } from '../utils/Canvas';\nimport * as GL from './GL';\n\nlet gl;\n\ninterface VideoTextureOptions {\n  src?: number;\n  magFilter?: number;\n  minFilter?: number;\n  wrapS?: number;\n  wrapT?: number;\n  loop: boolean;\n  autoplay: boolean;\n}\n\nexport default class VideoTexture extends EventDispatcher {\n  public src: string;\n  public magFilter: number;\n  public minFilter: number;\n  public wrapS: number;\n  public wrapT: number;\n  public loop: boolean;\n  public autoplay: boolean;\n  public texture: WebGLTexture;\n  public video: HTMLVideoElement;\n  public _currentTime: number;\n\n  constructor(options: VideoTextureOptions) {\n    super();\n    gl = GL.get();\n\n    this.src = '';\n    this.magFilter = gl.NEAREST;\n    this.minFilter = gl.NEAREST;\n    this.wrapS = gl.CLAMP_TO_EDGE;\n    this.wrapT = gl.CLAMP_TO_EDGE;\n    this.loop = false;\n    this.autoplay = true;\n\n    Object.assign(this, options);\n\n    this.video = document.createElement('video');\n    this.video.src = this.src;\n    this.video.loop = this.loop;\n    this.video.autoplay = this.autoplay;\n    this.video.setAttribute('webkitplaysinline', 'webkitplaysinline');\n    this.video.setAttribute('playsinline', 'playsinline');\n    this.video.addEventListener('canplaythrough', this._onCanPlayThrough, true);\n    this.video.addEventListener('ended', this._onEnded, true);\n    this._currentTime = 0;\n\n    const { canvas } = createCanvas(1, 1);\n    this.texture = gl.createTexture();\n    gl.bindTexture(gl.TEXTURE_2D, this.texture);\n    gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, canvas);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, this.magFilter);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, this.minFilter);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, this.wrapS);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, this.wrapT);\n    gl.bindTexture(gl.TEXTURE_2D, null);\n  }\n\n  public update() {\n    gl = GL.get();\n\n    if (this.video.readyState >= this.video.HAVE_CURRENT_DATA) {\n      if (this.video.currentTime !== this._currentTime) {\n        gl.bindTexture(gl.TEXTURE_2D, this.texture);\n        gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, true);\n        gl.texImage2D(\n          gl.TEXTURE_2D,\n          0,\n          gl.RGBA,\n          gl.RGBA,\n          gl.UNSIGNED_BYTE,\n          this.video\n        );\n        gl.bindTexture(gl.TEXTURE_2D, null);\n      }\n      this._currentTime = this.video.currentTime;\n    }\n  }\n\n  public _onCanPlayThrough = () => {\n    this.emit('canplaythrough');\n  };\n\n  public _onEnded = () => {\n    this.emit('ended');\n  };\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/core/TextureVideo.ts","import Geometry from './Geometry';\n\nexport default class Box extends Geometry {\n  constructor(width = 1, height = 1, depth = 1, colors?: Float32Array) {\n    // this.colors = [];\n\n    // Screenspace\n    /*\n\t\t\t(-1, 1)  (0, 1)  (1, 1)\n\n\t\t\t(-1, 0)  (0, 0)  (1, 0)\n\n\t\t\t(-1,-1)  (0,-1)  (1,-1)\n\t\t\t*/\n\n    const vertices = [\n      // Front face\n      -1.0,\n      -1.0,\n      1.0,\n      1.0,\n      -1.0,\n      1.0,\n      1.0,\n      1.0,\n      1.0,\n      -1.0,\n      1.0,\n      1.0,\n\n      // Back face\n      -1.0,\n      -1.0,\n      -1.0,\n      -1.0,\n      1.0,\n      -1.0,\n      1.0,\n      1.0,\n      -1.0,\n      1.0,\n      -1.0,\n      -1.0,\n\n      // Top face\n      -1.0,\n      1.0,\n      -1.0,\n      -1.0,\n      1.0,\n      1.0,\n      1.0,\n      1.0,\n      1.0,\n      1.0,\n      1.0,\n      -1.0,\n\n      // Bottom face\n      -1.0,\n      -1.0,\n      -1.0,\n      1.0,\n      -1.0,\n      -1.0,\n      1.0,\n      -1.0,\n      1.0,\n      -1.0,\n      -1.0,\n      1.0,\n\n      // Right face\n      1.0,\n      -1.0,\n      -1.0,\n      1.0,\n      1.0,\n      -1.0,\n      1.0,\n      1.0,\n      1.0,\n      1.0,\n      -1.0,\n      1.0,\n\n      // Left face\n      -1.0,\n      -1.0,\n      -1.0,\n      -1.0,\n      -1.0,\n      1.0,\n      -1.0,\n      1.0,\n      1.0,\n      -1.0,\n      1.0,\n      -1.0\n    ];\n\n    for (let i = 0; i < vertices.length; i += 3) {\n      vertices[i] *= width;\n      vertices[i + 1] *= height;\n      vertices[i + 2] *= depth;\n    }\n\n    const indices = [\n      0,\n      1,\n      2,\n      0,\n      2,\n      3, // Front face\n      4,\n      5,\n      6,\n      4,\n      6,\n      7, // Back face\n      8,\n      9,\n      10,\n      8,\n      10,\n      11, // Top face\n      12,\n      13,\n      14,\n      12,\n      14,\n      15, // Bottom face\n      16,\n      17,\n      18,\n      16,\n      18,\n      19, // Right face\n      20,\n      21,\n      22,\n      20,\n      22,\n      23 // Left face\n    ];\n\n    const normals = [\n      // Front\n      0.0,\n      0.0,\n      1.0,\n      0.0,\n      0.0,\n      1.0,\n      0.0,\n      0.0,\n      1.0,\n      0.0,\n      0.0,\n      1.0,\n\n      // Back\n      0.0,\n      0.0,\n      -1.0,\n      0.0,\n      0.0,\n      -1.0,\n      0.0,\n      0.0,\n      -1.0,\n      0.0,\n      0.0,\n      -1.0,\n\n      // Top\n      0.0,\n      1.0,\n      0.0,\n      0.0,\n      1.0,\n      0.0,\n      0.0,\n      1.0,\n      0.0,\n      0.0,\n      1.0,\n      0.0,\n\n      // Bottom\n      0.0,\n      -1.0,\n      0.0,\n      0.0,\n      -1.0,\n      0.0,\n      0.0,\n      -1.0,\n      0.0,\n      0.0,\n      -1.0,\n      0.0,\n\n      // Right\n      1.0,\n      0.0,\n      0.0,\n      1.0,\n      0.0,\n      0.0,\n      1.0,\n      0.0,\n      0.0,\n      1.0,\n      0.0,\n      0.0,\n\n      // Left\n      -1.0,\n      0.0,\n      0.0,\n      -1.0,\n      0.0,\n      0.0,\n      -1.0,\n      0.0,\n      0.0,\n      -1.0,\n      0.0,\n      0.0\n    ];\n\n    const uvs = [\n      // Front face\n      0.0,\n      0.0,\n      1.0,\n      0.0,\n      1.0,\n      1.0,\n      0.0,\n      1.0,\n      // Back face\n      1.0,\n      0.0,\n      1.0,\n      1.0,\n      0.0,\n      1.0,\n      0.0,\n      0.0,\n      // Top face\n      0.0,\n      1.0,\n      0.0,\n      0.0,\n      1.0,\n      0.0,\n      1.0,\n      1.0,\n      // Bottom face\n      1.0,\n      1.0,\n      0.0,\n      1.0,\n      0.0,\n      0.0,\n      1.0,\n      0.0,\n      // Right face\n      1.0,\n      0.0,\n      1.0,\n      1.0,\n      0.0,\n      1.0,\n      0.0,\n      0.0,\n      // Left face\n      0.0,\n      0.0,\n      1.0,\n      0.0,\n      1.0,\n      1.0,\n      0.0,\n      1.0\n    ];\n\n    super(\n      new Float32Array(vertices),\n      new Uint16Array(indices),\n      new Float32Array(normals),\n      new Float32Array(uvs),\n      colors\n    );\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/geometry/BoxGeometry.ts","import { vec3 } from 'gl-matrix';\nimport Vector3 from '../math/Vector3';\nconst cb = vec3.create();\nconst ab = vec3.create();\n\nexport default class Face {\n  public indices: number[];\n  public vertices: Vector3[];\n  public uvs: number[];\n  public normal: Vector3;\n\n  constructor(\n    indiceA: number,\n    indiceB: number,\n    indiceC: number,\n    vertexA: Vector3,\n    vertexB: Vector3,\n    vertexC: Vector3\n  ) {\n    this.indices = [indiceA, indiceB, indiceC];\n    this.vertices = [vertexA, vertexB, vertexC];\n    this.uvs = [indiceA, indiceB, indiceC];\n    this.normal = new Vector3();\n    this.updateFaceNormal();\n  }\n\n  public updateFaceNormal() {\n    // from threejs\n    vec3.set(cb, 0, 0, 0);\n    vec3.set(ab, 0, 0, 0);\n    vec3.subtract(cb, this.vertices[2].v, this.vertices[1].v);\n    vec3.subtract(ab, this.vertices[0].v, this.vertices[1].v);\n    vec3.cross(cb, cb, ab);\n\n    vec3.normalize(cb, cb);\n    this.normal.set(cb[0], cb[1], cb[2]);\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/geometry/Face.ts","import Geometry from './Geometry';\n\nexport default class Plane extends Geometry {\n  constructor(\n    width = 1,\n    height = 1,\n    subdivisionsX = 1,\n    subdivisionsY = 1,\n    axis = 'XY',\n    colors?: Float32Array\n  ) {\n    // https://github.com/yiwenl/Alfrid/blob/master/src/alfrid/Geom.js#L9\n\n    // Note triangles are seperate...\n\n    let vertices = [];\n    const indices = [];\n    let normals = [];\n    let uvs = [];\n    let index = 0;\n\n    const spacerX = width / subdivisionsX;\n    const spacerY = height / subdivisionsY;\n    const offsetX = -width * 0.5;\n    const offsetY = -height * 0.5;\n    const spacerU = 1 / subdivisionsX;\n    const spacerV = 1 / subdivisionsY;\n\n    for (let y = 0; y < subdivisionsY; y += 1) {\n      for (let x = 0; x < subdivisionsX; x += 1) {\n        const triangleX = spacerX * x + offsetX;\n        const triangleY = spacerY * y + offsetY;\n\n        const u = x / subdivisionsX;\n        const v = y / subdivisionsY;\n\n        switch (axis) {\n          case 'XZ': {\n            // Facing towards y\n            vertices = vertices.concat([triangleX, 0, triangleY]);\n            vertices = vertices.concat([triangleX + spacerX, 0, triangleY]);\n            vertices = vertices.concat([\n              triangleX + spacerX,\n              0,\n              triangleY + spacerY\n            ]);\n            vertices = vertices.concat([triangleX, 0, triangleY + spacerY]);\n\n            normals = normals.concat([0, 1, 0]);\n            normals = normals.concat([0, 1, 0]);\n            normals = normals.concat([0, 1, 0]);\n            normals = normals.concat([0, 1, 0]);\n\n            uvs = uvs.concat([u, 1 - v]);\n            uvs = uvs.concat([u + spacerU, 1 - v]);\n            uvs = uvs.concat([u + spacerU, 1 - (v + spacerV)]);\n            uvs = uvs.concat([u, 1 - (v + spacerV)]);\n            break;\n          }\n          case 'YZ': {\n            // Facing towards x\n\n            vertices = vertices.concat([0, triangleY, triangleX]);\n            vertices = vertices.concat([0, triangleY, triangleX + spacerX]);\n            vertices = vertices.concat([\n              0,\n              triangleY + spacerY,\n              triangleX + spacerX\n            ]);\n            vertices = vertices.concat([0, triangleY + spacerY, triangleX]);\n\n            normals = normals.concat([1, 0, 0]);\n            normals = normals.concat([1, 0, 0]);\n            normals = normals.concat([1, 0, 0]);\n            normals = normals.concat([1, 0, 0]);\n\n            uvs = uvs.concat([1 - u, v]);\n            uvs = uvs.concat([1 - (u + spacerU), v]);\n            uvs = uvs.concat([1 - (u + spacerU), v + spacerV]);\n            uvs = uvs.concat([1 - u, v + spacerV]);\n            break;\n          }\n          default: {\n            // Facing towards z\n            vertices = vertices.concat([triangleX, triangleY, 0]);\n            vertices = vertices.concat([triangleX + spacerX, triangleY, 0]);\n            vertices = vertices.concat([\n              triangleX + spacerX,\n              triangleY + spacerY,\n              0\n            ]);\n            vertices = vertices.concat([triangleX, triangleY + spacerY, 0]);\n\n            normals = normals.concat([0, 0, 1]);\n            normals = normals.concat([0, 0, 1]);\n            normals = normals.concat([0, 0, 1]);\n            normals = normals.concat([0, 0, 1]);\n\n            uvs = uvs.concat([u, v]);\n            uvs = uvs.concat([u + spacerU, v]);\n            uvs = uvs.concat([u + spacerU, v + spacerV]);\n            uvs = uvs.concat([u, v + spacerV]);\n          }\n        }\n\n        indices.push(index * 4 + 0);\n        indices.push(index * 4 + 1);\n        indices.push(index * 4 + 2);\n        indices.push(index * 4 + 0);\n        indices.push(index * 4 + 2);\n        indices.push(index * 4 + 3);\n\n        index += 1;\n      }\n    }\n\n    super(\n      new Float32Array(vertices),\n      new Uint16Array(indices),\n      new Float32Array(normals),\n      new Float32Array(uvs),\n      colors\n    );\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/geometry/PlaneGeometry.ts","import { mat4 } from 'gl-matrix';\nimport Camera from '../cameras/Camera';\nimport OrthographicCamera from '../cameras/OrthographicCamera';\nimport PerspectiveCamera from '../cameras/PerspectiveCamera';\nimport { capabilities, extensions } from '../core/Capabilities';\nimport * as GL from '../core/GL';\nimport Material from '../core/Material';\nimport Mesh from '../core/Mesh';\nimport Geometry from '../geometry/Geometry';\nimport EsVersion from '../shaders/chunks/EsVersion.glsl';\nimport ProjectionView from '../shaders/chunks/ProjectionView.glsl';\n\nlet gl: WebGL2RenderingContext | WebGLRenderingContext;\n\nconst vertexShaderEs300 = `${EsVersion}\n\tlayout (location = 0) in vec3 aVertexPosition;\n\tlayout (location = 1) in vec3 aVertexColor;\n\n\t${ProjectionView}\n\n\tuniform mat4 uModelViewMatrix;\n\n\tout vec3 vColor;\n\n\tvoid main(void){\n\t\tvColor = aVertexColor;\n\t\tgl_Position = uProjectionView.projectionMatrix * uModelViewMatrix * vec4(aVertexPosition, 1.0);\n\t}\n`;\n\nconst vertexShaderEs100 = `\n\tattribute vec3 aVertexPosition;\n\tattribute vec3 aVertexColor;\n\n\tuniform mat4 uProjectionMatrix;\n\tuniform mat4 uModelViewMatrix;\n\n\tvarying vec3 vColor;\n\n\tvoid main(void){\n\t\tvColor = aVertexColor;\n\t\tgl_Position = uProjectionMatrix * uModelViewMatrix * vec4(aVertexPosition, 1.0);\n\t}\n`;\n\nfunction fragmentShaderEs300() {\n  return `${EsVersion}\n\tprecision ${capabilities.precision} float;\n\tin vec3 vColor;\n\tout vec4 outgoingColor;\n\n\tvoid main(void){\n\t\toutgoingColor = vec4(vColor, 1.0);\n\t}\n\t`;\n}\n\nfunction fragmentShaderEs100() {\n  return `\n\tprecision ${capabilities.precision} float;\n\tvarying vec3 vColor;\n\n\tvoid main(void){\n\t\tgl_FragColor = vec4(vColor, 1.0);\n\t}\n\t`;\n}\n\nclass AxisGeometry extends Geometry {\n  constructor(size: number) {\n    let vertices = [];\n\n    // X\n    vertices = vertices.concat([0, 0, 0, size, 0, 0]);\n    // Y\n    vertices = vertices.concat([0, 0, 0, 0, size, 0]);\n    // Z\n    vertices = vertices.concat([0, 0, 0, 0, 0, size]);\n\n    // Colors\n    const colors = new Float32Array([\n      1,\n      0,\n      0,\n      1,\n      0,\n      0,\n      0,\n      1,\n      0,\n      0,\n      1,\n      0,\n      0,\n      0,\n      1,\n      0,\n      0,\n      1\n    ]);\n    super(new Float32Array(vertices), undefined, undefined, undefined, colors);\n  }\n}\n\nexport default class AxisHelper extends Mesh {\n  constructor(size = 1) {\n    const vertexShader = GL.webgl2 ? vertexShaderEs300 : vertexShaderEs100;\n    const fragmentShader = GL.webgl2\n      ? fragmentShaderEs300()\n      : fragmentShaderEs100();\n    super(\n      new AxisGeometry(size),\n      new Material({\n        name: 'AxisHelper',\n        vertexShader,\n        fragmentShader\n      })\n    );\n  }\n\n  public draw(camera: Camera | PerspectiveCamera | OrthographicCamera) {\n    if (!this.visible) return;\n    gl = GL.get();\n\n    // Update modelMatrix\n    this.updateMatrix(camera);\n\n    this.material.program.bind();\n    this.material.setUniforms(\n      camera.projectionMatrix,\n      this.modelViewMatrix,\n      this.modelMatrix,\n      camera\n    );\n\n    if (extensions.vertexArrayObject) {\n      this.vao.bind();\n    } else {\n      this.bindAttributes();\n      this.bindAttributesInstanced();\n      this.bindIndexBuffer();\n    }\n\n    gl.drawArrays(\n      gl.LINES,\n      0,\n      this.geometry.attributes.aVertexPosition.numItems\n    );\n\n    if (extensions.vertexArrayObject) {\n      this.vao.unbind();\n    }\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/helpers/AxisHelper.ts","import { mat4 } from 'gl-matrix';\nimport Camera from '../cameras/Camera';\nimport OrthographicCamera from '../cameras/OrthographicCamera';\nimport PerspectiveCamera from '../cameras/PerspectiveCamera';\nimport { capabilities, extensions } from '../core/Capabilities';\nimport { DRAW_LINE_STRIP } from '../core/Constants';\nimport * as GL from '../core/GL';\nimport Material from '../core/Material';\nimport Mesh from '../core/Mesh';\nimport Geometry from '../geometry/Geometry';\nimport EsVersion from '../shaders/chunks/EsVersion.glsl';\nimport ProjectionView from '../shaders/chunks/ProjectionView.glsl';\n\nlet gl: WebGL2RenderingContext | WebGLRenderingContext;\n\nconst vertexShaderEs300 = `${EsVersion}\n\t${ProjectionView}\n\n\tin vec3 aVertexPosition;\n\n\tuniform mat4 uModelViewMatrix;\n\tuniform mat3 uNormalMatrix;\n\n\tvoid main(void){\n\t\tgl_Position = uProjectionView.projectionMatrix * uModelViewMatrix * vec4(aVertexPosition, 1.0);\n\t}\n`;\n\nconst vertexShaderEs100 = `\n\tattribute vec3 aVertexPosition;\n\n\tuniform mat4 uProjectionMatrix;\n\tuniform mat4 uModelViewMatrix;\n\tuniform mat3 uNormalMatrix;\n\n\tvoid main(void){\n\t\tgl_Position = uProjectionMatrix * uModelViewMatrix * vec4(aVertexPosition, 1.0);\n\t}\n`;\n\nfunction fragmentShaderEs300() {\n  return `${EsVersion}\n\tprecision ${capabilities.precision} float;\n\tout vec4 outgoingColor;\n\n\tvoid main(void){\n\t\toutgoingColor = vec4(1.0, 1.0, 0.0, 1.0);\n\t}\n\t`;\n}\n\nfunction fragmentShaderEs100() {\n  return `\n\tprecision ${capabilities.precision} float;\n\n\tvoid main(void){\n\t\tgl_FragColor = vec4(1.0, 1.0, 0.0, 1.0);\n\t}\n\t`;\n}\n\nclass CameraGeometry extends Geometry {\n  constructor(mesh: Mesh, size = 0.5) {\n    let vertices = [];\n\n    const addVertex = (x, y, z) => {\n      vertices = vertices.concat([x, y, z]);\n    };\n\n    function box(z, scale = 1) {\n      // bottom left\n      addVertex(-1 * scale, -1 * scale, z);\n\n      // top left\n      addVertex(-1 * scale, 1 * scale, z);\n      addVertex(-1 * scale, 1 * scale, z);\n\n      // top right\n      addVertex(1 * scale, 1 * scale, z);\n      addVertex(1 * scale, 1 * scale, z);\n\n      // bottom right\n      addVertex(1 * scale, -1 * scale, z);\n      addVertex(1 * scale, -1 * scale, z);\n\n      // bottom left\n      addVertex(-1 * scale, -1 * scale, z);\n    }\n\n    const zPosition = 3.5;\n    const scaleNear = 0.5;\n    const scaleFar = 3;\n\n    // Boxes\n    box(0, scaleNear);\n    box(zPosition, scaleFar);\n\n    // Lines\n\n    // Bottom left\n    addVertex(-1 * scaleNear, -1 * scaleNear, 0);\n    addVertex(-1 * scaleFar, -1 * scaleFar, zPosition);\n\n    // Top left\n    addVertex(-1 * scaleNear, 1 * scaleNear, 0);\n    addVertex(-1 * scaleFar, 1 * scaleFar, zPosition);\n\n    // Top right\n    addVertex(1 * scaleNear, 1 * scaleNear, 0);\n    addVertex(1 * scaleFar, 1 * scaleFar, zPosition);\n\n    // Bottom right\n    addVertex(1 * scaleNear, -1 * scaleNear, 0);\n    addVertex(1 * scaleFar, -1 * scaleFar, zPosition);\n\n    super(new Float32Array(vertices));\n  }\n}\n\nexport default class CameraHelper extends Mesh {\n  public camera: PerspectiveCamera;\n  constructor(camera) {\n    const vertexShader = GL.webgl2 ? vertexShaderEs300 : vertexShaderEs100;\n    const fragmentShader = GL.webgl2\n      ? fragmentShaderEs300()\n      : fragmentShaderEs100();\n    super(\n      new CameraGeometry(camera),\n      new Material({\n        name: 'CameraHelper',\n        vertexShader,\n        fragmentShader,\n        drawType: DRAW_LINE_STRIP\n      })\n    );\n    this.camera = camera;\n  }\n\n  public update() {\n    this.position.copy(this.camera.position);\n    this.lookAt(this.camera.target);\n  }\n\n  public draw(camera: Camera | PerspectiveCamera | OrthographicCamera) {\n    if (!this.visible) return;\n    gl = GL.get();\n\n    // Update modelMatrix\n    this.updateMatrix(camera);\n\n    this.material.program.bind();\n    this.material.setUniforms(\n      camera.projectionMatrix,\n      this.modelViewMatrix,\n      this.modelMatrix,\n      camera\n    );\n\n    if (extensions.vertexArrayObject) {\n      this.vao.bind();\n    } else {\n      this.bindAttributes();\n      this.bindAttributesInstanced();\n      this.bindIndexBuffer();\n    }\n\n    gl.drawArrays(\n      gl.LINES,\n      0,\n      this.geometry.attributes.aVertexPosition.numItems\n    );\n\n    if (extensions.vertexArrayObject) {\n      this.vao.unbind();\n    }\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/helpers/CameraHelper.ts","import { mat4 } from 'gl-matrix';\nimport Camera from '../cameras/Camera';\nimport OrthographicCamera from '../cameras/OrthographicCamera';\nimport PerspectiveCamera from '../cameras/PerspectiveCamera';\nimport { capabilities, extensions } from '../core/Capabilities';\nimport * as GL from '../core/GL';\nimport Material from '../core/Material';\nimport Mesh from '../core/Mesh';\nimport Geometry from '../geometry/Geometry';\nimport { lerp } from '../math/Utils';\nimport EsVersion from '../shaders/chunks/EsVersion.glsl';\nimport ProjectionView from '../shaders/chunks/ProjectionView.glsl';\n\nlet gl: WebGL2RenderingContext | WebGLRenderingContext;\n\nconst vertexShaderEs300 = `${EsVersion}\n\t${ProjectionView}\n\n\tin vec3 aVertexPosition;\n\n\tuniform mat4 uModelViewMatrix;\n\n\tvoid main(void){\n\t\tgl_Position = uProjectionView.projectionMatrix * uModelViewMatrix * vec4(aVertexPosition, 1.0);\n\t}\n`;\n\nconst vertexShaderEs100 = `\n\tattribute vec3 aVertexPosition;\n\n\tuniform mat4 uProjectionMatrix;\n\tuniform mat4 uModelViewMatrix;\n\n\tvoid main(void){\n\t\tgl_Position = uProjectionMatrix * uModelViewMatrix * vec4(aVertexPosition, 1.0);\n\t}\n`;\n\nfunction fragmentShaderEs300() {\n  return `${EsVersion}\n\tprecision ${capabilities.precision} float;\n\tout vec4 outgoingColor;\n\n\tvoid main(void){\n\t\toutgoingColor = vec4(vec3(0.5), 1.0);\n\t}\n\t`;\n}\n\nfunction fragmentShaderEs100() {\n  return `\n\tprecision ${capabilities.precision} float;\n\n\tvoid main(void){\n\t\tgl_FragColor = vec4(vec3(0.5), 1.0);\n\t}\n\t`;\n}\n\nclass GridGeometry extends Geometry {\n  constructor(size: number, divisions: number) {\n    let vertices = [];\n    const halfSize = size * 0.5;\n\n    for (let i = 0; i < divisions + 1; i += 1) {\n      const x1 = lerp(-halfSize, halfSize, i / divisions);\n      const y1 = 0;\n      const z1 = -halfSize;\n      const x2 = lerp(-halfSize, halfSize, i / divisions);\n      const y2 = 0;\n      const z2 = halfSize;\n      vertices = vertices.concat([x1, y1, z1, x2, y2, z2]);\n    }\n\n    for (let i = 0; i < divisions + 1; i += 1) {\n      const x1 = -halfSize;\n      const y1 = 0;\n      const z1 = lerp(-halfSize, halfSize, i / divisions);\n      const x2 = halfSize;\n      const y2 = 0;\n      const z2 = lerp(-halfSize, halfSize, i / divisions);\n      vertices = vertices.concat([x1, y1, z1, x2, y2, z2]);\n    }\n\n    super(new Float32Array(vertices));\n  }\n}\n\nexport default class GridHelper extends Mesh {\n  constructor(size = 1, divisions = 10) {\n    const vertexShader = GL.webgl2 ? vertexShaderEs300 : vertexShaderEs100;\n    const fragmentShader = GL.webgl2\n      ? fragmentShaderEs300()\n      : fragmentShaderEs100();\n    super(\n      new GridGeometry(size, divisions),\n      new Material({\n        name: 'GridHelper',\n        vertexShader,\n        fragmentShader\n      })\n    );\n  }\n\n  public draw(camera: Camera | PerspectiveCamera | OrthographicCamera) {\n    if (!this.visible) return;\n    gl = GL.get();\n\n    // Update modelMatrix\n    this.updateMatrix(camera);\n\n    this.material.program.bind();\n    this.material.setUniforms(\n      camera.projectionMatrix,\n      this.modelViewMatrix,\n      this.modelMatrix,\n      camera\n    );\n\n    if (extensions.vertexArrayObject) {\n      this.vao.bind();\n    } else {\n      this.bindAttributes();\n      this.bindAttributesInstanced();\n      this.bindIndexBuffer();\n    }\n\n    gl.drawArrays(\n      gl.LINES,\n      0,\n      this.geometry.attributes.aVertexPosition.numItems\n    );\n\n    if (extensions.vertexArrayObject) {\n      this.vao.unbind();\n    }\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/helpers/GridHelper.ts","import { mat4 } from 'gl-matrix';\nimport Camera from '../cameras/Camera';\nimport OrthographicCamera from '../cameras/OrthographicCamera';\nimport PerspectiveCamera from '../cameras/PerspectiveCamera';\nimport { capabilities, extensions } from '../core/Capabilities';\nimport * as GL from '../core/GL';\nimport Material from '../core/Material';\nimport Mesh from '../core/Mesh';\nimport Geometry from '../geometry/Geometry';\nimport EsVersion from '../shaders/chunks/EsVersion.glsl';\nimport ProjectionView from '../shaders/chunks/ProjectionView.glsl';\n\nlet gl: WebGL2RenderingContext | WebGLRenderingContext;\n\nconst vertexShaderEs300 = `${EsVersion}\n\t${ProjectionView}\n\n\tin vec3 aVertexPosition;\n\n\tuniform mat4 uModelViewMatrix;\n\tuniform mat3 uNormalMatrix;\n\n\tvoid main(void){\n\t\tgl_Position = uProjectionView.projectionMatrix * uModelViewMatrix * vec4(aVertexPosition, 1.0);\n\t}\n`;\n\nconst vertexShaderEs100 = `\n\tattribute vec3 aVertexPosition;\n\n\tuniform mat4 uProjectionMatrix;\n\tuniform mat4 uModelViewMatrix;\n\tuniform mat3 uNormalMatrix;\n\n\tvoid main(void){\n\t\tgl_Position = uProjectionMatrix * uModelViewMatrix * vec4(aVertexPosition, 1.0);\n\t}\n`;\n\nfunction fragmentShaderEs300() {\n  return `${EsVersion}\n\tprecision ${capabilities.precision} float;\n\tout vec4 outgoingColor;\n\n\tvoid main(void){\n\t\toutgoingColor = vec4(1.0);\n\t}\n\t`;\n}\n\nfunction fragmentShaderEs100() {\n  return `\n\tprecision ${capabilities.precision} float;\n\n\tvoid main(void){\n\t\tgl_FragColor = vec4(1.0);\n\t}\n\t`;\n}\n\nclass NormalsGeometry extends Geometry {\n  constructor(mesh: Mesh, size = 0.5) {\n    let vertices = [];\n\n    const sx = mesh.scale.x;\n    const sy = mesh.scale.y;\n    const sz = mesh.scale.z;\n    const length = mesh.geometry.bufferNormals.length / 3;\n    for (let i = 0; i < length; i += 1) {\n      const i3 = i * 3;\n      const v0x = sx * mesh.geometry.bufferVertices[i3];\n      const v0y = sy * mesh.geometry.bufferVertices[i3 + 1];\n      const v0z = sz * mesh.geometry.bufferVertices[i3 + 2];\n      const nx = mesh.geometry.bufferNormals[i3];\n      const ny = mesh.geometry.bufferNormals[i3 + 1];\n      const nz = mesh.geometry.bufferNormals[i3 + 2];\n      const v1x = v0x + size * nx;\n      const v1y = v0y + size * ny;\n      const v1z = v0z + size * nz;\n      vertices = vertices.concat([v0x, v0y, v0z, v1x, v1y, v1z]);\n    }\n\n    super(new Float32Array(vertices));\n  }\n}\n\nexport default class NormalsHelper extends Mesh {\n  constructor(mesh, size = 1) {\n    const vertexShader = GL.webgl2 ? vertexShaderEs300 : vertexShaderEs100;\n    const fragmentShader = GL.webgl2\n      ? fragmentShaderEs300()\n      : fragmentShaderEs100();\n    super(\n      new NormalsGeometry(mesh, size),\n      new Material({\n        name: 'NormalsHelper',\n        vertexShader,\n        fragmentShader\n      })\n    );\n  }\n\n  public draw(camera: Camera | PerspectiveCamera | OrthographicCamera) {\n    if (!this.visible) return;\n    gl = GL.get();\n\n    // Update modelMatrix\n    this.updateMatrix(camera);\n\n    this.material.program.bind();\n    this.material.setUniforms(\n      camera.projectionMatrix,\n      this.modelViewMatrix,\n      this.modelMatrix,\n      camera\n    );\n\n    if (extensions.vertexArrayObject) {\n      this.vao.bind();\n    } else {\n      this.bindAttributes();\n      this.bindAttributesInstanced();\n      this.bindIndexBuffer();\n    }\n\n    gl.drawArrays(\n      gl.LINES,\n      0,\n      this.geometry.attributes.aVertexPosition.numItems\n    );\n\n    if (extensions.vertexArrayObject) {\n      this.vao.unbind();\n    }\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/helpers/NormalsHelper.ts","import { mat4 } from 'gl-matrix';\nimport Camera from '../cameras/Camera';\nimport OrthographicCamera from '../cameras/OrthographicCamera';\nimport PerspectiveCamera from '../cameras/PerspectiveCamera';\nimport { capabilities, extensions } from '../core/Capabilities';\nimport * as GL from '../core/GL';\nimport Material from '../core/Material';\nimport Mesh from '../core/Mesh';\nimport Geometry from '../geometry/Geometry';\nimport Color from '../math/Color';\nimport { from3DTo2D } from '../math/Utils';\nimport EsVersion from '../shaders/chunks/EsVersion.glsl';\nimport ProjectionView from '../shaders/chunks/ProjectionView.glsl';\n\nlet gl: WebGL2RenderingContext | WebGLRenderingContext;\n\nconst vertexShaderEs300 = `${EsVersion}\n\t${ProjectionView}\n\n\tin vec3 aVertexPosition;\n\n\tuniform mat4 uModelViewMatrix;\n\tuniform float uSize;\n\n\tvoid main(void){\n\t\tvec4 mvPosition = uProjectionView.projectionMatrix * uModelViewMatrix * vec4(aVertexPosition, 1.0);\n\t\tgl_PointSize = uSize * (100.0 / length(mvPosition.xyz));\n\t\tgl_Position = mvPosition;\n\t}\n`;\n\nconst vertexShaderEs100 = `\n\tattribute vec3 aVertexPosition;\n\n\tuniform mat4 uProjectionMatrix;\n\tuniform mat4 uModelViewMatrix;\n\tuniform float uSize;\n\n\tvoid main(void){\n\t\tvec4 mvPosition = uProjectionMatrix * uModelViewMatrix * vec4(aVertexPosition, 1.0);\n\t\tgl_PointSize = uSize * (100.0 / length(mvPosition.xyz));\n\t\tgl_Position = mvPosition;\n\t}\n`;\n\nfunction fragmentShaderEs300() {\n  return `${EsVersion}\n\tprecision ${capabilities.precision} float;\n\tuniform vec3 uColor;\n\tout vec4 outgoingColor;\n\n\tvoid main(void){\n\t\tif(length(gl_PointCoord - 0.5) > 0.5) {\n\t\t\tdiscard;\n\t\t}\n\t\toutgoingColor = vec4(uColor, 1.0);\n\t}\n\t`;\n}\n\nfunction fragmentShaderEs100() {\n  return `\n\tprecision ${capabilities.precision} float;\n\tuniform vec3 uColor;\n\n\tvoid main(void){\n\t\tif(length(gl_PointCoord - 0.5) > 0.5) {\n\t\t\tdiscard;\n\t\t}\n\t\tgl_FragColor = vec4(uColor, 1.0);\n\t}\n\t`;\n}\n\nclass VerticesGeometry extends Geometry {\n  constructor(mesh: Mesh, size = 0.5) {\n    const vertices = [];\n\n    const length = mesh.geometry.bufferVertices.length;\n    for (let i = 0; i < length; i += 1) {\n      vertices[i] = mesh.geometry.bufferVertices[i];\n    }\n\n    super(new Float32Array(vertices));\n  }\n}\n\nconst projectionViewMatrix = mat4.create();\nconst modelWorldMatrix = mat4.create();\n\nexport default class VerticesHelper extends Mesh {\n  public _labels: any[];\n  public _parentMesh: Mesh;\n\n  constructor(\n    mesh: Mesh,\n    size = 1,\n    colorPoint = 0x00ff00,\n    colorLabel = '#ffffff'\n  ) {\n    const vertexShader = GL.webgl2 ? vertexShaderEs300 : vertexShaderEs100;\n    const fragmentShader = GL.webgl2\n      ? fragmentShaderEs300()\n      : fragmentShaderEs100();\n    super(\n      new VerticesGeometry(mesh, size),\n      new Material({\n        name: 'VerticesHelper',\n        vertexShader,\n        fragmentShader,\n        uniforms: {\n          uSize: {\n            type: 'f',\n            value: size\n          },\n          uColor: {\n            type: '3f',\n            value: new Color(colorPoint).v\n          }\n        }\n      })\n    );\n    this._labels = [];\n    this._parentMesh = mesh;\n    let element;\n\n    const addLabel = indice => {\n      element = document.createElement('div');\n      element.style.position = 'absolute';\n      element.style.pointerEvents = 'none';\n      element.style.color = colorLabel;\n      element.style.fontSize = '16px';\n      this._labels.push({\n        indice,\n        element\n      });\n      document.body.appendChild(element);\n    };\n\n    this._parentMesh.geometry.faces.forEach((face, i) => {\n      addLabel(face.indices[0]);\n      addLabel(face.indices[1]);\n      addLabel(face.indices[2]);\n    });\n  }\n\n  public draw(camera: Camera | PerspectiveCamera | OrthographicCamera) {\n    if (!this.visible) return;\n    gl = GL.get();\n\n    // Update modelMatrix\n    this.updateMatrix(camera);\n\n    // Update\n    mat4.identity(projectionViewMatrix);\n    mat4.identity(modelWorldMatrix);\n\n    mat4.mul(\n      projectionViewMatrix,\n      camera.projectionMatrix,\n      this.modelViewMatrix\n    );\n\n    let screenPosition;\n    let vertex;\n    this._labels.forEach((label, i) => {\n      vertex = this._parentMesh.geometry.vertices[label.indice];\n      screenPosition = from3DTo2D(vertex, projectionViewMatrix);\n      label.element.style.left = `${screenPosition.x * window.innerWidth}px`;\n      label.element.style.top = `${screenPosition.y * window.innerHeight}px`;\n      label.element.innerHTML = `${label.indice}`;\n    });\n\n    this.material.program.bind();\n    this.material.setUniforms(\n      camera.projectionMatrix,\n      this.modelViewMatrix,\n      this.modelMatrix,\n      camera\n    );\n\n    if (extensions.vertexArrayObject) {\n      this.vao.bind();\n    } else {\n      this.bindAttributes();\n      this.bindAttributesInstanced();\n      this.bindIndexBuffer();\n    }\n\n    gl.drawArrays(\n      gl.POINTS,\n      0,\n      this.geometry.attributes.aVertexPosition.numItems\n    );\n\n    if (extensions.vertexArrayObject) {\n      this.vao.unbind();\n    }\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/helpers/VerticesHelper.ts","import {\n  LIGHT_AMBIENT,\n  LIGHT_DIRECTIONAL,\n  LIGHT_POINT,\n  UNIFORM_AMBIENT_LIGHT_LOCATION,\n  UNIFORM_DIRECTIONAL_LIGHTS_LOCATION,\n  UNIFORM_POINT_LIGHTS_LOCATION\n} from '../core/Constants';\nimport * as GL from '../core/GL';\nimport UniformBuffer from '../core/UniformBuffer';\nimport AmbientLight from '../lights/AmbientLight';\nimport DirectionalLight from '../lights/DirectionalLight';\nimport PointLight from '../lights/PointLight';\n\nlet gl;\n\n/**\n\t* Genetic class for PointLights and DirectionalLights\n\t* Creates a uniform buffer which stores all the data for the specific\n\t* light type\n\t*/\nexport default class Lights {\n  public lights: Array<DirectionalLight | PointLight | AmbientLight>;\n  public uniformBuffer: UniformBuffer;\n  public _lightsData: Float32Array;\n\n  constructor(lights: Array<AmbientLight | DirectionalLight | PointLight>) {\n    this.lights = lights;\n\n    gl = GL.get();\n\n    if (GL.webgl2) {\n      const dataLength = this.lights[0].data.length;\n\n      // Setup data\n      const values = Array(lights.length * dataLength);\n      const data = new Float32Array(values);\n\n      // Create uniform buffer to store all point lights data\n      // The uniform block is an array of lights\n      this.uniformBuffer = new UniformBuffer(data);\n\n      // Tmp array for updating the lights data buffer\n      this._lightsData = new Float32Array(\n        lights[0].data.length * lights.length\n      );\n    }\n  }\n\n  get length() {\n    return this.lights.length;\n  }\n\n  public get() {\n    return this.lights;\n  }\n\n  public update() {\n    if (GL.webgl2) {\n      // Get data from lights and update the uniform buffer\n      this.lights.forEach((light, i) => {\n        light.update();\n        this._lightsData.set(light.data, i * light.data.length);\n      });\n      this.uniformBuffer.setValues(this._lightsData, 0);\n    } else {\n      this.lights.forEach(light => {\n        light.update();\n      });\n    }\n  }\n\n  public bind() {\n    if (GL.webgl2) {\n      gl = GL.get();\n\n      gl.bindBuffer(gl.UNIFORM_BUFFER, this.uniformBuffer.buffer);\n      gl.bufferSubData(gl.UNIFORM_BUFFER, 0, this.uniformBuffer.data);\n      gl.bindBuffer(gl.UNIFORM_BUFFER, null);\n    }\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/lights/Lights.ts","import { LIGHT_AMBIENT } from '../core/Constants';\nimport * as GL from '../core/GL';\nimport Color from '../math/Color';\nimport Vector3 from '../math/Vector3';\nimport Light from './Light';\n\nexport default class AmbientLight extends Light {\n  public uniforms: any;\n  public position: Vector3;\n\n  constructor(uniforms = {}) {\n    super();\n    this.type = LIGHT_AMBIENT;\n    this.uniforms = {\n      color: {\n        type: '3f',\n        value: new Color(0x404040).v\n      },\n      intensity: {\n        type: 'f',\n        value: 0.1\n      }\n    };\n    Object.assign(this.uniforms, uniforms);\n\n    if (GL.webgl2) {\n      // Buffer data\n      this.data = new Float32Array([\n        ...this.uniforms.color.value,\n        0.0,\n        this.uniforms.intensity.value,\n        0.0,\n        0.0,\n        0.0\n      ]);\n    }\n  }\n\n  public update() {\n    if (GL.webgl2) {\n      // Set values for buffer data\n      this.setValues(this.uniforms.color.value, 0);\n      this.setValues([this.uniforms.intensity.value], 4);\n    }\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/lights/AmbientLight.ts","import { LIGHT_DIRECTIONAL } from '../core/Constants';\nimport * as GL from '../core/GL';\nimport Color from '../math/Color';\nimport Vector3 from '../math/Vector3';\nimport Light from './Light';\n\nexport default class DirectionalLight extends Light {\n  public uniforms: any;\n  public position: Vector3;\n\n  constructor(uniforms = {}) {\n    super();\n    this.type = LIGHT_DIRECTIONAL;\n    this.uniforms = {\n      position: {\n        type: '3f',\n        value: new Vector3(0, 0, 0).v\n      },\n      color: {\n        type: '3f',\n        value: new Color(0xffffff).v\n      },\n      intensity: {\n        type: 'f',\n        value: 1\n      }\n    };\n    Object.assign(this.uniforms, uniforms);\n\n    this.position = new Vector3();\n\n    if (GL.webgl2) {\n      // Buffer data\n      this.data = new Float32Array([\n        ...this.uniforms.position.value,\n        0.0,\n        ...this.uniforms.color.value,\n        0.0,\n        this.uniforms.intensity.value,\n        0.0,\n        0.0,\n        0.0\n      ]);\n    }\n  }\n\n  public update() {\n    if (GL.webgl2) {\n      // Set values for buffer data\n      this.setValues(this.position.v);\n      this.setValues(this.uniforms.color.value, 4);\n      this.setValues([this.uniforms.intensity.value], 8);\n    } else {\n      this.uniforms.position.value.set(this.position.v);\n    }\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/lights/DirectionalLight.ts","import { LIGHT_POINT } from '../core/Constants';\nimport * as GL from '../core/GL';\nimport Color from '../math/Color';\nimport Vector3 from '../math/Vector3';\nimport Light from './Light';\n\nexport default class PointLight extends Light {\n  public uniforms: any;\n  public position: Vector3;\n\n  constructor(uniforms = {}) {\n    super();\n    this.type = LIGHT_POINT;\n    this.uniforms = {\n      position: {\n        type: '3f',\n        value: new Vector3(0, 0, 0).v\n      },\n      color: {\n        type: '3f',\n        value: new Color(0xffffff).v\n      },\n      specularColor: {\n        type: '3f',\n        value: new Color(0xffffff).v\n      },\n      shininess: {\n        type: 'f',\n        value: 100\n      },\n      intensity: {\n        type: 'f',\n        value: 1\n      }\n    };\n    Object.assign(this.uniforms, uniforms);\n\n    this.position = new Vector3();\n\n    if (GL.webgl2) {\n      // Buffer data\n      this.data = new Float32Array([\n        ...this.uniforms.position.value,\n        0.0,\n        ...this.uniforms.color.value,\n        0.0,\n        ...this.uniforms.specularColor.value,\n        0.0,\n        this.uniforms.shininess.value,\n        0.0,\n        0.0,\n        0.0,\n        this.uniforms.intensity.value,\n        0.0,\n        0.0,\n        0.0\n      ]);\n    }\n  }\n\n  public update() {\n    if (GL.webgl2) {\n      // Set values for buffer data\n      this.setValues(this.position.v);\n      this.setValues(this.uniforms.color.value, 4);\n      this.setValues(this.uniforms.specularColor.value, 8);\n      this.setValues([this.uniforms.shininess.value], 12);\n      this.setValues([this.uniforms.intensity.value], 16);\n    } else {\n      this.uniforms.position.value.set(this.position.v);\n    }\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/lights/PointLight.ts","import * as AmbientLight from './AmbientLight.glsl';\nimport Conditionals from './Conditionals.glsl';\nimport * as DirectionalLights from './DirectionalLights.glsl';\nimport EnvMapCube from './EnvMapCube.glsl';\nimport EsVersion from './EsVersion.glsl';\nimport Fog from './Fog.glsl';\nimport Gamma from './Gamma.glsl';\nimport * as Lambert from './Lambert.glsl';\nimport Matcap from './Matcap.glsl';\nimport Math from './Math.glsl';\nimport * as Noise from './Noise.glsl';\nimport Packing from './Packing.glsl';\nimport * as PointLights from './PointLights.glsl';\nimport ProjectionView from './ProjectionView.glsl';\nimport * as Tonemap from './Tonemap.glsl';\nimport Transpose from './Transpose.glsl';\n\nexport default {\n  AmbientLight,\n  Conditionals,\n  DirectionalLights,\n  EnvMapCube,\n  EsVersion,\n  Fog,\n  Gamma,\n  Lambert,\n  Matcap,\n  Math,\n  Noise,\n  Packing,\n  PointLights,\n  ProjectionView,\n  Tonemap,\n  Transpose\n};\n\n\n\n// WEBPACK FOOTER //\n// ./src/shaders/chunks/index.ts","export const whenEquals = `\nfloat whenEquals(float x, float y) {\n  return 1.0 - abs(sign(x - y));\n};\n`;\n\nexport const whenEqualsInt = `\nint whenEqualsInt(int x, int y) {\n  return 1 - abs(sign(x - y));\n}\n`;\n\nexport const whenLessThan = `\nfloat whenLessThan(float x, float y) {\n  return max(sign(y - x), 0.0);\n}\n`;\n\nexport const whenGreaterThan = `\nfloat whenGreaterThan(float x, float y) {\n  return max(sign(x - y), 0.0);\n}\n`;\n\nexport default {\n  whenEquals,\n  whenEqualsInt,\n  whenLessThan,\n  whenGreaterThan\n};\n\n\n\n// WEBPACK FOOTER //\n// ./src/shaders/chunks/Conditionals.glsl.ts","/**\n * https://github.com/vorg/pragmatic-pbr/blob/master/local_modules/glsl-envmap-cube/index.glsl\n */\n\nexport default `\n/**\n * Samples cubemap environment map\n * @param  {vec3} wcNormal - normal in the world coordinate space\n * @param  {float} - flipEnvMap    -1.0 for left handed coorinate system oriented texture (usual case)\n *                                  1.0 for right handed coorinate system oriented texture\n * @return {vec4} - cubemap texture coordinate\n */\nvec3 envMapCube(vec3 wcNormal, float flipEnvMap) {\n\treturn vec3(flipEnvMap * wcNormal.x, wcNormal.y, wcNormal.z);\n}\n\nvec3 envMapCube(vec3 wcNormal) {\n //-1.0 for left handed coorinate system oriented texture (usual case)\n return envMapCube(wcNormal, -1.0);\n}\n`;\n\n\n\n// WEBPACK FOOTER //\n// ./src/shaders/chunks/EnvMapCube.glsl.ts","// https://github.com/hughsk/glsl-fog\n\nexport const linear = `\nfloat fogLinear(const float dist, const float start, const float end) {\n  return 1.0 - clamp((end - dist) / (end - start), 0.0, 1.0);\n}\n`;\n\nexport const exp = `\nfloat fogExp(\n  const float dist,\n  const float density\n) {\n  return 1.0 - clamp(exp(-density * dist), 0.0, 1.0);\n}\n`;\n\nexport const exp2 = `\nfloat fogExp2(\n  const float dist,\n  const float density\n) {\n  const float LOG2 = -1.442695;\n  float d = density * dist;\n  return 1.0 - clamp(exp2(d * d * LOG2), 0.0, 1.0);\n}\n`;\n\nexport default {\n  linear,\n  exp,\n  exp2\n};\n\n\n\n// WEBPACK FOOTER //\n// ./src/shaders/chunks/Fog.glsl.ts","// https://raw.githubusercontent.com/stackgl/glsl-gamma/master/out.glsl\n\nexport default `\n\tconst float gamma = 2.2;\n\n\tfloat toGamma(float v) {\n\t  return pow(v, 1.0 / gamma);\n\t}\n\n\tvec2 toGamma(vec2 v) {\n\t  return pow(v, vec2(1.0 / gamma));\n\t}\n\n\tvec3 toGamma(vec3 v) {\n\t  return pow(v, vec3(1.0 / gamma));\n\t}\n\n\tvec4 toGamma(vec4 v) {\n\t  return vec4(toGamma(v.rgb), v.a);\n\t}\n`;\n\n\n\n// WEBPACK FOOTER //\n// ./src/shaders/chunks/Gamma.glsl.ts","// https://github.com/hughsk/matcap/blob/master/matcap.glsl\n\nexport default `\nvec2 matcap(vec3 eye, vec3 normal) {\n  vec3 reflected = reflect(eye, normal);\n  float m = 2.8284271247461903 * sqrt( reflected.z+1.0 );\n  return reflected.xy / m + 0.5;\n}\n`;\n\n\n\n// WEBPACK FOOTER //\n// ./src/shaders/chunks/Matcap.glsl.ts","// https://github.com/hughsk/glsl-noise\n\nexport const classicNoise2D = `\n//\n// GLSL textureless classic 2D noise \"cnoise\",\n// with an RSL-style periodic variant \"pnoise\".\n// Author:  Stefan Gustavson (stefan.gustavson@liu.se)\n// Version: 2011-08-22\n//\n// Many thanks to Ian McEwan of Ashima Arts for the\n// ideas for permutation and gradient selection.\n//\n// Copyright (c) 2011 Stefan Gustavson. All rights reserved.\n// Distributed under the MIT license. See LICENSE file.\n// https://github.com/ashima/webgl-noise\n//\n\nvec4 mod289(vec4 x)\n{\n  return x - floor(x * (1.0 / 289.0)) * 289.0;\n}\n\nvec4 permute(vec4 x)\n{\n  return mod289(((x*34.0)+1.0)*x);\n}\n\nvec4 taylorInvSqrt(vec4 r)\n{\n  return 1.79284291400159 - 0.85373472095314 * r;\n}\n\nvec2 fade(vec2 t) {\n  return t*t*t*(t*(t*6.0-15.0)+10.0);\n}\n\n// Classic Perlin noise\nfloat classicNoise2D(vec2 P)\n{\n  vec4 Pi = floor(P.xyxy) + vec4(0.0, 0.0, 1.0, 1.0);\n  vec4 Pf = fract(P.xyxy) - vec4(0.0, 0.0, 1.0, 1.0);\n  Pi = mod289(Pi); // To avoid truncation effects in permutation\n  vec4 ix = Pi.xzxz;\n  vec4 iy = Pi.yyww;\n  vec4 fx = Pf.xzxz;\n  vec4 fy = Pf.yyww;\n\n  vec4 i = permute(permute(ix) + iy);\n\n  vec4 gx = fract(i * (1.0 / 41.0)) * 2.0 - 1.0 ;\n  vec4 gy = abs(gx) - 0.5 ;\n  vec4 tx = floor(gx + 0.5);\n  gx = gx - tx;\n\n  vec2 g00 = vec2(gx.x,gy.x);\n  vec2 g10 = vec2(gx.y,gy.y);\n  vec2 g01 = vec2(gx.z,gy.z);\n  vec2 g11 = vec2(gx.w,gy.w);\n\n  vec4 norm = taylorInvSqrt(vec4(dot(g00, g00), dot(g01, g01), dot(g10, g10), dot(g11, g11)));\n  g00 *= norm.x;\n  g01 *= norm.y;\n  g10 *= norm.z;\n  g11 *= norm.w;\n\n  float n00 = dot(g00, vec2(fx.x, fy.x));\n  float n10 = dot(g10, vec2(fx.y, fy.y));\n  float n01 = dot(g01, vec2(fx.z, fy.z));\n  float n11 = dot(g11, vec2(fx.w, fy.w));\n\n  vec2 fade_xy = fade(Pf.xy);\n  vec2 n_x = mix(vec2(n00, n01), vec2(n10, n11), fade_xy.x);\n  float n_xy = mix(n_x.x, n_x.y, fade_xy.y);\n  return 2.3 * n_xy;\n}\n`;\n\nexport const classicNoise3D = `\n//\n// GLSL textureless classic 3D noise \"cnoise\",\n// with an RSL-style periodic variant \"pnoise\".\n// Author:  Stefan Gustavson (stefan.gustavson@liu.se)\n// Version: 2011-10-11\n//\n// Many thanks to Ian McEwan of Ashima Arts for the\n// ideas for permutation and gradient selection.\n//\n// Copyright (c) 2011 Stefan Gustavson. All rights reserved.\n// Distributed under the MIT license. See LICENSE file.\n// https://github.com/ashima/webgl-noise\n//\n\nvec3 mod289(vec3 x)\n{\n  return x - floor(x * (1.0 / 289.0)) * 289.0;\n}\n\nvec4 mod289(vec4 x)\n{\n  return x - floor(x * (1.0 / 289.0)) * 289.0;\n}\n\nvec4 permute(vec4 x)\n{\n  return mod289(((x*34.0)+1.0)*x);\n}\n\nvec4 taylorInvSqrt(vec4 r)\n{\n  return 1.79284291400159 - 0.85373472095314 * r;\n}\n\nvec3 fade(vec3 t) {\n  return t*t*t*(t*(t*6.0-15.0)+10.0);\n}\n\n// Classic Perlin noise\nfloat classicNoise3D(vec3 P)\n{\n  vec3 Pi0 = floor(P); // Integer part for indexing\n  vec3 Pi1 = Pi0 + vec3(1.0); // Integer part + 1\n  Pi0 = mod289(Pi0);\n  Pi1 = mod289(Pi1);\n  vec3 Pf0 = fract(P); // Fractional part for interpolation\n  vec3 Pf1 = Pf0 - vec3(1.0); // Fractional part - 1.0\n  vec4 ix = vec4(Pi0.x, Pi1.x, Pi0.x, Pi1.x);\n  vec4 iy = vec4(Pi0.yy, Pi1.yy);\n  vec4 iz0 = Pi0.zzzz;\n  vec4 iz1 = Pi1.zzzz;\n\n  vec4 ixy = permute(permute(ix) + iy);\n  vec4 ixy0 = permute(ixy + iz0);\n  vec4 ixy1 = permute(ixy + iz1);\n\n  vec4 gx0 = ixy0 * (1.0 / 7.0);\n  vec4 gy0 = fract(floor(gx0) * (1.0 / 7.0)) - 0.5;\n  gx0 = fract(gx0);\n  vec4 gz0 = vec4(0.5) - abs(gx0) - abs(gy0);\n  vec4 sz0 = step(gz0, vec4(0.0));\n  gx0 -= sz0 * (step(0.0, gx0) - 0.5);\n  gy0 -= sz0 * (step(0.0, gy0) - 0.5);\n\n  vec4 gx1 = ixy1 * (1.0 / 7.0);\n  vec4 gy1 = fract(floor(gx1) * (1.0 / 7.0)) - 0.5;\n  gx1 = fract(gx1);\n  vec4 gz1 = vec4(0.5) - abs(gx1) - abs(gy1);\n  vec4 sz1 = step(gz1, vec4(0.0));\n  gx1 -= sz1 * (step(0.0, gx1) - 0.5);\n  gy1 -= sz1 * (step(0.0, gy1) - 0.5);\n\n  vec3 g000 = vec3(gx0.x,gy0.x,gz0.x);\n  vec3 g100 = vec3(gx0.y,gy0.y,gz0.y);\n  vec3 g010 = vec3(gx0.z,gy0.z,gz0.z);\n  vec3 g110 = vec3(gx0.w,gy0.w,gz0.w);\n  vec3 g001 = vec3(gx1.x,gy1.x,gz1.x);\n  vec3 g101 = vec3(gx1.y,gy1.y,gz1.y);\n  vec3 g011 = vec3(gx1.z,gy1.z,gz1.z);\n  vec3 g111 = vec3(gx1.w,gy1.w,gz1.w);\n\n  vec4 norm0 = taylorInvSqrt(vec4(dot(g000, g000), dot(g010, g010), dot(g100, g100), dot(g110, g110)));\n  g000 *= norm0.x;\n  g010 *= norm0.y;\n  g100 *= norm0.z;\n  g110 *= norm0.w;\n  vec4 norm1 = taylorInvSqrt(vec4(dot(g001, g001), dot(g011, g011), dot(g101, g101), dot(g111, g111)));\n  g001 *= norm1.x;\n  g011 *= norm1.y;\n  g101 *= norm1.z;\n  g111 *= norm1.w;\n\n  float n000 = dot(g000, Pf0);\n  float n100 = dot(g100, vec3(Pf1.x, Pf0.yz));\n  float n010 = dot(g010, vec3(Pf0.x, Pf1.y, Pf0.z));\n  float n110 = dot(g110, vec3(Pf1.xy, Pf0.z));\n  float n001 = dot(g001, vec3(Pf0.xy, Pf1.z));\n  float n101 = dot(g101, vec3(Pf1.x, Pf0.y, Pf1.z));\n  float n011 = dot(g011, vec3(Pf0.x, Pf1.yz));\n  float n111 = dot(g111, Pf1);\n\n  vec3 fade_xyz = fade(Pf0);\n  vec4 n_z = mix(vec4(n000, n100, n010, n110), vec4(n001, n101, n011, n111), fade_xyz.z);\n  vec2 n_yz = mix(n_z.xy, n_z.zw, fade_xyz.y);\n  float n_xyz = mix(n_yz.x, n_yz.y, fade_xyz.x);\n  return 2.2 * n_xyz;\n}\n`;\n\nexport const classicNoise4D = `\n//\n// GLSL textureless classic 4D noise \"cnoise\",\n// with an RSL-style periodic variant \"pnoise\".\n// Author:  Stefan Gustavson (stefan.gustavson@liu.se)\n// Version: 2011-08-22\n//\n// Many thanks to Ian McEwan of Ashima Arts for the\n// ideas for permutation and gradient selection.\n//\n// Copyright (c) 2011 Stefan Gustavson. All rights reserved.\n// Distributed under the MIT license. See LICENSE file.\n// https://github.com/ashima/webgl-noise\n//\n\nvec4 mod289(vec4 x)\n{\n  return x - floor(x * (1.0 / 289.0)) * 289.0;\n}\n\nvec4 permute(vec4 x)\n{\n  return mod289(((x*34.0)+1.0)*x);\n}\n\nvec4 taylorInvSqrt(vec4 r)\n{\n  return 1.79284291400159 - 0.85373472095314 * r;\n}\n\nvec4 fade(vec4 t) {\n  return t*t*t*(t*(t*6.0-15.0)+10.0);\n}\n\n// Classic Perlin noise\nfloat classicNoise4D(vec4 P)\n{\n  vec4 Pi0 = floor(P); // Integer part for indexing\n  vec4 Pi1 = Pi0 + 1.0; // Integer part + 1\n  Pi0 = mod289(Pi0);\n  Pi1 = mod289(Pi1);\n  vec4 Pf0 = fract(P); // Fractional part for interpolation\n  vec4 Pf1 = Pf0 - 1.0; // Fractional part - 1.0\n  vec4 ix = vec4(Pi0.x, Pi1.x, Pi0.x, Pi1.x);\n  vec4 iy = vec4(Pi0.yy, Pi1.yy);\n  vec4 iz0 = vec4(Pi0.zzzz);\n  vec4 iz1 = vec4(Pi1.zzzz);\n  vec4 iw0 = vec4(Pi0.wwww);\n  vec4 iw1 = vec4(Pi1.wwww);\n\n  vec4 ixy = permute(permute(ix) + iy);\n  vec4 ixy0 = permute(ixy + iz0);\n  vec4 ixy1 = permute(ixy + iz1);\n  vec4 ixy00 = permute(ixy0 + iw0);\n  vec4 ixy01 = permute(ixy0 + iw1);\n  vec4 ixy10 = permute(ixy1 + iw0);\n  vec4 ixy11 = permute(ixy1 + iw1);\n\n  vec4 gx00 = ixy00 * (1.0 / 7.0);\n  vec4 gy00 = floor(gx00) * (1.0 / 7.0);\n  vec4 gz00 = floor(gy00) * (1.0 / 6.0);\n  gx00 = fract(gx00) - 0.5;\n  gy00 = fract(gy00) - 0.5;\n  gz00 = fract(gz00) - 0.5;\n  vec4 gw00 = vec4(0.75) - abs(gx00) - abs(gy00) - abs(gz00);\n  vec4 sw00 = step(gw00, vec4(0.0));\n  gx00 -= sw00 * (step(0.0, gx00) - 0.5);\n  gy00 -= sw00 * (step(0.0, gy00) - 0.5);\n\n  vec4 gx01 = ixy01 * (1.0 / 7.0);\n  vec4 gy01 = floor(gx01) * (1.0 / 7.0);\n  vec4 gz01 = floor(gy01) * (1.0 / 6.0);\n  gx01 = fract(gx01) - 0.5;\n  gy01 = fract(gy01) - 0.5;\n  gz01 = fract(gz01) - 0.5;\n  vec4 gw01 = vec4(0.75) - abs(gx01) - abs(gy01) - abs(gz01);\n  vec4 sw01 = step(gw01, vec4(0.0));\n  gx01 -= sw01 * (step(0.0, gx01) - 0.5);\n  gy01 -= sw01 * (step(0.0, gy01) - 0.5);\n\n  vec4 gx10 = ixy10 * (1.0 / 7.0);\n  vec4 gy10 = floor(gx10) * (1.0 / 7.0);\n  vec4 gz10 = floor(gy10) * (1.0 / 6.0);\n  gx10 = fract(gx10) - 0.5;\n  gy10 = fract(gy10) - 0.5;\n  gz10 = fract(gz10) - 0.5;\n  vec4 gw10 = vec4(0.75) - abs(gx10) - abs(gy10) - abs(gz10);\n  vec4 sw10 = step(gw10, vec4(0.0));\n  gx10 -= sw10 * (step(0.0, gx10) - 0.5);\n  gy10 -= sw10 * (step(0.0, gy10) - 0.5);\n\n  vec4 gx11 = ixy11 * (1.0 / 7.0);\n  vec4 gy11 = floor(gx11) * (1.0 / 7.0);\n  vec4 gz11 = floor(gy11) * (1.0 / 6.0);\n  gx11 = fract(gx11) - 0.5;\n  gy11 = fract(gy11) - 0.5;\n  gz11 = fract(gz11) - 0.5;\n  vec4 gw11 = vec4(0.75) - abs(gx11) - abs(gy11) - abs(gz11);\n  vec4 sw11 = step(gw11, vec4(0.0));\n  gx11 -= sw11 * (step(0.0, gx11) - 0.5);\n  gy11 -= sw11 * (step(0.0, gy11) - 0.5);\n\n  vec4 g0000 = vec4(gx00.x,gy00.x,gz00.x,gw00.x);\n  vec4 g1000 = vec4(gx00.y,gy00.y,gz00.y,gw00.y);\n  vec4 g0100 = vec4(gx00.z,gy00.z,gz00.z,gw00.z);\n  vec4 g1100 = vec4(gx00.w,gy00.w,gz00.w,gw00.w);\n  vec4 g0010 = vec4(gx10.x,gy10.x,gz10.x,gw10.x);\n  vec4 g1010 = vec4(gx10.y,gy10.y,gz10.y,gw10.y);\n  vec4 g0110 = vec4(gx10.z,gy10.z,gz10.z,gw10.z);\n  vec4 g1110 = vec4(gx10.w,gy10.w,gz10.w,gw10.w);\n  vec4 g0001 = vec4(gx01.x,gy01.x,gz01.x,gw01.x);\n  vec4 g1001 = vec4(gx01.y,gy01.y,gz01.y,gw01.y);\n  vec4 g0101 = vec4(gx01.z,gy01.z,gz01.z,gw01.z);\n  vec4 g1101 = vec4(gx01.w,gy01.w,gz01.w,gw01.w);\n  vec4 g0011 = vec4(gx11.x,gy11.x,gz11.x,gw11.x);\n  vec4 g1011 = vec4(gx11.y,gy11.y,gz11.y,gw11.y);\n  vec4 g0111 = vec4(gx11.z,gy11.z,gz11.z,gw11.z);\n  vec4 g1111 = vec4(gx11.w,gy11.w,gz11.w,gw11.w);\n\n  vec4 norm00 = taylorInvSqrt(vec4(dot(g0000, g0000), dot(g0100, g0100), dot(g1000, g1000), dot(g1100, g1100)));\n  g0000 *= norm00.x;\n  g0100 *= norm00.y;\n  g1000 *= norm00.z;\n  g1100 *= norm00.w;\n\n  vec4 norm01 = taylorInvSqrt(vec4(dot(g0001, g0001), dot(g0101, g0101), dot(g1001, g1001), dot(g1101, g1101)));\n  g0001 *= norm01.x;\n  g0101 *= norm01.y;\n  g1001 *= norm01.z;\n  g1101 *= norm01.w;\n\n  vec4 norm10 = taylorInvSqrt(vec4(dot(g0010, g0010), dot(g0110, g0110), dot(g1010, g1010), dot(g1110, g1110)));\n  g0010 *= norm10.x;\n  g0110 *= norm10.y;\n  g1010 *= norm10.z;\n  g1110 *= norm10.w;\n\n  vec4 norm11 = taylorInvSqrt(vec4(dot(g0011, g0011), dot(g0111, g0111), dot(g1011, g1011), dot(g1111, g1111)));\n  g0011 *= norm11.x;\n  g0111 *= norm11.y;\n  g1011 *= norm11.z;\n  g1111 *= norm11.w;\n\n  float n0000 = dot(g0000, Pf0);\n  float n1000 = dot(g1000, vec4(Pf1.x, Pf0.yzw));\n  float n0100 = dot(g0100, vec4(Pf0.x, Pf1.y, Pf0.zw));\n  float n1100 = dot(g1100, vec4(Pf1.xy, Pf0.zw));\n  float n0010 = dot(g0010, vec4(Pf0.xy, Pf1.z, Pf0.w));\n  float n1010 = dot(g1010, vec4(Pf1.x, Pf0.y, Pf1.z, Pf0.w));\n  float n0110 = dot(g0110, vec4(Pf0.x, Pf1.yz, Pf0.w));\n  float n1110 = dot(g1110, vec4(Pf1.xyz, Pf0.w));\n  float n0001 = dot(g0001, vec4(Pf0.xyz, Pf1.w));\n  float n1001 = dot(g1001, vec4(Pf1.x, Pf0.yz, Pf1.w));\n  float n0101 = dot(g0101, vec4(Pf0.x, Pf1.y, Pf0.z, Pf1.w));\n  float n1101 = dot(g1101, vec4(Pf1.xy, Pf0.z, Pf1.w));\n  float n0011 = dot(g0011, vec4(Pf0.xy, Pf1.zw));\n  float n1011 = dot(g1011, vec4(Pf1.x, Pf0.y, Pf1.zw));\n  float n0111 = dot(g0111, vec4(Pf0.x, Pf1.yzw));\n  float n1111 = dot(g1111, Pf1);\n\n  vec4 fade_xyzw = fade(Pf0);\n  vec4 n_0w = mix(vec4(n0000, n1000, n0100, n1100), vec4(n0001, n1001, n0101, n1101), fade_xyzw.w);\n  vec4 n_1w = mix(vec4(n0010, n1010, n0110, n1110), vec4(n0011, n1011, n0111, n1111), fade_xyzw.w);\n  vec4 n_zw = mix(n_0w, n_1w, fade_xyzw.z);\n  vec2 n_yzw = mix(n_zw.xy, n_zw.zw, fade_xyzw.y);\n  float n_xyzw = mix(n_yzw.x, n_yzw.y, fade_xyzw.x);\n  return 2.2 * n_xyzw;\n}\n`;\n\nexport const periodicNoise2D = `\n//\n// GLSL textureless classic 2D noise \"cnoise\",\n// with an RSL-style periodic variant \"pnoise\".\n// Author:  Stefan Gustavson (stefan.gustavson@liu.se)\n// Version: 2011-08-22\n//\n// Many thanks to Ian McEwan of Ashima Arts for the\n// ideas for permutation and gradient selection.\n//\n// Copyright (c) 2011 Stefan Gustavson. All rights reserved.\n// Distributed under the MIT license. See LICENSE file.\n// https://github.com/ashima/webgl-noise\n//\n\nvec4 mod289(vec4 x)\n{\n  return x - floor(x * (1.0 / 289.0)) * 289.0;\n}\n\nvec4 permute(vec4 x)\n{\n  return mod289(((x*34.0)+1.0)*x);\n}\n\nvec4 taylorInvSqrt(vec4 r)\n{\n  return 1.79284291400159 - 0.85373472095314 * r;\n}\n\nvec2 fade(vec2 t) {\n  return t*t*t*(t*(t*6.0-15.0)+10.0);\n}\n\n// Classic Perlin noise, periodic variant\nfloat periodicNoise2D(vec2 P, vec2 rep)\n{\n  vec4 Pi = floor(P.xyxy) + vec4(0.0, 0.0, 1.0, 1.0);\n  vec4 Pf = fract(P.xyxy) - vec4(0.0, 0.0, 1.0, 1.0);\n  Pi = mod(Pi, rep.xyxy); // To create noise with explicit period\n  Pi = mod289(Pi);        // To avoid truncation effects in permutation\n  vec4 ix = Pi.xzxz;\n  vec4 iy = Pi.yyww;\n  vec4 fx = Pf.xzxz;\n  vec4 fy = Pf.yyww;\n\n  vec4 i = permute(permute(ix) + iy);\n\n  vec4 gx = fract(i * (1.0 / 41.0)) * 2.0 - 1.0 ;\n  vec4 gy = abs(gx) - 0.5 ;\n  vec4 tx = floor(gx + 0.5);\n  gx = gx - tx;\n\n  vec2 g00 = vec2(gx.x,gy.x);\n  vec2 g10 = vec2(gx.y,gy.y);\n  vec2 g01 = vec2(gx.z,gy.z);\n  vec2 g11 = vec2(gx.w,gy.w);\n\n  vec4 norm = taylorInvSqrt(vec4(dot(g00, g00), dot(g01, g01), dot(g10, g10), dot(g11, g11)));\n  g00 *= norm.x;\n  g01 *= norm.y;\n  g10 *= norm.z;\n  g11 *= norm.w;\n\n  float n00 = dot(g00, vec2(fx.x, fy.x));\n  float n10 = dot(g10, vec2(fx.y, fy.y));\n  float n01 = dot(g01, vec2(fx.z, fy.z));\n  float n11 = dot(g11, vec2(fx.w, fy.w));\n\n  vec2 fade_xy = fade(Pf.xy);\n  vec2 n_x = mix(vec2(n00, n01), vec2(n10, n11), fade_xy.x);\n  float n_xy = mix(n_x.x, n_x.y, fade_xy.y);\n  return 2.3 * n_xy;\n}\n`;\n\nexport const periodicNoise3D = `\n//\n// GLSL textureless classic 3D noise \"cnoise\",\n// with an RSL-style periodic variant \"pnoise\".\n// Author:  Stefan Gustavson (stefan.gustavson@liu.se)\n// Version: 2011-10-11\n//\n// Many thanks to Ian McEwan of Ashima Arts for the\n// ideas for permutation and gradient selection.\n//\n// Copyright (c) 2011 Stefan Gustavson. All rights reserved.\n// Distributed under the MIT license. See LICENSE file.\n// https://github.com/ashima/webgl-noise\n//\n\nvec3 mod289(vec3 x)\n{\n  return x - floor(x * (1.0 / 289.0)) * 289.0;\n}\n\nvec4 mod289(vec4 x)\n{\n  return x - floor(x * (1.0 / 289.0)) * 289.0;\n}\n\nvec4 permute(vec4 x)\n{\n  return mod289(((x*34.0)+1.0)*x);\n}\n\nvec4 taylorInvSqrt(vec4 r)\n{\n  return 1.79284291400159 - 0.85373472095314 * r;\n}\n\nvec3 fade(vec3 t) {\n  return t*t*t*(t*(t*6.0-15.0)+10.0);\n}\n\n// Classic Perlin noise, periodic variant\nfloat periodicNoise3D(vec3 P, vec3 rep)\n{\n  vec3 Pi0 = mod(floor(P), rep); // Integer part, modulo period\n  vec3 Pi1 = mod(Pi0 + vec3(1.0), rep); // Integer part + 1, mod period\n  Pi0 = mod289(Pi0);\n  Pi1 = mod289(Pi1);\n  vec3 Pf0 = fract(P); // Fractional part for interpolation\n  vec3 Pf1 = Pf0 - vec3(1.0); // Fractional part - 1.0\n  vec4 ix = vec4(Pi0.x, Pi1.x, Pi0.x, Pi1.x);\n  vec4 iy = vec4(Pi0.yy, Pi1.yy);\n  vec4 iz0 = Pi0.zzzz;\n  vec4 iz1 = Pi1.zzzz;\n\n  vec4 ixy = permute(permute(ix) + iy);\n  vec4 ixy0 = permute(ixy + iz0);\n  vec4 ixy1 = permute(ixy + iz1);\n\n  vec4 gx0 = ixy0 * (1.0 / 7.0);\n  vec4 gy0 = fract(floor(gx0) * (1.0 / 7.0)) - 0.5;\n  gx0 = fract(gx0);\n  vec4 gz0 = vec4(0.5) - abs(gx0) - abs(gy0);\n  vec4 sz0 = step(gz0, vec4(0.0));\n  gx0 -= sz0 * (step(0.0, gx0) - 0.5);\n  gy0 -= sz0 * (step(0.0, gy0) - 0.5);\n\n  vec4 gx1 = ixy1 * (1.0 / 7.0);\n  vec4 gy1 = fract(floor(gx1) * (1.0 / 7.0)) - 0.5;\n  gx1 = fract(gx1);\n  vec4 gz1 = vec4(0.5) - abs(gx1) - abs(gy1);\n  vec4 sz1 = step(gz1, vec4(0.0));\n  gx1 -= sz1 * (step(0.0, gx1) - 0.5);\n  gy1 -= sz1 * (step(0.0, gy1) - 0.5);\n\n  vec3 g000 = vec3(gx0.x,gy0.x,gz0.x);\n  vec3 g100 = vec3(gx0.y,gy0.y,gz0.y);\n  vec3 g010 = vec3(gx0.z,gy0.z,gz0.z);\n  vec3 g110 = vec3(gx0.w,gy0.w,gz0.w);\n  vec3 g001 = vec3(gx1.x,gy1.x,gz1.x);\n  vec3 g101 = vec3(gx1.y,gy1.y,gz1.y);\n  vec3 g011 = vec3(gx1.z,gy1.z,gz1.z);\n  vec3 g111 = vec3(gx1.w,gy1.w,gz1.w);\n\n  vec4 norm0 = taylorInvSqrt(vec4(dot(g000, g000), dot(g010, g010), dot(g100, g100), dot(g110, g110)));\n  g000 *= norm0.x;\n  g010 *= norm0.y;\n  g100 *= norm0.z;\n  g110 *= norm0.w;\n  vec4 norm1 = taylorInvSqrt(vec4(dot(g001, g001), dot(g011, g011), dot(g101, g101), dot(g111, g111)));\n  g001 *= norm1.x;\n  g011 *= norm1.y;\n  g101 *= norm1.z;\n  g111 *= norm1.w;\n\n  float n000 = dot(g000, Pf0);\n  float n100 = dot(g100, vec3(Pf1.x, Pf0.yz));\n  float n010 = dot(g010, vec3(Pf0.x, Pf1.y, Pf0.z));\n  float n110 = dot(g110, vec3(Pf1.xy, Pf0.z));\n  float n001 = dot(g001, vec3(Pf0.xy, Pf1.z));\n  float n101 = dot(g101, vec3(Pf1.x, Pf0.y, Pf1.z));\n  float n011 = dot(g011, vec3(Pf0.x, Pf1.yz));\n  float n111 = dot(g111, Pf1);\n\n  vec3 fade_xyz = fade(Pf0);\n  vec4 n_z = mix(vec4(n000, n100, n010, n110), vec4(n001, n101, n011, n111), fade_xyz.z);\n  vec2 n_yz = mix(n_z.xy, n_z.zw, fade_xyz.y);\n  float n_xyz = mix(n_yz.x, n_yz.y, fade_xyz.x);\n  return 2.2 * n_xyz;\n}\n`;\n\nexport const periodicNoise4D = `\n//\n// GLSL textureless classic 4D noise \"cnoise\",\n// with an RSL-style periodic variant \"pnoise\".\n// Author:  Stefan Gustavson (stefan.gustavson@liu.se)\n// Version: 2011-08-22\n//\n// Many thanks to Ian McEwan of Ashima Arts for the\n// ideas for permutation and gradient selection.\n//\n// Copyright (c) 2011 Stefan Gustavson. All rights reserved.\n// Distributed under the MIT license. See LICENSE file.\n// https://github.com/ashima/webgl-noise\n//\n\nvec4 mod289(vec4 x)\n{\n  return x - floor(x * (1.0 / 289.0)) * 289.0;\n}\n\nvec4 permute(vec4 x)\n{\n  return mod289(((x*34.0)+1.0)*x);\n}\n\nvec4 taylorInvSqrt(vec4 r)\n{\n  return 1.79284291400159 - 0.85373472095314 * r;\n}\n\nvec4 fade(vec4 t) {\n  return t*t*t*(t*(t*6.0-15.0)+10.0);\n}\n\n// Classic Perlin noise, periodic version\nfloat periodicNoise4D(vec4 P, vec4 rep)\n{\n  vec4 Pi0 = mod(floor(P), rep); // Integer part modulo rep\n  vec4 Pi1 = mod(Pi0 + 1.0, rep); // Integer part + 1 mod rep\n  Pi0 = mod289(Pi0);\n  Pi1 = mod289(Pi1);\n  vec4 Pf0 = fract(P); // Fractional part for interpolation\n  vec4 Pf1 = Pf0 - 1.0; // Fractional part - 1.0\n  vec4 ix = vec4(Pi0.x, Pi1.x, Pi0.x, Pi1.x);\n  vec4 iy = vec4(Pi0.yy, Pi1.yy);\n  vec4 iz0 = vec4(Pi0.zzzz);\n  vec4 iz1 = vec4(Pi1.zzzz);\n  vec4 iw0 = vec4(Pi0.wwww);\n  vec4 iw1 = vec4(Pi1.wwww);\n\n  vec4 ixy = permute(permute(ix) + iy);\n  vec4 ixy0 = permute(ixy + iz0);\n  vec4 ixy1 = permute(ixy + iz1);\n  vec4 ixy00 = permute(ixy0 + iw0);\n  vec4 ixy01 = permute(ixy0 + iw1);\n  vec4 ixy10 = permute(ixy1 + iw0);\n  vec4 ixy11 = permute(ixy1 + iw1);\n\n  vec4 gx00 = ixy00 * (1.0 / 7.0);\n  vec4 gy00 = floor(gx00) * (1.0 / 7.0);\n  vec4 gz00 = floor(gy00) * (1.0 / 6.0);\n  gx00 = fract(gx00) - 0.5;\n  gy00 = fract(gy00) - 0.5;\n  gz00 = fract(gz00) - 0.5;\n  vec4 gw00 = vec4(0.75) - abs(gx00) - abs(gy00) - abs(gz00);\n  vec4 sw00 = step(gw00, vec4(0.0));\n  gx00 -= sw00 * (step(0.0, gx00) - 0.5);\n  gy00 -= sw00 * (step(0.0, gy00) - 0.5);\n\n  vec4 gx01 = ixy01 * (1.0 / 7.0);\n  vec4 gy01 = floor(gx01) * (1.0 / 7.0);\n  vec4 gz01 = floor(gy01) * (1.0 / 6.0);\n  gx01 = fract(gx01) - 0.5;\n  gy01 = fract(gy01) - 0.5;\n  gz01 = fract(gz01) - 0.5;\n  vec4 gw01 = vec4(0.75) - abs(gx01) - abs(gy01) - abs(gz01);\n  vec4 sw01 = step(gw01, vec4(0.0));\n  gx01 -= sw01 * (step(0.0, gx01) - 0.5);\n  gy01 -= sw01 * (step(0.0, gy01) - 0.5);\n\n  vec4 gx10 = ixy10 * (1.0 / 7.0);\n  vec4 gy10 = floor(gx10) * (1.0 / 7.0);\n  vec4 gz10 = floor(gy10) * (1.0 / 6.0);\n  gx10 = fract(gx10) - 0.5;\n  gy10 = fract(gy10) - 0.5;\n  gz10 = fract(gz10) - 0.5;\n  vec4 gw10 = vec4(0.75) - abs(gx10) - abs(gy10) - abs(gz10);\n  vec4 sw10 = step(gw10, vec4(0.0));\n  gx10 -= sw10 * (step(0.0, gx10) - 0.5);\n  gy10 -= sw10 * (step(0.0, gy10) - 0.5);\n\n  vec4 gx11 = ixy11 * (1.0 / 7.0);\n  vec4 gy11 = floor(gx11) * (1.0 / 7.0);\n  vec4 gz11 = floor(gy11) * (1.0 / 6.0);\n  gx11 = fract(gx11) - 0.5;\n  gy11 = fract(gy11) - 0.5;\n  gz11 = fract(gz11) - 0.5;\n  vec4 gw11 = vec4(0.75) - abs(gx11) - abs(gy11) - abs(gz11);\n  vec4 sw11 = step(gw11, vec4(0.0));\n  gx11 -= sw11 * (step(0.0, gx11) - 0.5);\n  gy11 -= sw11 * (step(0.0, gy11) - 0.5);\n\n  vec4 g0000 = vec4(gx00.x,gy00.x,gz00.x,gw00.x);\n  vec4 g1000 = vec4(gx00.y,gy00.y,gz00.y,gw00.y);\n  vec4 g0100 = vec4(gx00.z,gy00.z,gz00.z,gw00.z);\n  vec4 g1100 = vec4(gx00.w,gy00.w,gz00.w,gw00.w);\n  vec4 g0010 = vec4(gx10.x,gy10.x,gz10.x,gw10.x);\n  vec4 g1010 = vec4(gx10.y,gy10.y,gz10.y,gw10.y);\n  vec4 g0110 = vec4(gx10.z,gy10.z,gz10.z,gw10.z);\n  vec4 g1110 = vec4(gx10.w,gy10.w,gz10.w,gw10.w);\n  vec4 g0001 = vec4(gx01.x,gy01.x,gz01.x,gw01.x);\n  vec4 g1001 = vec4(gx01.y,gy01.y,gz01.y,gw01.y);\n  vec4 g0101 = vec4(gx01.z,gy01.z,gz01.z,gw01.z);\n  vec4 g1101 = vec4(gx01.w,gy01.w,gz01.w,gw01.w);\n  vec4 g0011 = vec4(gx11.x,gy11.x,gz11.x,gw11.x);\n  vec4 g1011 = vec4(gx11.y,gy11.y,gz11.y,gw11.y);\n  vec4 g0111 = vec4(gx11.z,gy11.z,gz11.z,gw11.z);\n  vec4 g1111 = vec4(gx11.w,gy11.w,gz11.w,gw11.w);\n\n  vec4 norm00 = taylorInvSqrt(vec4(dot(g0000, g0000), dot(g0100, g0100), dot(g1000, g1000), dot(g1100, g1100)));\n  g0000 *= norm00.x;\n  g0100 *= norm00.y;\n  g1000 *= norm00.z;\n  g1100 *= norm00.w;\n\n  vec4 norm01 = taylorInvSqrt(vec4(dot(g0001, g0001), dot(g0101, g0101), dot(g1001, g1001), dot(g1101, g1101)));\n  g0001 *= norm01.x;\n  g0101 *= norm01.y;\n  g1001 *= norm01.z;\n  g1101 *= norm01.w;\n\n  vec4 norm10 = taylorInvSqrt(vec4(dot(g0010, g0010), dot(g0110, g0110), dot(g1010, g1010), dot(g1110, g1110)));\n  g0010 *= norm10.x;\n  g0110 *= norm10.y;\n  g1010 *= norm10.z;\n  g1110 *= norm10.w;\n\n  vec4 norm11 = taylorInvSqrt(vec4(dot(g0011, g0011), dot(g0111, g0111), dot(g1011, g1011), dot(g1111, g1111)));\n  g0011 *= norm11.x;\n  g0111 *= norm11.y;\n  g1011 *= norm11.z;\n  g1111 *= norm11.w;\n\n  float n0000 = dot(g0000, Pf0);\n  float n1000 = dot(g1000, vec4(Pf1.x, Pf0.yzw));\n  float n0100 = dot(g0100, vec4(Pf0.x, Pf1.y, Pf0.zw));\n  float n1100 = dot(g1100, vec4(Pf1.xy, Pf0.zw));\n  float n0010 = dot(g0010, vec4(Pf0.xy, Pf1.z, Pf0.w));\n  float n1010 = dot(g1010, vec4(Pf1.x, Pf0.y, Pf1.z, Pf0.w));\n  float n0110 = dot(g0110, vec4(Pf0.x, Pf1.yz, Pf0.w));\n  float n1110 = dot(g1110, vec4(Pf1.xyz, Pf0.w));\n  float n0001 = dot(g0001, vec4(Pf0.xyz, Pf1.w));\n  float n1001 = dot(g1001, vec4(Pf1.x, Pf0.yz, Pf1.w));\n  float n0101 = dot(g0101, vec4(Pf0.x, Pf1.y, Pf0.z, Pf1.w));\n  float n1101 = dot(g1101, vec4(Pf1.xy, Pf0.z, Pf1.w));\n  float n0011 = dot(g0011, vec4(Pf0.xy, Pf1.zw));\n  float n1011 = dot(g1011, vec4(Pf1.x, Pf0.y, Pf1.zw));\n  float n0111 = dot(g0111, vec4(Pf0.x, Pf1.yzw));\n  float n1111 = dot(g1111, Pf1);\n\n  vec4 fade_xyzw = fade(Pf0);\n  vec4 n_0w = mix(vec4(n0000, n1000, n0100, n1100), vec4(n0001, n1001, n0101, n1101), fade_xyzw.w);\n  vec4 n_1w = mix(vec4(n0010, n1010, n0110, n1110), vec4(n0011, n1011, n0111, n1111), fade_xyzw.w);\n  vec4 n_zw = mix(n_0w, n_1w, fade_xyzw.z);\n  vec2 n_yzw = mix(n_zw.xy, n_zw.zw, fade_xyzw.y);\n  float n_xyzw = mix(n_yzw.x, n_yzw.y, fade_xyzw.x);\n  return 2.2 * n_xyzw;\n}\n`;\n\nexport const simplexNoise2D = `\n//\n// Description : Array and textureless GLSL 2D simplex noise function.\n//      Author : Ian McEwan, Ashima Arts.\n//  Maintainer : ijm\n//     Lastmod : 20110822 (ijm)\n//     License : Copyright (C) 2011 Ashima Arts. All rights reserved.\n//               Distributed under the MIT License. See LICENSE file.\n//               https://github.com/ashima/webgl-noise\n//\n\nvec3 mod289(vec3 x) {\n  return x - floor(x * (1.0 / 289.0)) * 289.0;\n}\n\nvec2 mod289(vec2 x) {\n  return x - floor(x * (1.0 / 289.0)) * 289.0;\n}\n\nvec3 permute(vec3 x) {\n  return mod289(((x*34.0)+1.0)*x);\n}\n\nfloat simplexNoise2D(vec2 v)\n  {\n  const vec4 C = vec4(0.211324865405187,  // (3.0-sqrt(3.0))/6.0\n                      0.366025403784439,  // 0.5*(sqrt(3.0)-1.0)\n                     -0.577350269189626,  // -1.0 + 2.0 * C.x\n                      0.024390243902439); // 1.0 / 41.0\n// First corner\n  vec2 i  = floor(v + dot(v, C.yy) );\n  vec2 x0 = v -   i + dot(i, C.xx);\n\n// Other corners\n  vec2 i1;\n  //i1.x = step( x0.y, x0.x ); // x0.x > x0.y ? 1.0 : 0.0\n  //i1.y = 1.0 - i1.x;\n  i1 = (x0.x > x0.y) ? vec2(1.0, 0.0) : vec2(0.0, 1.0);\n  // x0 = x0 - 0.0 + 0.0 * C.xx ;\n  // x1 = x0 - i1 + 1.0 * C.xx ;\n  // x2 = x0 - 1.0 + 2.0 * C.xx ;\n  vec4 x12 = x0.xyxy + C.xxzz;\n  x12.xy -= i1;\n\n// Permutations\n  i = mod289(i); // Avoid truncation effects in permutation\n  vec3 p = permute( permute( i.y + vec3(0.0, i1.y, 1.0 ))\n    + i.x + vec3(0.0, i1.x, 1.0 ));\n\n  vec3 m = max(0.5 - vec3(dot(x0,x0), dot(x12.xy,x12.xy), dot(x12.zw,x12.zw)), 0.0);\n  m = m*m ;\n  m = m*m ;\n\n// Gradients: 41 points uniformly over a line, mapped onto a diamond.\n// The ring size 17*17 = 289 is close to a multiple of 41 (41*7 = 287)\n\n  vec3 x = 2.0 * fract(p * C.www) - 1.0;\n  vec3 h = abs(x) - 0.5;\n  vec3 ox = floor(x + 0.5);\n  vec3 a0 = x - ox;\n\n// Normalise gradients implicitly by scaling m\n// Approximation of: m *= inversesqrt( a0*a0 + h*h );\n  m *= 1.79284291400159 - 0.85373472095314 * ( a0*a0 + h*h );\n\n// Compute final noise value at P\n  vec3 g;\n  g.x  = a0.x  * x0.x  + h.x  * x0.y;\n  g.yz = a0.yz * x12.xz + h.yz * x12.yw;\n  return 130.0 * dot(m, g);\n}\n`;\n\nexport const simplexNoise3D = `\n//\n// Description : Array and textureless GLSL 2D/3D/4D simplex\n//               noise functions.\n//      Author : Ian McEwan, Ashima Arts.\n//  Maintainer : ijm\n//     Lastmod : 20110822 (ijm)\n//     License : Copyright (C) 2011 Ashima Arts. All rights reserved.\n//               Distributed under the MIT License. See LICENSE file.\n//               https://github.com/ashima/webgl-noise\n//\n\nvec3 mod289(vec3 x) {\n  return x - floor(x * (1.0 / 289.0)) * 289.0;\n}\n\nvec4 mod289(vec4 x) {\n  return x - floor(x * (1.0 / 289.0)) * 289.0;\n}\n\nvec4 permute(vec4 x) {\n     return mod289(((x*34.0)+1.0)*x);\n}\n\nvec4 taylorInvSqrt(vec4 r)\n{\n  return 1.79284291400159 - 0.85373472095314 * r;\n}\n\nfloat simplexNoise3D(vec3 v)\n  {\n  const vec2  C = vec2(1.0/6.0, 1.0/3.0) ;\n  const vec4  D = vec4(0.0, 0.5, 1.0, 2.0);\n\n// First corner\n  vec3 i  = floor(v + dot(v, C.yyy) );\n  vec3 x0 =   v - i + dot(i, C.xxx) ;\n\n// Other corners\n  vec3 g = step(x0.yzx, x0.xyz);\n  vec3 l = 1.0 - g;\n  vec3 i1 = min( g.xyz, l.zxy );\n  vec3 i2 = max( g.xyz, l.zxy );\n\n  //   x0 = x0 - 0.0 + 0.0 * C.xxx;\n  //   x1 = x0 - i1  + 1.0 * C.xxx;\n  //   x2 = x0 - i2  + 2.0 * C.xxx;\n  //   x3 = x0 - 1.0 + 3.0 * C.xxx;\n  vec3 x1 = x0 - i1 + C.xxx;\n  vec3 x2 = x0 - i2 + C.yyy; // 2.0*C.x = 1/3 = C.y\n  vec3 x3 = x0 - D.yyy;      // -1.0+3.0*C.x = -0.5 = -D.y\n\n// Permutations\n  i = mod289(i);\n  vec4 p = permute( permute( permute(\n             i.z + vec4(0.0, i1.z, i2.z, 1.0 ))\n           + i.y + vec4(0.0, i1.y, i2.y, 1.0 ))\n           + i.x + vec4(0.0, i1.x, i2.x, 1.0 ));\n\n// Gradients: 7x7 points over a square, mapped onto an octahedron.\n// The ring size 17*17 = 289 is close to a multiple of 49 (49*6 = 294)\n  float n_ = 0.142857142857; // 1.0/7.0\n  vec3  ns = n_ * D.wyz - D.xzx;\n\n  vec4 j = p - 49.0 * floor(p * ns.z * ns.z);  //  mod(p,7*7)\n\n  vec4 x_ = floor(j * ns.z);\n  vec4 y_ = floor(j - 7.0 * x_ );    // mod(j,N)\n\n  vec4 x = x_ *ns.x + ns.yyyy;\n  vec4 y = y_ *ns.x + ns.yyyy;\n  vec4 h = 1.0 - abs(x) - abs(y);\n\n  vec4 b0 = vec4( x.xy, y.xy );\n  vec4 b1 = vec4( x.zw, y.zw );\n\n  //vec4 s0 = vec4(lessThan(b0,0.0))*2.0 - 1.0;\n  //vec4 s1 = vec4(lessThan(b1,0.0))*2.0 - 1.0;\n  vec4 s0 = floor(b0)*2.0 + 1.0;\n  vec4 s1 = floor(b1)*2.0 + 1.0;\n  vec4 sh = -step(h, vec4(0.0));\n\n  vec4 a0 = b0.xzyw + s0.xzyw*sh.xxyy ;\n  vec4 a1 = b1.xzyw + s1.xzyw*sh.zzww ;\n\n  vec3 p0 = vec3(a0.xy,h.x);\n  vec3 p1 = vec3(a0.zw,h.y);\n  vec3 p2 = vec3(a1.xy,h.z);\n  vec3 p3 = vec3(a1.zw,h.w);\n\n//Normalise gradients\n  vec4 norm = taylorInvSqrt(vec4(dot(p0,p0), dot(p1,p1), dot(p2, p2), dot(p3,p3)));\n  p0 *= norm.x;\n  p1 *= norm.y;\n  p2 *= norm.z;\n  p3 *= norm.w;\n\n// Mix final noise value\n  vec4 m = max(0.6 - vec4(dot(x0,x0), dot(x1,x1), dot(x2,x2), dot(x3,x3)), 0.0);\n  m = m * m;\n  return 42.0 * dot( m*m, vec4( dot(p0,x0), dot(p1,x1),\n                                dot(p2,x2), dot(p3,x3) ) );\n  }\n`;\n\nexport const simplexNoise4D = `\n//\n// Description : Array and textureless GLSL 2D/3D/4D simplex\n//               noise functions.\n//      Author : Ian McEwan, Ashima Arts.\n//  Maintainer : ijm\n//     Lastmod : 20110822 (ijm)\n//     License : Copyright (C) 2011 Ashima Arts. All rights reserved.\n//               Distributed under the MIT License. See LICENSE file.\n//               https://github.com/ashima/webgl-noise\n//\n\nvec4 mod289(vec4 x) {\n  return x - floor(x * (1.0 / 289.0)) * 289.0; }\n\nfloat mod289(float x) {\n  return x - floor(x * (1.0 / 289.0)) * 289.0; }\n\nvec4 permute(vec4 x) {\n     return mod289(((x*34.0)+1.0)*x);\n}\n\nfloat permute(float x) {\n     return mod289(((x*34.0)+1.0)*x);\n}\n\nvec4 taylorInvSqrt(vec4 r)\n{\n  return 1.79284291400159 - 0.85373472095314 * r;\n}\n\nfloat taylorInvSqrt(float r)\n{\n  return 1.79284291400159 - 0.85373472095314 * r;\n}\n\nvec4 grad4(float j, vec4 ip)\n  {\n  const vec4 ones = vec4(1.0, 1.0, 1.0, -1.0);\n  vec4 p,s;\n\n  p.xyz = floor( fract (vec3(j) * ip.xyz) * 7.0) * ip.z - 1.0;\n  p.w = 1.5 - dot(abs(p.xyz), ones.xyz);\n  s = vec4(lessThan(p, vec4(0.0)));\n  p.xyz = p.xyz + (s.xyz*2.0 - 1.0) * s.www;\n\n  return p;\n  }\n\n// (sqrt(5) - 1)/4 = F4, used once below\n#define F4 0.309016994374947451\n\nfloat simplexNoise4D(vec4 v)\n  {\n  const vec4  C = vec4( 0.138196601125011,  // (5 - sqrt(5))/20  G4\n                        0.276393202250021,  // 2 * G4\n                        0.414589803375032,  // 3 * G4\n                       -0.447213595499958); // -1 + 4 * G4\n\n// First corner\n  vec4 i  = floor(v + dot(v, vec4(F4)) );\n  vec4 x0 = v -   i + dot(i, C.xxxx);\n\n// Other corners\n\n// Rank sorting originally contributed by Bill Licea-Kane, AMD (formerly ATI)\n  vec4 i0;\n  vec3 isX = step( x0.yzw, x0.xxx );\n  vec3 isYZ = step( x0.zww, x0.yyz );\n//  i0.x = dot( isX, vec3( 1.0 ) );\n  i0.x = isX.x + isX.y + isX.z;\n  i0.yzw = 1.0 - isX;\n//  i0.y += dot( isYZ.xy, vec2( 1.0 ) );\n  i0.y += isYZ.x + isYZ.y;\n  i0.zw += 1.0 - isYZ.xy;\n  i0.z += isYZ.z;\n  i0.w += 1.0 - isYZ.z;\n\n  // i0 now contains the unique values 0,1,2,3 in each channel\n  vec4 i3 = clamp( i0, 0.0, 1.0 );\n  vec4 i2 = clamp( i0-1.0, 0.0, 1.0 );\n  vec4 i1 = clamp( i0-2.0, 0.0, 1.0 );\n\n  //  x0 = x0 - 0.0 + 0.0 * C.xxxx\n  //  x1 = x0 - i1  + 1.0 * C.xxxx\n  //  x2 = x0 - i2  + 2.0 * C.xxxx\n  //  x3 = x0 - i3  + 3.0 * C.xxxx\n  //  x4 = x0 - 1.0 + 4.0 * C.xxxx\n  vec4 x1 = x0 - i1 + C.xxxx;\n  vec4 x2 = x0 - i2 + C.yyyy;\n  vec4 x3 = x0 - i3 + C.zzzz;\n  vec4 x4 = x0 + C.wwww;\n\n// Permutations\n  i = mod289(i);\n  float j0 = permute( permute( permute( permute(i.w) + i.z) + i.y) + i.x);\n  vec4 j1 = permute( permute( permute( permute (\n             i.w + vec4(i1.w, i2.w, i3.w, 1.0 ))\n           + i.z + vec4(i1.z, i2.z, i3.z, 1.0 ))\n           + i.y + vec4(i1.y, i2.y, i3.y, 1.0 ))\n           + i.x + vec4(i1.x, i2.x, i3.x, 1.0 ));\n\n// Gradients: 7x7x6 points over a cube, mapped onto a 4-cross polytope\n// 7*7*6 = 294, which is close to the ring size 17*17 = 289.\n  vec4 ip = vec4(1.0/294.0, 1.0/49.0, 1.0/7.0, 0.0) ;\n\n  vec4 p0 = grad4(j0,   ip);\n  vec4 p1 = grad4(j1.x, ip);\n  vec4 p2 = grad4(j1.y, ip);\n  vec4 p3 = grad4(j1.z, ip);\n  vec4 p4 = grad4(j1.w, ip);\n\n// Normalise gradients\n  vec4 norm = taylorInvSqrt(vec4(dot(p0,p0), dot(p1,p1), dot(p2, p2), dot(p3,p3)));\n  p0 *= norm.x;\n  p1 *= norm.y;\n  p2 *= norm.z;\n  p3 *= norm.w;\n  p4 *= taylorInvSqrt(dot(p4,p4));\n\n// Mix contributions from the five corners\n  vec3 m0 = max(0.6 - vec3(dot(x0,x0), dot(x1,x1), dot(x2,x2)), 0.0);\n  vec2 m1 = max(0.6 - vec2(dot(x3,x3), dot(x4,x4)            ), 0.0);\n  m0 = m0 * m0;\n  m1 = m1 * m1;\n  return 49.0 * ( dot(m0*m0, vec3( dot( p0, x0 ), dot( p1, x1 ), dot( p2, x2 )))\n               + dot(m1*m1, vec2( dot( p3, x3 ), dot( p4, x4 ) ) ) ) ;\n\n  }\n`;\n\n\n\n// WEBPACK FOOTER //\n// ./src/shaders/chunks/Noise.glsl.ts","export const packNormalToRGB = `\n\tvec3 packNormalToRGB(const in vec3 normal) {\n\t  return normalize(normal) * 0.5 + 0.5;\n\t}\n`;\n\nexport default {\n  packNormalToRGB\n};\n\n\n\n// WEBPACK FOOTER //\n// ./src/shaders/chunks/Packing.glsl.ts","// https://raw.githubusercontent.com/stackgl/glsl-gamma/master/out.glsl\n\nexport const tonemapReinhard = `\n\tvec3 tonemapReinhard(vec3 color) {\n\t  return color / (color + vec3(1.0));\n\t}\n`;\n\n\n\n// WEBPACK FOOTER //\n// ./src/shaders/chunks/Tonemap.glsl.ts","/**\n * https://github.com/stackgl/glsl-transpose/blob/master/index.glsl\n */\n\nexport default `\n\tfloat transpose(float m) {\n\t  return m;\n\t}\n\n\tmat2 transpose(mat2 m) {\n\t  return mat2(m[0][0], m[1][0],\n\t              m[0][1], m[1][1]);\n\t}\n\n\tmat3 transpose(mat3 m) {\n\t  return mat3(m[0][0], m[1][0], m[2][0],\n\t              m[0][1], m[1][1], m[2][1],\n\t              m[0][2], m[1][2], m[2][2]);\n\t}\n\n\tmat4 transpose(mat4 m) {\n\t  return mat4(m[0][0], m[1][0], m[2][0], m[3][0],\n\t              m[0][1], m[1][1], m[2][1], m[3][1],\n\t              m[0][2], m[1][2], m[2][2], m[3][2],\n\t              m[0][3], m[1][3], m[2][3], m[3][3]);\n\t}\n`;\n\n\n\n// WEBPACK FOOTER //\n// ./src/shaders/chunks/Transpose.glsl.ts","import Bezier from 'bezier-js';\nimport { GUI } from 'dat-gui';\nimport uuid from 'uuid/v1';\nimport PerspectiveCamera from '../cameras/PerspectiveCamera';\nimport { DRAW_LINES } from '../core/Constants';\nimport EventDispatcher from '../core/EventDispatcher';\nimport Material from '../core/Material';\nimport Mesh from '../core/Mesh';\nimport Scene from '../core/Scene';\nimport LineGeometry from '../geometry/LineGeometry';\nimport SphereGeometry from '../geometry/SphereGeometry';\n\ninterface DollyCurves {\n  origin: Bezier;\n  lookat: Bezier;\n}\n\nclass Dolly {\n  public curves: DollyCurves;\n  public origin: object[];\n  public lookat: object[];\n  constructor(origin, lookat, steps = 50) {\n    this.origin = origin;\n    this.lookat = lookat;\n    let originPoints = [];\n    let lookatPoints = [];\n\n    origin.forEach(point => {\n      originPoints = originPoints.concat(point);\n    });\n\n    lookat.forEach(point => {\n      lookatPoints = lookatPoints.concat(point);\n    });\n\n    this.curves = {\n      origin: new Bezier(originPoints),\n      lookat: new Bezier(lookatPoints)\n    };\n  }\n\n  public get(time = 0) {\n    const origin = this.curves.origin.get(time);\n    const lookat = this.curves.lookat.get(time);\n    return {\n      origin,\n      lookat\n    };\n  }\n\n  public rebuild() {\n    this.curves.origin.update();\n    this.curves.lookat.update();\n  }\n\n  public destroy() {\n    this.curves.origin = null;\n    this.curves.lookat = null;\n  }\n}\n\ninterface IDollyHelperLines {\n  origin: Mesh;\n  lookat: Mesh;\n}\n\ninterface IDollyHelperPoints {\n  origin: Mesh[];\n  lookat: Mesh[];\n}\n\nclass DollyHelper extends EventDispatcher {\n  public id: string;\n  public dolly: Dolly;\n  public scene: Scene;\n  public gui: GUI;\n  public guiOrigin: GUI;\n  public guiLookat: GUI;\n  public steps: number;\n  public range: number;\n  public lines: IDollyHelperLines;\n  public points: IDollyHelperPoints;\n  constructor(\n    dolly: Dolly,\n    scene: Scene,\n    gui: GUI,\n    steps = 50,\n    range = 100,\n    guiOpen = false,\n    guiOpenOrigin = false,\n    guiOpenLookat = false\n  ) {\n    super();\n    this.id = uuid();\n    this.dolly = dolly;\n    this.scene = scene;\n    this.gui = gui.addFolder(`Dolly ${this.id}`);\n    if (guiOpen) {\n      this.gui.open();\n    }\n    this.steps = steps;\n    this.range = range;\n    this.lines = {\n      origin: null,\n      lookat: null\n    };\n    this.points = {\n      origin: [],\n      lookat: []\n    };\n    this.createPoints('origin', this.dolly.origin);\n    this.createPoints('lookat', this.dolly.lookat);\n    this.createLine('origin', this.dolly.curves.origin.getLUT(this.steps));\n    this.createLine('lookat', this.dolly.curves.lookat.getLUT(this.steps));\n\n    // Create gui folders\n    this.guiOrigin = this.gui.addFolder(`origin`);\n    this.guiLookat = this.gui.addFolder(`lookat`);\n\n    if (guiOpenOrigin) {\n      this.guiOrigin.open();\n    }\n\n    if (guiOpenLookat) {\n      this.guiLookat.open();\n    }\n    this.guiLookat.open();\n\n    this.dolly.curves.origin.points.forEach((point, i) => {\n      const folder = this.guiOrigin.addFolder(`${i}`);\n      folder.open();\n      folder.add(point, 'x', -this.range, this.range).onChange(this._rebuild);\n      folder.add(point, 'y', -this.range, this.range).onChange(this._rebuild);\n      folder.add(point, 'z', -this.range, this.range).onChange(this._rebuild);\n    });\n\n    this.dolly.curves.lookat.points.forEach((point, i) => {\n      const folder = this.guiLookat.addFolder(`${i}`);\n      folder.open();\n      folder.add(point, 'x', -this.range, this.range).onChange(this._rebuild);\n      folder.add(point, 'y', -this.range, this.range).onChange(this._rebuild);\n      folder.add(point, 'z', -this.range, this.range).onChange(this._rebuild);\n    });\n  }\n\n  public _rebuild = () => {\n    this.dolly.rebuild();\n    this.updateLine('origin', this.dolly.curves.origin.getLUT(this.steps));\n    this.updateLine('lookat', this.dolly.curves.lookat.getLUT(this.steps));\n    this.updatePoints('origin', this.dolly.curves.origin.points);\n    this.updatePoints('lookat', this.dolly.curves.lookat.points);\n    this.emit('rebuild');\n  };\n\n  public flatten(points) {\n    let pointsFlat = [];\n    points.forEach(point => {\n      pointsFlat = pointsFlat.concat([point.x, point.y, point.z]);\n    });\n    return pointsFlat;\n  }\n\n  public createPoints(id: string, points: object[]) {\n    points.forEach((point: any, i) => {\n      this.points[id][i] = new Mesh(\n        new SphereGeometry(0.2, 4, 5),\n        new Material({\n          drawType: DRAW_LINES\n        })\n      );\n      this.points[id][i].position.set(point.x, point.y, point.z);\n      this.scene.add(this.points[id][i]);\n    });\n  }\n\n  public updatePoints(id: string, points: object[]) {\n    points.forEach((point: any, i) => {\n      this.points[id][i].position.set(point.x, point.y, point.z);\n    });\n  }\n\n  public updateLine(id: string, points: object[]) {\n    const length = this.lines[id].geometry.vertices.length / 2;\n    let i2 = 0;\n    let point0;\n    let point1;\n    for (let i = 0; i < length; i += 1) {\n      i2 = i * 2;\n      if (i < length) {\n        point0 = points[i];\n        point1 = points[i + 1];\n        this.lines[id].geometry.vertices[i2].set(point0.x, point0.y, point0.z);\n        this.lines[id].geometry.vertices[i2 + 1].set(\n          point1.x,\n          point1.y,\n          point1.z\n        );\n      }\n    }\n    this.lines[id].geometry.updateVertices();\n  }\n\n  public createLine(id: string, points: object[]) {\n    const bufferVertices = new Float32Array(this.flatten(points));\n    this.lines[id] = new Mesh(\n      new LineGeometry(bufferVertices),\n      new Material({\n        drawType: DRAW_LINES\n      })\n    );\n    this.scene.add(this.lines[id]);\n  }\n\n  public destroy() {\n    Object.keys(this.lines).forEach(id => {\n      this.scene.remove(this.lines[id], true);\n    });\n    Object.keys(this.points).forEach(id => {\n      this.points[id].forEach(mesh => {\n        this.scene.remove(mesh, true);\n      });\n    });\n    this.scene = null;\n  }\n}\n\ninterface CameraDollyOptions {\n  camera: PerspectiveCamera;\n  scene: Scene;\n  gui: GUI;\n  curveSteps: number;\n  guiSliderRange: number;\n  guiOpen: boolean;\n  guiOpenOrigin: boolean;\n  guiOpenLookat: boolean;\n}\n\nexport default class CameraDolly {\n  public id: string;\n  public camera: PerspectiveCamera;\n  public scene: Scene;\n  public gui: GUI;\n  public guiFolder: GUI;\n  public curveSteps: number;\n  public guiSliderRange: number;\n  public guiOpen: boolean;\n  public guiOpenOrigin: boolean;\n  public guiOpenLookat: boolean;\n  public dollies: Dolly[];\n  public helpers: DollyHelper[];\n  public dolly: string;\n  public time: number;\n\n  constructor(options: CameraDollyOptions) {\n    this.id = uuid();\n    Object.assign(this, options);\n    this.dollies = [];\n    this.helpers = [];\n    this.dolly = '';\n    this.time = 0;\n\n    if (this.gui) {\n      this.guiFolder = this.gui.addFolder(`Camera Dolly ${this.id}`);\n      this.guiFolder.open();\n      this.guiFolder.add(this, 'export');\n    }\n  }\n\n  public add(id, data) {\n    this.dollies[id] = new Dolly(data.origin, data.lookat, this.curveSteps);\n    this.set(id);\n    if (this.guiFolder) {\n      this.helpers[id] = new DollyHelper(\n        this.dollies[id],\n        this.scene,\n        this.gui,\n        this.curveSteps,\n        this.guiSliderRange,\n        this.guiOpen,\n        this.guiOpenOrigin,\n        this.guiOpenLookat\n      );\n      this.helpers[id].on('rebuild', this.update);\n    }\n  }\n\n  public export() {\n    const data = JSON.stringify(\n      {\n        origin: this.dollies[this.dolly].curves.origin.points,\n        lookat: this.dollies[this.dolly].curves.lookat.points\n      },\n      undefined,\n      2\n    );\n    window.prompt('Copy to clipboard: Ctrl+C, Enter', data);\n  }\n\n  public set(id) {\n    this.dolly = id;\n  }\n\n  public update = () => {\n    const { origin, lookat } = this.dollies[this.dolly].get(this.time);\n    this.camera.position.set(origin.x, origin.y, origin.z);\n    this.camera.lookAt(lookat.x, lookat.y, lookat.z);\n  };\n\n  public destroy() {\n    Object.keys(this.dollies).forEach(id => {\n      this.dollies[id].destroy();\n    });\n    Object.keys(this.helpers).forEach(id => {\n      this.helpers[id].destroy();\n    });\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/utils/CameraDolly.ts","module.exports = require('./lib/bezier');\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/bezier-js/index.js\n// module id = 94\n// module chunks = 0","(function() {\n  \"use strict\";\n\n  var utils = require('./utils.js');\n\n  /**\n   * Poly Bezier\n   * @param {[type]} curves [description]\n   */\n  var PolyBezier = function(curves) {\n    this.curves = [];\n    this._3d = false;\n    if(!!curves) {\n      this.curves = curves;\n      this._3d = this.curves[0]._3d;\n    }\n  }\n\n  PolyBezier.prototype = {\n    valueOf: function() {\n      return this.toString();\n    },\n    toString: function() {\n      return \"[\" + this.curves.map(function(curve) {\n        return utils.pointsToString(curve.points);\n      }).join(\", \") + \"]\";\n    },\n    addCurve: function(curve) {\n      this.curves.push(curve);\n      this._3d = this._3d || curve._3d;\n    },\n    length: function() {\n      return this.curves.map(function(v) { return v.length(); }).reduce(function(a,b) { return a+b; });\n    },\n    curve: function(idx) {\n      return this.curves[idx];\n    },\n    bbox: function() {\n      var c = this.curves;\n      var bbox = c[0].bbox();\n      for(var i=1; i<c.length; i++) {\n        utils.expandbox(bbox, c[i].bbox());\n      }\n      return bbox;\n    },\n    offset: function(d) {\n      var offset = [];\n      this.curves.forEach(function(v) {\n        offset = offset.concat(v.offset(d));\n      });\n      return new PolyBezier(offset);\n    }\n  };\n\n  module.exports = PolyBezier;\n}());\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/bezier-js/lib/poly-bezier.js\n// module id = 95\n// module chunks = 0","var rng = require('./lib/rng');\nvar bytesToUuid = require('./lib/bytesToUuid');\n\n// **`v1()` - Generate time-based UUID**\n//\n// Inspired by https://github.com/LiosK/UUID.js\n// and http://docs.python.org/library/uuid.html\n\n// random #'s we need to init node and clockseq\nvar _seedBytes = rng();\n\n// Per 4.5, create and 48-bit node id, (47 random bits + multicast bit = 1)\nvar _nodeId = [\n  _seedBytes[0] | 0x01,\n  _seedBytes[1], _seedBytes[2], _seedBytes[3], _seedBytes[4], _seedBytes[5]\n];\n\n// Per 4.2.2, randomize (14 bit) clockseq\nvar _clockseq = (_seedBytes[6] << 8 | _seedBytes[7]) & 0x3fff;\n\n// Previous uuid creation time\nvar _lastMSecs = 0, _lastNSecs = 0;\n\n// See https://github.com/broofa/node-uuid for API details\nfunction v1(options, buf, offset) {\n  var i = buf && offset || 0;\n  var b = buf || [];\n\n  options = options || {};\n\n  var clockseq = options.clockseq !== undefined ? options.clockseq : _clockseq;\n\n  // UUID timestamps are 100 nano-second units since the Gregorian epoch,\n  // (1582-10-15 00:00).  JSNumbers aren't precise enough for this, so\n  // time is handled internally as 'msecs' (integer milliseconds) and 'nsecs'\n  // (100-nanoseconds offset from msecs) since unix epoch, 1970-01-01 00:00.\n  var msecs = options.msecs !== undefined ? options.msecs : new Date().getTime();\n\n  // Per 4.2.1.2, use count of uuid's generated during the current clock\n  // cycle to simulate higher resolution clock\n  var nsecs = options.nsecs !== undefined ? options.nsecs : _lastNSecs + 1;\n\n  // Time since last uuid creation (in msecs)\n  var dt = (msecs - _lastMSecs) + (nsecs - _lastNSecs)/10000;\n\n  // Per 4.2.1.2, Bump clockseq on clock regression\n  if (dt < 0 && options.clockseq === undefined) {\n    clockseq = clockseq + 1 & 0x3fff;\n  }\n\n  // Reset nsecs if clock regresses (new clockseq) or we've moved onto a new\n  // time interval\n  if ((dt < 0 || msecs > _lastMSecs) && options.nsecs === undefined) {\n    nsecs = 0;\n  }\n\n  // Per 4.2.1.2 Throw error if too many uuids are requested\n  if (nsecs >= 10000) {\n    throw new Error('uuid.v1(): Can\\'t create more than 10M uuids/sec');\n  }\n\n  _lastMSecs = msecs;\n  _lastNSecs = nsecs;\n  _clockseq = clockseq;\n\n  // Per 4.1.4 - Convert from unix epoch to Gregorian epoch\n  msecs += 12219292800000;\n\n  // `time_low`\n  var tl = ((msecs & 0xfffffff) * 10000 + nsecs) % 0x100000000;\n  b[i++] = tl >>> 24 & 0xff;\n  b[i++] = tl >>> 16 & 0xff;\n  b[i++] = tl >>> 8 & 0xff;\n  b[i++] = tl & 0xff;\n\n  // `time_mid`\n  var tmh = (msecs / 0x100000000 * 10000) & 0xfffffff;\n  b[i++] = tmh >>> 8 & 0xff;\n  b[i++] = tmh & 0xff;\n\n  // `time_high_and_version`\n  b[i++] = tmh >>> 24 & 0xf | 0x10; // include version\n  b[i++] = tmh >>> 16 & 0xff;\n\n  // `clock_seq_hi_and_reserved` (Per 4.2.2 - include variant)\n  b[i++] = clockseq >>> 8 | 0x80;\n\n  // `clock_seq_low`\n  b[i++] = clockseq & 0xff;\n\n  // `node`\n  var node = options.node || _nodeId;\n  for (var n = 0; n < 6; ++n) {\n    b[i + n] = node[n];\n  }\n\n  return buf ? buf : bytesToUuid(b);\n}\n\nmodule.exports = v1;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/uuid/v1.js\n// module id = 96\n// module chunks = 0","// Unique ID creation requires a high quality random # generator.  In the\n// browser this is a little complicated due to unknown quality of Math.random()\n// and inconsistent support for the `crypto` API.  We do the best we can via\n// feature-detection\nvar rng;\n\nvar crypto = global.crypto || global.msCrypto; // for IE 11\nif (crypto && crypto.getRandomValues) {\n  // WHATWG crypto RNG - http://wiki.whatwg.org/wiki/Crypto\n  var rnds8 = new Uint8Array(16); // eslint-disable-line no-undef\n  rng = function whatwgRNG() {\n    crypto.getRandomValues(rnds8);\n    return rnds8;\n  };\n}\n\nif (!rng) {\n  // Math.random()-based (RNG)\n  //\n  // If all else fails, use Math.random().  It's fast, but is of unspecified\n  // quality.\n  var rnds = new Array(16);\n  rng = function() {\n    for (var i = 0, r; i < 16; i++) {\n      if ((i & 0x03) === 0) r = Math.random() * 0x100000000;\n      rnds[i] = r >>> ((i & 0x03) << 3) & 0xff;\n    }\n\n    return rnds;\n  };\n}\n\nmodule.exports = rng;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/uuid/lib/rng-browser.js\n// module id = 97\n// module chunks = 0","var g;\n\n// This works in non-strict mode\ng = (function() {\n\treturn this;\n})();\n\ntry {\n\t// This works if eval is allowed (see CSP)\n\tg = g || Function(\"return this\")() || (1,eval)(\"this\");\n} catch(e) {\n\t// This works if the window reference is available\n\tif(typeof window === \"object\")\n\t\tg = window;\n}\n\n// g can still be undefined, but nothing to do about it...\n// We return undefined, instead of nothing here, so it's\n// easier to handle this case. if(!global) { ...}\n\nmodule.exports = g;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// (webpack)/buildin/global.js\n// module id = 98\n// module chunks = 0","/**\n * Convert array of 16 byte values to UUID string format of the form:\n * XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX\n */\nvar byteToHex = [];\nfor (var i = 0; i < 256; ++i) {\n  byteToHex[i] = (i + 0x100).toString(16).substr(1);\n}\n\nfunction bytesToUuid(buf, offset) {\n  var i = offset || 0;\n  var bth = byteToHex;\n  return bth[buf[i++]] + bth[buf[i++]] +\n          bth[buf[i++]] + bth[buf[i++]] + '-' +\n          bth[buf[i++]] + bth[buf[i++]] + '-' +\n          bth[buf[i++]] + bth[buf[i++]] + '-' +\n          bth[buf[i++]] + bth[buf[i++]] + '-' +\n          bth[buf[i++]] + bth[buf[i++]] +\n          bth[buf[i++]] + bth[buf[i++]] +\n          bth[buf[i++]] + bth[buf[i++]];\n}\n\nmodule.exports = bytesToUuid;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/uuid/lib/bytesToUuid.js\n// module id = 99\n// module chunks = 0","/**\n * @author alteredq / http://alteredqualia.com/\n * https://github.com/mrdoob/three.js/blob/master/src/core/Clock.js\n */\n\nlet diff: number;\nlet newTime: number;\nconst dateType = window.performance || Date;\n\nexport default class Clock {\n  public autoStart: boolean;\n  public startTime: number;\n  public oldTime: number;\n  public elapsedTime: number;\n  public isRunning: boolean;\n\n  constructor(autoStart = false) {\n    this.startTime = 0;\n    this.oldTime = 0;\n    this.elapsedTime = 0;\n    this.isRunning = autoStart;\n  }\n\n  public start() {\n    this.startTime = dateType.now();\n    this.oldTime = this.startTime;\n    this.elapsedTime = 0;\n    this.isRunning = true;\n  }\n\n  public stop() {\n    this.getElapsedTime();\n    this.isRunning = false;\n  }\n\n  public getElapsedTime() {\n    this.getDelta();\n    return this.elapsedTime;\n  }\n\n  public getDelta() {\n    diff = 0;\n    if (this.autoStart && !this.isRunning) {\n      this.start();\n    }\n\n    if (this.isRunning) {\n      newTime = dateType.now();\n\n      diff = (newTime - this.oldTime) / 1000;\n      this.oldTime = newTime;\n\n      this.elapsedTime += diff;\n    }\n\n    return diff;\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/utils/Clock.ts","(function (undefined) {\n  'use strict';\n\n  var OBJ = {};\n\n  if (typeof module !== 'undefined') {\n    module.exports = OBJ;\n  } else {\n    window.OBJ = OBJ;\n  }\n\n  /**\n   * The main Mesh class. The constructor will parse through the OBJ file data\n   * and collect the vertex, vertex normal, texture, and face information. This\n   * information can then be used later on when creating your VBOs. See\n   * OBJ.initMeshBuffers for an example of how to use the newly created Mesh\n   *\n   * @class Mesh\n   * @constructor\n   *\n   * @param {String} objectData a string representation of an OBJ file with newlines preserved.\n   */\n  OBJ.Mesh = function (objectData) {\n    /*\n     The OBJ file format does a sort of compression when saving a model in a\n     program like Blender. There are at least 3 sections (4 including textures)\n     within the file. Each line in a section begins with the same string:\n       * 'v': indicates vertex section\n       * 'vn': indicates vertex normal section\n       * 'f': indicates the faces section\n       * 'vt': indicates vertex texture section (if textures were used on the model)\n     Each of the above sections (except for the faces section) is a list/set of\n     unique vertices.\n\n     Each line of the faces section contains a list of\n     (vertex, [texture], normal) groups\n     Some examples:\n         // the texture index is optional, both formats are possible for models\n         // without a texture applied\n         f 1/25 18/46 12/31\n         f 1//25 18//46 12//31\n\n         // A 3 vertex face with texture indices\n         f 16/92/11 14/101/22 1/69/1\n\n         // A 4 vertex face\n         f 16/92/11 40/109/40 38/114/38 14/101/22\n\n     The first two lines are examples of a 3 vertex face without a texture applied.\n     The second is an example of a 3 vertex face with a texture applied.\n     The third is an example of a 4 vertex face. Note: a face can contain N\n     number of vertices.\n\n     Each number that appears in one of the groups is a 1-based index\n     corresponding to an item from the other sections (meaning that indexing\n     starts at one and *not* zero).\n\n     For example:\n         `f 16/92/11` is saying to\n           - take the 16th element from the [v] vertex array\n           - take the 92nd element from the [vt] texture array\n           - take the 11th element from the [vn] normal array\n         and together they make a unique vertex.\n     Using all 3+ unique Vertices from the face line will produce a polygon.\n\n     Now, you could just go through the OBJ file and create a new vertex for\n     each face line and WebGL will draw what appears to be the same model.\n     However, vertices will be overlapped and duplicated all over the place.\n\n     Consider a cube in 3D space centered about the origin and each side is\n     2 units long. The front face (with the positive Z-axis pointing towards\n     you) would have a Top Right vertex (looking orthogonal to its normal)\n     mapped at (1,1,1) The right face would have a Top Left vertex (looking\n     orthogonal to its normal) at (1,1,1) and the top face would have a Bottom\n     Right vertex (looking orthogonal to its normal) at (1,1,1). Each face\n     has a vertex at the same coordinates, however, three distinct vertices\n     will be drawn at the same spot.\n\n     To solve the issue of duplicate Vertices (the `(vertex, [texture], normal)`\n     groups), while iterating through the face lines, when a group is encountered\n     the whole group string ('16/92/11') is checked to see if it exists in the\n     packed.hashindices object, and if it doesn't, the indices it specifies\n     are used to look up each attribute in the corresponding attribute arrays\n     already created. The values are then copied to the corresponding unpacked\n     array (flattened to play nice with WebGL's ELEMENT_ARRAY_BUFFER indexing),\n     the group string is added to the hashindices set and the current unpacked\n     index is used as this hashindices value so that the group of elements can\n     be reused. The unpacked index is incremented. If the group string already\n     exists in the hashindices object, its corresponding value is the index of\n     that group and is appended to the unpacked indices array.\n     */\n    var verts = [], vertNormals = [], textures = [], unpacked = {};\n    // unpacking stuff\n    unpacked.verts = [];\n    unpacked.norms = [];\n    unpacked.textures = [];\n    unpacked.hashindices = {};\n    unpacked.indices = [];\n    unpacked.index = 0;\n    // array of lines separated by the newline\n    var lines = objectData.split('\\n');\n    \n    var VERTEX_RE = /^v\\s/;\n    var NORMAL_RE = /^vn\\s/;\n    var TEXTURE_RE = /^vt\\s/;\n    var FACE_RE = /^f\\s/;\n    var WHITESPACE_RE = /\\s+/;\n    \n    for (var i = 0; i < lines.length; i++) {\n      var line = lines[i].trim();\n      var elements = line.split(WHITESPACE_RE);\n      elements.shift();\n      \n      if (VERTEX_RE.test(line)) {\n        // if this is a vertex\n        verts.push.apply(verts, elements);\n      } else if (NORMAL_RE.test(line)) {\n        // if this is a vertex normal\n        vertNormals.push.apply(vertNormals, elements);\n      } else if (TEXTURE_RE.test(line)) {\n        // if this is a texture\n        textures.push.apply(textures, elements);\n      } else if (FACE_RE.test(line)) {\n        // if this is a face\n        /*\n        split this face into an array of vertex groups\n        for example:\n           f 16/92/11 14/101/22 1/69/1\n        becomes:\n          ['16/92/11', '14/101/22', '1/69/1'];\n        */\n        var quad = false;\n        for (var j = 0, eleLen = elements.length; j < eleLen; j++){\n            // Triangulating quads\n            // quad: 'f v0/t0/vn0 v1/t1/vn1 v2/t2/vn2 v3/t3/vn3/'\n            // corresponding triangles:\n            //      'f v0/t0/vn0 v1/t1/vn1 v2/t2/vn2'\n            //      'f v2/t2/vn2 v3/t3/vn3 v0/t0/vn0'\n            if(j === 3 && !quad) {\n                // add v2/t2/vn2 in again before continuing to 3\n                j = 2;\n                quad = true;\n            }\n            if(elements[j] in unpacked.hashindices){\n                unpacked.indices.push(unpacked.hashindices[elements[j]]);\n            }\n            else{\n                /*\n                Each element of the face line array is a vertex which has its\n                attributes delimited by a forward slash. This will separate\n                each attribute into another array:\n                    '19/92/11'\n                becomes:\n                    vertex = ['19', '92', '11'];\n                where\n                    vertex[0] is the vertex index\n                    vertex[1] is the texture index\n                    vertex[2] is the normal index\n                 Think of faces having Vertices which are comprised of the\n                 attributes location (v), texture (vt), and normal (vn).\n                 */\n                var vertex = elements[ j ].split( '/' );\n                /*\n                 The verts, textures, and vertNormals arrays each contain a\n                 flattend array of coordinates.\n\n                 Because it gets confusing by referring to vertex and then\n                 vertex (both are different in my descriptions) I will explain\n                 what's going on using the vertexNormals array:\n\n                 vertex[2] will contain the one-based index of the vertexNormals\n                 section (vn). One is subtracted from this index number to play\n                 nice with javascript's zero-based array indexing.\n\n                 Because vertexNormal is a flattened array of x, y, z values,\n                 simple pointer arithmetic is used to skip to the start of the\n                 vertexNormal, then the offset is added to get the correct\n                 component: +0 is x, +1 is y, +2 is z.\n\n                 This same process is repeated for verts and textures.\n                 */\n                // vertex position\n                unpacked.verts.push(+verts[(vertex[0] - 1) * 3 + 0]);\n                unpacked.verts.push(+verts[(vertex[0] - 1) * 3 + 1]);\n                unpacked.verts.push(+verts[(vertex[0] - 1) * 3 + 2]);\n                // vertex textures\n                if (textures.length) {\n                  unpacked.textures.push(+textures[(vertex[1] - 1) * 2 + 0]);\n                  unpacked.textures.push(+textures[(vertex[1] - 1) * 2 + 1]);\n                }\n                // vertex normals\n                unpacked.norms.push(+vertNormals[(vertex[2] - 1) * 3 + 0]);\n                unpacked.norms.push(+vertNormals[(vertex[2] - 1) * 3 + 1]);\n                unpacked.norms.push(+vertNormals[(vertex[2] - 1) * 3 + 2]);\n                // add the newly created vertex to the list of indices\n                unpacked.hashindices[elements[j]] = unpacked.index;\n                unpacked.indices.push(unpacked.index);\n                // increment the counter\n                unpacked.index += 1;\n            }\n            if(j === 3 && quad) {\n                // add v0/t0/vn0 onto the second triangle\n                unpacked.indices.push( unpacked.hashindices[elements[0]]);\n            }\n        }\n      }\n    }\n    this.vertices = unpacked.verts;\n    this.vertexNormals = unpacked.norms;\n    this.textures = unpacked.textures;\n    this.indices = unpacked.indices;\n  }\n\n  var Ajax = function(){\n    // this is just a helper class to ease ajax calls\n    var _this = this;\n    this.xmlhttp = new XMLHttpRequest();\n\n    this.get = function(url, callback){\n      _this.xmlhttp.onreadystatechange = function(){\n        if(_this.xmlhttp.readyState === 4){\n          callback(_this.xmlhttp.responseText, _this.xmlhttp.status);\n        }\n      };\n      _this.xmlhttp.open('GET', url, true);\n      _this.xmlhttp.send();\n    }\n  };\n\n  /**\n   * Takes in an object of `mesh_name`, `'/url/to/OBJ/file'` pairs and a callback\n   * function. Each OBJ file will be ajaxed in and automatically converted to\n   * an OBJ.Mesh. When all files have successfully downloaded the callback\n   * function provided will be called and passed in an object containing\n   * the newly created meshes.\n   *\n   * **Note:** In order to use this function as a way to download meshes, a\n   * webserver of some sort must be used.\n   *\n   * @param {Object} nameAndURLs an object where the key is the name of the mesh and the value is the url to that mesh's OBJ file\n   *\n   * @param {Function} completionCallback should contain a function that will take one parameter: an object array where the keys will be the unique object name and the value will be a Mesh object\n   *\n   * @param {Object} meshes In case other meshes are loaded separately or if a previously declared variable is desired to be used, pass in a (possibly empty) json object of the pattern: { '<mesh_name>': OBJ.Mesh }\n   *\n   */\n  OBJ.downloadMeshes = function (nameAndURLs, completionCallback, meshes){\n    // the total number of meshes. this is used to implement \"blocking\"\n    var semaphore = Object.keys(nameAndURLs).length;\n    // if error is true, an alert will given\n    var error = false;\n    // this is used to check if all meshes have been downloaded\n    // if meshes is supplied, then it will be populated, otherwise\n    // a new object is created. this will be passed into the completionCallback\n    if(meshes === undefined) meshes = {};\n    // loop over the mesh_name,url key,value pairs\n    for(var mesh_name in nameAndURLs){\n      if(nameAndURLs.hasOwnProperty(mesh_name)){\n        new Ajax().get(nameAndURLs[mesh_name], (function(name) {\n          return function (data, status) {\n            if (status === 200) {\n              meshes[name] = new OBJ.Mesh(data);\n            }\n            else {\n              error = true;\n              console.error('An error has occurred and the mesh \"' +\n                name + '\" could not be downloaded.');\n            }\n            // the request has finished, decrement the counter\n            semaphore--;\n            if (semaphore === 0) {\n              if (error) {\n                // if an error has occurred, the user is notified here and the\n                // callback is not called\n                console.error('An error has occurred and one or meshes has not been ' +\n                  'downloaded. The execution of the script has terminated.');\n                throw '';\n              }\n              // there haven't been any errors in retrieving the meshes\n              // call the callback\n              completionCallback(meshes);\n            }\n          }\n        })(mesh_name));\n      }\n    }\n  };\n\n  var _buildBuffer = function( gl, type, data, itemSize ){\n    var buffer = gl.createBuffer();\n    var arrayView = type === gl.ARRAY_BUFFER ? Float32Array : Uint16Array;\n    gl.bindBuffer(type, buffer);\n    gl.bufferData(type, new arrayView(data), gl.STATIC_DRAW);\n    buffer.itemSize = itemSize;\n    buffer.numItems = data.length / itemSize;\n    return buffer;\n  }\n\n  /**\n   * Takes in the WebGL context and a Mesh, then creates and appends the buffers\n   * to the mesh object as attributes.\n   *\n   * @param {WebGLRenderingContext} gl the `canvas.getContext('webgl')` context instance\n   * @param {Mesh} mesh a single `OBJ.Mesh` instance\n   *\n   * The newly created mesh attributes are:\n   *\n   * Attrbute | Description\n   * :--- | ---\n   * **normalBuffer**       |contains the model&#39;s Vertex Normals\n   * normalBuffer.itemSize  |set to 3 items\n   * normalBuffer.numItems  |the total number of vertex normals\n   * |\n   * **textureBuffer**      |contains the model&#39;s Texture Coordinates\n   * textureBuffer.itemSize |set to 2 items\n   * textureBuffer.numItems |the number of texture coordinates\n   * |\n   * **vertexBuffer**       |contains the model&#39;s Vertex Position Coordinates (does not include w)\n   * vertexBuffer.itemSize  |set to 3 items\n   * vertexBuffer.numItems  |the total number of vertices\n   * |\n   * **indexBuffer**        |contains the indices of the faces\n   * indexBuffer.itemSize   |is set to 1\n   * indexBuffer.numItems   |the total number of indices\n   *\n   * A simple example (a lot of steps are missing, so don't copy and paste):\n   *\n   *     var gl   = canvas.getContext('webgl'),\n   *         mesh = OBJ.Mesh(obj_file_data);\n   *     // compile the shaders and create a shader program\n   *     var shaderProgram = gl.createProgram();\n   *     // compilation stuff here\n   *     ...\n   *     // make sure you have vertex, vertex normal, and texture coordinate\n   *     // attributes located in your shaders and attach them to the shader program\n   *     shaderProgram.vertexPositionAttribute = gl.getAttribLocation(shaderProgram, \"aVertexPosition\");\n   *     gl.enableVertexAttribArray(shaderProgram.vertexPositionAttribute);\n   *\n   *     shaderProgram.vertexNormalAttribute = gl.getAttribLocation(shaderProgram, \"aVertexNormal\");\n   *     gl.enableVertexAttribArray(shaderProgram.vertexNormalAttribute);\n   *\n   *     shaderProgram.textureCoordAttribute = gl.getAttribLocation(shaderProgram, \"aTextureCoord\");\n   *     gl.enableVertexAttribArray(shaderProgram.textureCoordAttribute);\n   *\n   *     // create and initialize the vertex, vertex normal, and texture coordinate buffers\n   *     // and save on to the mesh object\n   *     OBJ.initMeshBuffers(gl, mesh);\n   *\n   *     // now to render the mesh\n   *     gl.bindBuffer(gl.ARRAY_BUFFER, mesh.vertexBuffer);\n   *     gl.vertexAttribPointer(shaderProgram.vertexPositionAttribute, mesh.vertexBuffer.itemSize, gl.FLOAT, false, 0, 0);\n   *\n   *     gl.bindBuffer(gl.ARRAY_BUFFER, mesh.textureBuffer);\n   *     gl.vertexAttribPointer(shaderProgram.textureCoordAttribute, mesh.textureBuffer.itemSize, gl.FLOAT, false, 0, 0);\n   *\n   *     gl.bindBuffer(gl.ARRAY_BUFFER, mesh.normalBuffer);\n   *     gl.vertexAttribPointer(shaderProgram.vertexNormalAttribute, mesh.normalBuffer.itemSize, gl.FLOAT, false, 0, 0);\n   *\n   *     gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, model.mesh.indexBuffer);\n   *     gl.drawElements(gl.TRIANGLES, model.mesh.indexBuffer.numItems, gl.UNSIGNED_SHORT, 0);\n   */\n  OBJ.initMeshBuffers = function( gl, mesh ){\n    mesh.normalBuffer = _buildBuffer(gl, gl.ARRAY_BUFFER, mesh.vertexNormals, 3);\n    mesh.textureBuffer = _buildBuffer(gl, gl.ARRAY_BUFFER, mesh.textures, 2);\n    mesh.vertexBuffer = _buildBuffer(gl, gl.ARRAY_BUFFER, mesh.vertices, 3);\n    mesh.indexBuffer = _buildBuffer(gl, gl.ELEMENT_ARRAY_BUFFER, mesh.indices, 1);\n  }\n\n  OBJ.deleteMeshBuffers = function( gl, mesh ){\n    gl.deleteBuffer(mesh.normalBuffer);\n    gl.deleteBuffer(mesh.textureBuffer);\n    gl.deleteBuffer(mesh.vertexBuffer);\n    gl.deleteBuffer(mesh.indexBuffer);\n  }\n})();\n\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/webgl-obj-loader/webgl-obj-loader.js\n// module id = 101\n// module chunks = 0","import PerspectiveCamera from '../cameras/PerspectiveCamera';\nimport { clamp } from '../math/Utils';\nimport Vector2 from '../math/Vector2';\nimport Vector3 from '../math/Vector3';\n\nconst MODE_DRAG = 'MODE_DRAG';\nconst MODE_PAN = 'MODE_PAN';\nconst MODE_ZOOM = 'MODE_ZOOM';\nconst UP = new Vector3(0, 1, 0);\nconst EASE_THRESHOLD = 0.0001;\n\nexport default class OrbitControls {\n  public rotationSpeed: number;\n  public panSpeed: number;\n  public zoom: boolean;\n  public pan: boolean;\n  public smoothing: boolean;\n  public easing: number;\n  public isDragging: boolean;\n  public rotation: Vector2;\n  public _camera: PerspectiveCamera;\n  public _element: HTMLElement;\n  public _zoomMin: number;\n  public _zoomMax: number;\n  public _radius: number;\n  public _radiusOffset: number;\n  public _defaultRadius: number;\n  public _rotation: Vector2;\n  public _defaultRotation: Vector2;\n  public _x: number;\n  public _y: number;\n  public _z: number;\n  public _offset: Vector2;\n  public _offsetPan: Vector2;\n  public target: Vector3;\n  public _targetOffset: Vector3;\n  public _direction: Vector3;\n  public _lastZoomDistance: number;\n  public _width: number;\n  public _height: number;\n  public _mode: string;\n  public isDown: boolean;\n  public _start: Vector2;\n\n  constructor(\n    camera: PerspectiveCamera,\n    element: HTMLCanvasElement | HTMLDivElement\n  ) {\n    this.rotationSpeed = 5;\n    this.panSpeed = 10;\n    this.zoom = true;\n    this.pan = true;\n    this.smoothing = false;\n    this.easing = 0.1;\n    this.isDragging = false;\n    this._camera = camera;\n    this._element = element;\n    this._zoomMin = 0.1;\n    this._zoomMax = Infinity;\n    this._radius = Math.max(camera.position.x, camera.position.z);\n    this._radiusOffset = 0;\n    this._defaultRadius = Math.max(camera.position.x, camera.position.z);\n    this.rotation = new Vector2();\n    this._rotation = new Vector2();\n    this._rotation.x = Math.atan2(camera.position.y - 0, +this._radius - 0);\n    this._rotation.y = Math.atan2(camera.position.z - 0, camera.position.x - 0);\n    this._defaultRotation = new Vector2();\n    this._defaultRotation.x = Math.atan2(\n      camera.position.y - 0,\n      +this._radius - 0\n    );\n    this._defaultRotation.y = Math.atan2(\n      camera.position.z - 0,\n      camera.position.x - 0\n    );\n\n    const y = this._radius * Math.sin(this._rotation.x);\n    const r = this._radius * Math.cos(this._rotation.x);\n    const x = Math.sin(this._rotation.y) * r;\n    const z = Math.cos(this._rotation.y) * r;\n\n    this._x = x;\n    this._y = y;\n    this._z = z;\n    this._start = new Vector2();\n    this._offset = new Vector2();\n    this._offsetPan = new Vector2();\n    this.target = new Vector3();\n    this._targetOffset = new Vector3();\n    this._direction = new Vector3();\n    this._lastZoomDistance = 0;\n    this._width = window.innerWidth;\n    this._height = window.innerHeight;\n\n    this._element.addEventListener('mousedown', this._onTouchStart, false);\n    this._element.addEventListener('mousemove', this._onTouchMove, false);\n    this._element.addEventListener('mouseup', this._onTouchEnd, false);\n    this._element.addEventListener('touchstart', this._onTouchStart, false);\n    this._element.addEventListener('touchmove', this._onTouchMove, false);\n    this._element.addEventListener('touchend', this._onTouchEnd, false);\n    this._element.addEventListener('contextmenu', this._onContextMenu, false);\n    window.addEventListener('mousewheel', this._onMouseWheel, false);\n    window.addEventListener('keypress', this._onKeypress, false);\n  }\n\n  public _onTouchStart = event => {\n    event.preventDefault();\n\n    if (event.touches) {\n      // Device\n      switch (event.touches.length) {\n        case 1:\n          this._mode = MODE_DRAG;\n          this._offset.y = this._rotation.y;\n          this._offset.x = this._rotation.x;\n          break;\n        case 2: {\n          this._mode = MODE_ZOOM;\n          this._radiusOffset = this._radius;\n          break;\n        }\n        default: {\n          this._mode = MODE_PAN;\n          this._offset.y = this.target.y;\n          this._offset.x = this.target.x;\n        }\n      }\n    } else {\n      // Desktop\n      switch (event.which) {\n        case 3:\n          this._mode = MODE_PAN;\n          this._offset.y = this.target.y;\n          this._offset.x = this.target.x;\n          break;\n        default: {\n          this._mode = MODE_DRAG;\n          this._offset.y = this._rotation.y;\n          this._offset.x = this._rotation.x;\n        }\n      }\n    }\n\n    this._start.y = event.pageX / this._width;\n    this._start.x = event.pageY / this._height;\n    this._targetOffset.copy(this.target);\n    this._radiusOffset = this._radius;\n    this.isDown = true;\n  };\n\n  public _onTouchMove = event => {\n    if (this.isDown) {\n      this.isDragging = true;\n      switch (this._mode) {\n        case MODE_PAN: {\n          if (!this.pan) return;\n          const y = event.pageX / this._width;\n          const x = event.pageY / this._height;\n          this._direction\n            .copy(this._camera.position)\n            .subtract(this.target)\n            .normalize();\n          const cross = this._direction.cross(UP);\n          const tx =\n            this._targetOffset.x +\n            -(this._start.y - y) * this.panSpeed * cross.x;\n          const ty =\n            this._targetOffset.y + -(this._start.x - x) * this.panSpeed;\n          const tz =\n            this._targetOffset.z +\n            -(this._start.y - y) * this.panSpeed * cross.z;\n          this.target.set(tx, ty, tz);\n          break;\n        }\n        case MODE_ZOOM: {\n          if (!this.zoom) return;\n          const dx = event.touches[0].pageX - event.touches[1].pageX;\n          const dy = event.touches[0].pageY - event.touches[1].pageY;\n          const distance = Math.sqrt(dx * dx + dy * dy);\n          const sign = this._lastZoomDistance > distance ? 1 : -1;\n          // Simulate the same data as the scroll\n          this._zoomConstraint(sign * 100);\n          this._lastZoomDistance = distance;\n          break;\n        }\n        default: {\n          // Drag\n          const y = event.pageX / this._width;\n          const x = event.pageY / this._height;\n          this._rotation.x =\n            this._offset.x + -(this._start.x - x) * this.rotationSpeed;\n          this._rotation.y =\n            this._offset.y + (this._start.y - y) * this.rotationSpeed;\n          this._rotation.x = clamp(this._rotation.x, -Math.PI / 2, Math.PI / 2);\n        }\n      }\n\n      this.update();\n    }\n  };\n\n  public _onTouchEnd = () => {\n    this.isDown = false;\n    this.isDragging = false;\n  };\n\n  public _onContextMenu = event => {\n    event.preventDefault();\n  };\n\n  public _zoomConstraint(delta) {\n    if (!this.zoom) return;\n    const value = delta / 1000;\n    const speed = 3;\n    this._radius += value * speed;\n    this._radius = clamp(this._radius, this._zoomMin, this._zoomMax);\n    this.update();\n  }\n\n  public update() {\n    if (this.smoothing) {\n      this.rotation.x += (this._rotation.x - this.rotation.x) * this.easing;\n      this.rotation.y += (this._rotation.y - this.rotation.y) * this.easing;\n      if (Math.abs(this.rotation.x - this._rotation.x) < EASE_THRESHOLD) {\n        this.rotation.x = this._rotation.x;\n      }\n      if (Math.abs(this.rotation.y - this._rotation.y) < EASE_THRESHOLD) {\n        this.rotation.y = this._rotation.y;\n      }\n    } else {\n      this.rotation.x = this._rotation.x;\n      this.rotation.y = this._rotation.y;\n    }\n\n    const y = this._radius * Math.sin(this.rotation.x);\n    const r = this._radius * Math.cos(this.rotation.x); // radius of the sphere\n    const x = Math.sin(this.rotation.y) * r;\n    const z = Math.cos(this.rotation.y) * r;\n\n    this._x = x;\n    this._y = y;\n    this._z = z;\n\n    this._camera.position.set(this._x, this._y, this._z).add(this.target);\n    this._camera.lookAt(this.target.x, this.target.y, this.target.z);\n  }\n\n  public _onMouseWheel = event => {\n    let delta = 0;\n\n    if (event.wheelDelta) {\n      // Webkit, Opera, Explorer\n      delta = event.wheelDelta;\n    } else if (event.detail) {\n      // Firefox\n      delta = event.detail;\n    }\n\n    this._zoomConstraint(-delta);\n  };\n\n  public _onKeypress = event => {\n    switch (event.keyCode) {\n      case 114: // r\n        // Reset\n        this.reset();\n        break;\n      default:\n    }\n  };\n\n  public reset() {\n    this.target.set(0, 0, 0);\n    this._rotation.y = this._defaultRotation.y;\n    this._rotation.x = this._defaultRotation.x;\n    this._radius = this._defaultRadius;\n    this.update();\n  }\n\n  public dispose() {\n    this._element.removeEventListener('mousedown', this._onTouchStart);\n    this._element.removeEventListener('mousemove', this._onTouchMove);\n    this._element.removeEventListener('mouseup', this._onTouchEnd);\n    this._element.removeEventListener('touchstart', this._onTouchStart);\n    this._element.removeEventListener('touchmove', this._onTouchMove);\n    this._element.removeEventListener('touchend', this._onTouchEnd);\n    this._element.removeEventListener('contextmenu', this._onContextMenu);\n    window.removeEventListener('mousewheel', this._onMouseWheel);\n    window.removeEventListener('keypress', this._onKeypress);\n    this._camera = null;\n    this._element = null;\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/controls/OrbitControls.ts","import FileLoader from './FileLoader';\n\nexport default function(file) {\n  return new Promise((resolve, reject) => {\n    FileLoader(file)\n      .then(response => {\n        const data = JSON.parse(response);\n        resolve(data);\n      })\n      .catch(reject);\n  });\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/loaders/JsonLoader.ts","import ObjParser from '../utils/ObjParser';\nimport FileLoader from './FileLoader';\n\nexport default function(file) {\n  return new Promise((resolve, reject) => {\n    FileLoader(file)\n      .then(response => {\n        const data = ObjParser(response);\n        resolve(data);\n      })\n      .catch(reject);\n  });\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/loaders/ObjLoader.ts"],"sourceRoot":""}